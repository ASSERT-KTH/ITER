bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Sep  =  f.finish(sep.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  f.finish(sep.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  f.finish(sep.getPrinter(),  f.getParser(),  f.getSeparator());	  Sep    =    sep.finish(f.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	70	None	replace
2	[BUG]  [BUGGY]  Sep  =  parser.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  parser.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  parser.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());	  Sep    =    sep.finish(f.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	70	None	replace
3	[BUG]  [BUGGY]  Sep  =  f.finish(sep.getPrinter(),  sep.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  f.finish(sep.getPrinter(),  sep.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  f.finish(sep.getPrinter(),  sep.getParser(),  f.getSeparator());	  Sep    =    sep.finish(f.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	70	None	replace
4	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size,  notPrinter));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size,  notPrinter));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs.subList(2,  size,  notPrinter));	  Object[]    sep    =    createSeparator(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	61	None	replace
5	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size),  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs.subList(2,  size),  notPrinter);	  Object[]    sep    =    createSeparator(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	61	None	replace
6	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size  +  1));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size  +  1));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs.subList(2,  size  +  1));	  Object[]    sep    =    createSeparator(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	61	None	replace
7	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs.subList(2,  size),  notPrinter,  notParser);	  Object[]    sep    =    createSeparator(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	61	None	replace
8	[BUG]  [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser(),  notPrinter.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser(),  notPrinter.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep.getPrinter(),  f.getParser(),  notPrinter.getSeparator());	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkNotNull(elementPairs,  sep,  notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkNotNull(elementPairs,  sep,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkNotNull(elementPairs,  sep,  notParser);	  Preconditions.checkNotNull(elementPairs,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	18	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkNotNull(elementPairs,  sep,  notPrinter);  [CE]  cannot  find  symbol  Preconditions  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkNotNull(elementPairs,  sep,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkNotNull(elementPairs,  sep,  notPrinter);	  Preconditions.checkNotNull(elementPairs,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	18	None	replace
11	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  sep.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs.getPrinter(),  sep.getSeparator());	  sep    =    f.finish(f.getPrinter(),    sep.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
12	[BUG]  [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  sep.getSeparator());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f,  f.getPrinter(),  sep.getSeparator());	  sep    =    f.finish(f.getPrinter(),    sep.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
13	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  sep,  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  sep,  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  sep,  f.getSeparator());	  sep    =    f.finish(f.getPrinter(),    sep.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
14	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter,  notParser);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter,  notParser);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	27	None	replace
15	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter,  notParser);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter,  notParser);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
16	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  size,  notPrinter);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  size,  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  size,  notPrinter);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	27	None	replace
17	[BUG]  [BUGGY]  int  size  =  elements.size();  [CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  int  size  =  elements.size();  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	int  size  =  elements.size();	  int    size    =    elementPairs.size()    -    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	36	None	replace
18	[BUG]  [BUGGY]  int  size  =  componentPairs.size();  [CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  int  size  =  componentPairs.size();  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	int  size  =  componentPairs.size();	  int    size    =    elementPairs.size()    -    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	36	None	replace
19	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size  +  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(0,  size  +  1);	  Object[]    sep    =    elementPairs.subList(0,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	51	None	replace
20	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size  -  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size  -  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(0,  size  -  1);	  Object[]    sep    =    elementPairs.subList(0,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	51	None	replace
21	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(0,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	48	None	replace
22	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter.getBeforeParser());  [CE]  boolean  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter.getBeforeParser());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getBeforeParser());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	55	None	replace
23	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  sep.getBeforeParser());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  sep.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  sep.getBeforeParser());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
24	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter,  sep.getBeforeParser());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter,  sep.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter,  sep.getBeforeParser());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
25	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter,  notParser);  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter,  notParser);	          Object    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser);    	non-compiled	[CE]  ')'  expected	69	None	replace
26	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  f);  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  f);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  f);	          Object    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser);    	non-compiled	[CE]  ')'  expected	69	None	replace
27	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter,  notParser);  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter,  notParser);	          Object    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser);    	non-compiled	[CE]  ')'  expected	69	None	replace
28	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
29	[BUG]  [BUGGY]  sep  =  f.finish(parser.getPrinter(),  f.getParser(),  f.getBeforeParser());  [CE]  cannot  find  symbol  parser  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(parser.getPrinter(),  f.getParser(),  f.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(parser.getPrinter(),  f.getParser(),  f.getBeforeParser());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol  parser	56	None	replace
30	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  parser.getBeforeParser());  [CE]  cannot  find  symbol  parser  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  parser.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  parser.getBeforeParser());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol  parser	56	None	replace
31	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  parser.getSeparator());  [CE]  cannot  find  symbol  parser  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  parser.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  parser.getSeparator());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  parser	9	None	replace
32	[BUG]  [BUGGY]  sep  =  f.finish(parser.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  parser  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(parser.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(parser.getPrinter(),  f.getParser(),  f.getSeparator());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  parser	9	None	replace
33	[BUG]  [BUGGY]  sep  =  f.finish(paramser.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  paramser  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(paramser.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(paramser.getPrinter(),  f.getParser(),  f.getSeparator());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  paramser	9	None	replace
34	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size);  [CE]  ')'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size);	  Object[]    sep    =    toFormatter(elementPairs.subList(0,    size);    	non-compiled	[CE]  ')'  expected	21	None	replace
35	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size);  [CE]  ')'  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(3,  size);	  Object[]    sep    =    toFormatter(elementPairs.subList(0,    size);    	non-compiled	[CE]  ')'  expected	21	None	replace
36	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(4,  size);  [CE]  ')'  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(4,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(4,  size);	  Object[]    sep    =    toFormatter(elementPairs.subList(0,    size);    	non-compiled	[CE]  ')'  expected	21	None	replace
37	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter.getSeparator());  [CE]  boolean  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter.getSeparator());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getSeparator());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	6	None	replace
38	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  sep.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  sep.getSeparator());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
39	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  null,  sep.getSeparator());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  null,  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  null,  sep.getSeparator());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
40	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(1,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	49	None	replace
41	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  beforeParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  beforeParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  beforeParser);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	73	None	replace
42	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  size,  notPrinter,  notParser,  beforeParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  size,  notPrinter,  notParser,  beforeParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  size,  notPrinter,  notParser,  beforeParser);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	73	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  &&  notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  &&  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  2  &&  notParser);	  Preconditions.checkState(elementPairs.size()    ==    2    &&    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	35	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  &&  notPrinter,  notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  &&  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  2  &&  notPrinter,  notParser);	  Preconditions.checkState(elementPairs.size()    ==    2    &&    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	35	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  ||  notPrinter);  [CE]  cannot  find  symbol  Preconditions  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  ||  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  2  ||  notPrinter);	  Preconditions.checkState(elementPairs.size()    ==    2    &&    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	35	None	replace
46	[BUG]  [BUGGY]  parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	82	None	replace
47	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	82	None	replace
48	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	82	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  >=  2);  [CE]  cannot  find  symbol  Preconditions  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  >=  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  >=  2);	  Preconditions.checkState(elementPairs.size()!=    2);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	86	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  >>  2);  [CE]  cannot  find  symbol  Preconditions  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  >>  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  >>  2);	  Preconditions.checkState(elementPairs.size()!=    2);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	86	None	replace
51	[BUG]  [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser(),  notPrinter.getBeforeParser());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser(),  notPrinter.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep.getPrinter(),  f.getParser(),  notPrinter.getBeforeParser());	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
52	[BUG]  [BUGGY]  sep  =  f.finish(sep,  f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(sep,  f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep,  f.getPrinter(),  f.getParser(),  f.getBeforeParser());	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
53	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(sep.getParser(),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(sep.getParser(),  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(sep.getParser(),  notPrinter);	  Object[]    sep    =    createSeparator(sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	85	None	replace
54	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(sep.getPrinter());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(sep.getPrinter());  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(sep.getPrinter());	  Object[]    sep    =    createSeparator(sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	85	None	replace
55	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size  +  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size  +  1);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	4	None	replace
56	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  separator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  separator);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	4	None	replace
57	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  sep);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  sep);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	4	None	replace
58	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  size,  notPrinter);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  size,  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  size,  notPrinter);	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
59	[BUG]  [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser(),  size,  notParser);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(sep.getPrinter(),  f.getParser(),  size,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep.getPrinter(),  f.getParser(),  size,  notParser);	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
60	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  null,  size);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  null,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  null,  size);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    null);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	88	None	replace
61	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  null);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  null);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  size,  null);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    null);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	88	None	replace
62	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(1,  size,  notPrinter);	  Object[]    sep    =    elementPairs.subList(1,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	53	None	replace
63	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size  +  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(1,  size  +  1);	  Object[]    sep    =    elementPairs.subList(1,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	53	None	replace
64	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  size,  notPrinter,  notParser,  beforeParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  size,  notPrinter,  notParser,  beforeParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  size,  notPrinter,  notParser,  beforeParser);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	12	None	replace
65	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  beforeParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  beforeParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  beforeParser);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	12	None	replace
66	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  0,  size);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  0,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  0,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    -1,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	78	None	replace
67	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  -1,  size,  notPrinter);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  -1,  size,  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  -1,  size,  notPrinter);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    -1,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	78	None	replace
68	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  0,  size);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  0,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  0,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    -1,    size);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
69	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	71	None	replace
70	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	71	None	replace
71	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter),  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter),  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter),  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	71	None	replace
72	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  finalText,  size);  [CE]  cannot  find  symbol  finalText  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  finalText,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  finalText,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    iPluralText,    size);    	non-compiled	[CE]  cannot  find  symbol  finalText	77	None	replace
73	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  null,  size);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  null,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  null,  size);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    null);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	57	None	replace
74	[BUG]  [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	81	None	replace
75	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	81	None	replace
76	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser));	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	39	None	replace
77	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notParser));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notParser));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notParser));	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	39	None	replace
78	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter));	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	39	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  -  size,  notPrinter);  [CE]  cannot  find  symbol  Preconditions  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  -  size,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  2  -  size,  notPrinter);	  Preconditions.checkState(elementPairs.size()    ==    2    -    size);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	34	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  -  notPrinter);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  -  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  2  -  notPrinter);	  Preconditions.checkState(elementPairs.size()    ==    2    -    size);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	34	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  -  size  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  -  size  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  2  -  size  +  1);	  Preconditions.checkState(elementPairs.size()    ==    2    -    size);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	34	None	replace
82	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);	  Object[]    sep    =    createFormatter(elementPairs.subList(1,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	67	None	replace
83	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	40	None	replace
84	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter),  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter),  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter),  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	40	None	replace
85	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs.getPrinter(),  f.getParser(),  f.getSeparator());	  sep    =    f.finish(separator.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
86	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());	  sep    =    f.finish(separator.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs[0].getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  array  required,  but  List<Object>  found  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs[0].getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs[0].getPrinter(),  f.getParser(),  f.getSeparator());	  sep    =    f.finish(separator.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  array  required,  but  List<Object>  found	8	None	replace
88	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);	  Object[]    sep    =    createFormatter(elementPairs.subList(0,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	42	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  >  1);  [CE]  cannot  find  symbol  Preconditions  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  >  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  >  1);	  Preconditions.checkState(elementPairs.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	33	None	replace
90	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  notSeparator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  notSeparator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  notSeparator);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    sep);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	87	None	replace
91	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  -  2);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  -  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size  -  2);	  Object[]    sep    =    elementPairs.subList(2,    size    -    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	92	None	replace
92	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  -  1,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  -  1,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size  -  1,  notPrinter);	  Object[]    sep    =    elementPairs.subList(2,    size    -    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	92	None	replace
93	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size  -  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size  -  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(1,  size  -  1);	  Object[]    sep    =    elementPairs.subList(2,    size    -    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	92	None	replace
94	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  -  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  -  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  -  1);	  Object[]    sep    =    elementPairs.subList(2,    size    -    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	92	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(notPrinter,  notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(notPrinter,  notParser);	  Preconditions.checkState(notPrinter,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	90	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs,  notPrinter);  [CE]  cannot  find  symbol  Preconditions  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs,  notPrinter);	  Preconditions.checkState(notPrinter,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	90	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  >  2,  sep);  [CE]  cannot  find  symbol  Preconditions  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  >  2,  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  >  2,  sep);	  Preconditions.checkState(notPrinter,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	90	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(size,  sep);  [CE]  cannot  find  symbol  Preconditions  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(size,  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(size,  sep);	  Preconditions.checkState(notPrinter,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	90	None	replace
99	[BUG]  [BUGGY]  sep  =  f.finish(sep.getPrinter(),  sep.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(sep.getPrinter(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep.getPrinter(),  sep.getSeparator());	  sep    =    f.finish(sep.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
100	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size    +    1));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	20	None	replace
101	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter  +  1));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter  +  1));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter  +  1));	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size    +    1));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	20	None	replace
102	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size  +  1));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size  +  1));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size  +  1));	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size    +    1));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	20	None	replace
103	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  size,  notParser);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  size,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  size,  notParser);	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkNotNull(elementPairs,  notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkNotNull(elementPairs,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkNotNull(elementPairs,  notParser);	  Preconditions.checkNotNull(elementPairs,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	72	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkNotNull(elementPairs,  notPrinter,  notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkNotNull(elementPairs,  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkNotNull(elementPairs,  notPrinter,  notParser);	  Preconditions.checkNotNull(elementPairs,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	72	None	replace
106	[BUG]  [BUGGY]  Sep  =  f.finish(sep.getPrinter(),  sep.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  f.finish(sep.getPrinter(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  f.finish(sep.getPrinter(),  sep.getSeparator());	  Sep    =    sep.finish(f.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	59	None	replace
107	[BUG]  [BUGGY]  Sep  =  parser.finish(f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  parser.finish(f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  parser.finish(f.getPrinter(),  f.getSeparator());	  Sep    =    sep.finish(f.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	59	None	replace
108	[BUG]  [BUGGY]  Formatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Formatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Formatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
109	[BUG]  [BUGGY]  Pentru(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Pentru(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Pentru(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
110	[BUG]  [BUGGY]  Formatter  f  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Formatter  f  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Formatter  f  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser);	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
111	[BUG]  [BUGGY]  Formatter  f  =  toFormatter(elementPairs.subList(2,  size));  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Formatter  f  =  toFormatter(elementPairs.subList(2,  size));  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Formatter  f  =  toFormatter(elementPairs.subList(2,  size));	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
112	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notParser);  [CE]  ')'  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  ')'  expected	22	None	replace
113	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter);  [CE]  ')'  expected  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  ')'  expected	22	None	replace
114	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter,  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter,  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter,  notParser,  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size    +    1),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	75	None	replace
115	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  1),  notPrinter,  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size    +    1),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	75	None	replace
116	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notParser,  notPrinter);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	44	None	replace
117	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  +  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  +  1);	  Object[]    sep    =    elementPairs.subList(2,    size    +    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	52	None	replace
118	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  +  1,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  +  1,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size  +  1,  notPrinter);	  Object[]    sep    =    elementPairs.subList(2,    size    +    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	52	None	replace
119	[BUG]  [BUGGY]  sep  =  f.finish(sep,  f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(sep,  f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep,  f.getPrinter(),  f.getSeparator());	  sep    =    sep.finish(f,    f.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
120	[BUG]  [BUGGY]  sep  =  f.finish(separator,  f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  separator  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(separator,  f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(separator,  f.getPrinter(),  f.getSeparator());	  sep    =    sep.finish(f,    f.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  separator	83	None	replace
121	[BUG]  [BUGGY]  Sep  =  f.finish(sep,  f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  f.finish(sep,  f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  f.finish(sep,  f.getPrinter(),  f.getSeparator());	  sep    =    sep.finish(f,    f.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	83	None	replace
122	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser());	  sep    =    sip.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
123	[BUG]  [BUGGY]  sep  =  f.finish(separator.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  separator  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(separator.getPrinter(),  f.getParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(separator.getPrinter(),  f.getParser());	  sep    =    sip.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  cannot  find  symbol  separator	84	None	replace
124	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs.getPrinter(),  f.getParser());	  sep    =    sip.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
125	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	47	None	replace
126	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notSeparator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notSeparator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notSeparator);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	47	None	replace
127	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  size);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  size);	  Object[]    sep    =    toFormatter(elementPairs,    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	5	None	replace
128	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  null);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  null);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  null);	  Object[]    sep    =    toFormatter(elementPairs,    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	5	None	replace
129	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(sep,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(sep,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(sep,  notParser);	  Object[]    sep    =    createSeparator(sep,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	60	None	replace
130	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(sep,  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(sep,  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(sep,  notPrinter,  notParser);	  Object[]    sep    =    createSeparator(sep,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	60	None	replace
131	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(element,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(element,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(element,  notPrinter);	  Object[]    sep    =    createSeparator(sep,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	60	None	replace
132	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  type,  size);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  type,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  type,  size);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    type);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	13	None	replace
133	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  type,  beforeParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  type,  beforeParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  type,  beforeParser);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    type);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	13	None	replace
134	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(sep.separator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(sep.separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(sep.separator);	  Object[]    sep    =    createSeparator(sep);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	45	None	replace
135	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size  +  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size  +  1);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
136	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  separator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  separator);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
137	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  f);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  f);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  f);	  Object    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	62	None	replace
138	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser);	  Object    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	62	None	replace
139	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notPrinter);	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	41	None	replace
140	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  +  2);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  +  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter  +  2);	  Object[]    sep    =    elementPairs.subList(2,    size    +    2);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	91	None	replace
141	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notParser  +  2);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notParser  +  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  notParser  +  2);	  Object[]    sep    =    elementPairs.subList(2,    size    +    2);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	91	None	replace
142	[BUG]  [BUGGY]  parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	  if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	64	None	replace
143	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }	  if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	64	None	replace
144	[BUG]  [BUGGY]  parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }	  if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	64	None	replace
145	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( " ");  }	  if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	64	None	replace
146	[BUG]  [BUGGY]  parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
147	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
148	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
149	[BUG]  [BUGGY]  parent  ==  null  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
150	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size,  notPrinter));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size,  notPrinter));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(2,  size,  notPrinter));	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	32	None	replace
151	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size  +  1));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size  +  1));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(2,  size  +  1));	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	32	None	replace
152	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter);	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	32	None	replace
153	[BUG]  [BUGGY]  sep  =  sep.finish(sep.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(sep.getPrinter(),  f.getParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(sep.getPrinter(),  f.getParser());	  sep    =    f.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
154	[BUG]  [BUGGY]  sep  =  f.finish(sep,  f.getPrinter(),  sep.getParser());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(sep,  f.getPrinter(),  sep.getParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(sep,  f.getPrinter(),  sep.getParser());	  sep    =    f.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(notParser);	  Preconditions.checkState(notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	89	None	replace
156	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notParser);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	31	None	replace
157	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notParser,  notPrinter);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	31	None	replace
158	[BUG]  [BUGGY]  parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }	  if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	25	None	replace
159	[BUG]  [BUGGY]  try  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  try  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	try  ==  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	  if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
160	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(sep,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(sep,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(sep,  notPrinter);	  Object[]    sep    =    createFormatter(sep);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	68	None	replace
161	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  notPrinter,  notParser);	  Object[]    sep    =    elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	50	None	replace
162	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(0,  size,  notPrinter);	  Object[]    sep    =    elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	50	None	replace
163	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  notParser);	  Object[]    sep    =    elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	50	None	replace
164	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size,  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size,  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(1,  size,  notPrinter,  notParser);	  Object[]    sep    =    elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	50	None	replace
165	[BUG]  [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(elementPairs.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(elementPairs.getPrinter(),  f.getSeparator());	  sep    =    f.finish(separator.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(notPrinter!=  notParser);  [CE]  cannot  find  symbol  Preconditions  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(notPrinter!=  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(notPrinter!=  notParser);	  Preconditions.checkNotNull(notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	19	None	replace
167	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter,  notParser,  notParser);  [CE]  ')'  expected  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(0,  size,  notPrinter,  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  ')'  expected	93	None	replace
168	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter,  notParser,  notParser);  [CE]  ')'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter,  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  ')'  expected	93	None	replace
169	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size,  notPrinter,  notParser,  notParser);  [CE]  ')'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size,  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(3,  size,  notPrinter,  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  ')'  expected	93	None	replace
170	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  size,  notParser);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  size,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  size,  notParser);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    notPrinter,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	28	None	replace
171	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  notParser,  size);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  notParser,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  notParser,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    notPrinter,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	28	None	replace
172	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  notPrinter,  size);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  notPrinter,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  notPrinter,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    notPrinter,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	28	None	replace
173	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(0,  size),  notPrinter,  notParser,  notParser);	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	66	None	replace
174	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter);	  Object    sep    =    toFormatter(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	65	None	replace
175	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter));  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter));	  Object    sep    =    toFormatter(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	65	None	replace
176	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size));  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(1,  size));	  Object    sep    =    toFormatter(elementPairs.subList(2,    size));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	65	None	replace
177	[BUG]  [BUGGY]  Pentru(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Pentru(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Pentru(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparators())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
178	[BUG]  [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	79	None	replace
179	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	79	None	replace
180	[BUG]  [BUGGY]  Sep  =  sep.finish(sep.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  sep.finish(sep.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  sep.finish(sep.getPrinter(),  f.getSeparator());	  Sep    =    f.finish(sep.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	16	None	replace
181	[BUG]  [BUGGY]  Sep  =  f.finish(elementPairs.getPrinter(),  sep.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  f.finish(elementPairs.getPrinter(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  f.finish(elementPairs.getPrinter(),  sep.getSeparator());	  Sep    =    f.finish(sep.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	16	None	replace
182	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter,  size);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  notPrinter,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    iBeforeParser,    size);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
183	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  f);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  f);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  f);	  Object    sep    =    toFormatter(elementPairs.subList(1,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	63	None	replace
184	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser);	  Object    sep    =    toFormatter(elementPairs.subList(1,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	63	None	replace
185	[BUG]  [BUGGY]  Pentru(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Pentru(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Pentru(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }	          if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
186	[BUG]  [BUGGY]  parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	81	None	replace
187	[BUG]  [BUGGY]  Pentru(PeriodParser  f  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  f);  }  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Pentru(PeriodParser  f  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  f);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Pentru(PeriodParser  f  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  f);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
188	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iFinalText,  size,  notPrinter);  [CE]  cannot  find  symbol  iFinalText  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iFinalText,  size,  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iFinalText,  size,  notPrinter);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  iFinalText	27	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()!=  2  -  size);  [CE]  cannot  find  symbol  Preconditions  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()!=  2  -  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()!=  2  -  size);	  Preconditions.checkState(elementPairs.size()!=    2);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	86	None	replace
190	[BUG]  [BUGGY]  parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( " ");  }	  if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	25	None	replace
191	[BUG]  [BUGGY]  Integer  size  =  elementPairs.size();  [CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Integer  size  =  elementPairs.size();  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Integer  size  =  elementPairs.size();	  int    size    =    elementPairs.size()    +    1;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	38	None	replace
192	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  f.getSeparator());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  f.getSeparator());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
193	[BUG]  [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  sep.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  sep.getSeparator());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
194	[BUG]  [BUGGY]  parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
195	[BUG]  [BUGGY]  int  size  =  elementPairs.indexOf(sep)-  2;  [CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  int  size  =  elementPairs.indexOf(sep)-  2;  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	int  size  =  elementPairs.indexOf(sep)-  2;	  int    size    =    elementPairs.size()    -    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	36	None	replace
196	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size,  -1);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size,  -1);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size,  -1);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    -1,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	78	None	replace
197	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  -1,  notPrinter,  size);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  -1,  notPrinter,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  -1,  notPrinter,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    -1,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	78	None	replace
198	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  size);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  null,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    iPluralText,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	77	None	replace
199	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size  +  1),  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size  +  1),  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size  +  1),  notPrinter,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size    +    1),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	75	None	replace
200	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size),  notParser,  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	40	None	replace
201	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  beforeParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  beforeParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  beforeParser);	  Object[]    sep    =    toFormatter(elementPairs,    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	5	None	replace
202	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size  -  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size  -  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size  -  1);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
203	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getSeparator());	  sep    =    f.finish(separator.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
204	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  -  1  +  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size  -  1  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size  -  1  +  1);	  Object[]    sep    =    elementPairs.subList(2,    size    -    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	92	None	replace
205	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  before);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  before);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  before);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	73	None	replace
206	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  sep  +  2);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  sep  +  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  sep  +  2);	  Object[]    sep    =    elementPairs.subList(2,    size    +    2);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	91	None	replace
207	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size  +  2);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(1,  size  +  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(1,  size  +  2);	  Object[]    sep    =    elementPairs.subList(2,    size    +    2);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	91	None	replace
208	[BUG]  [BUGGY]  For(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  For(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	For(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }	          if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep);    }    	non-compiled	[CE]  ')'  expected	43	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkNotNull(elementPairs,  size);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkNotNull(elementPairs,  size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkNotNull(elementPairs,  size);	  Preconditions.checkNotNull(elementPairs,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	18	None	replace
210	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  sep  +  1);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(2,  size,  sep  +  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(2,  size,  sep  +  1);	  Object[]    sep    =    elementPairs.subList(2,    size    +    1);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	52	None	replace
211	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(3,  size),  notPrinter,  notParser,  notParser);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	71	None	replace
212	[BUG]  [BUGGY]  parent!=  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent!=  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent!=  null)  {  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	79	None	replace
213	[BUG]  [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	79	None	replace
214	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(3,  size,  notPrinter,  notParser);  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(3,  size,  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(3,  size,  notPrinter,  notParser);	          Object    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser);    	non-compiled	[CE]  ')'  expected	69	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs,  sep);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs,  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs,  sep);	  Preconditions.checkState(notPrinter,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	90	None	replace
216	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  f.getBeforeParser());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  f.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  f.getBeforeParser());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
217	[BUG]  [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  iBeforeParser);  [CE]  cannot  find  symbol  iBeforeParser  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  iBeforeParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f.getPrinter(),  f.getParser(),  sep,  iBeforeParser);	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol  iBeforeParser	55	None	replace
218	[BUG]  [BUGGY]  Sep  =  sep.finish(f,  f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  sep.finish(f,  f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  sep.finish(f,  f.getPrinter(),  f.getSeparator());	  sep    =    sep.finish(f,    f.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	83	None	replace
219	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  2));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  2));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size  +  2));	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size    +    1));    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	20	None	replace
220	[BUG]  [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  size,  notPrinter);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  size,  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  size,  notPrinter);	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
221	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter);  [CE]  ')'  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(1,  size,  notPrinter);	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  ')'  expected	22	None	replace
222	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(sep.separator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(sep.separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(sep.separator);	  Object[]    sep    =    createFormatter(sep);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	68	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs!=  null);  [CE]  cannot  find  symbol  Preconditions  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs!=  null);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs!=  null);	  Preconditions.checkNotNull(elementPairs);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	17	None	replace
224	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	add	if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }	  if(f!=    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  NullPointerException  	26	5	replace
225	[BUG]  [BUGGY]  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	if(notPrinter  &&  notParser)  {  throw  new  IllegalStateException( " ");  }	  if(f!=    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  NullPointerException  	26	5	replace
226	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iAfterParser,  size);  [CE]  cannot  find  symbol  iAfterParser  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iAfterParser,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iAfterParser,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    iBeforeParser,    size);    	non-compiled	[CE]  cannot  find  symbol  iAfterParser	76	None	replace
227	[BUG]  [BUGGY]  parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent!=  null)  {  if(notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	82	None	replace
228	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  notParser);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  notParser);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    notPrinter,    size);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	28	None	replace
229	[BUG]  [BUGGY]  Pentru(PeriodParser  f  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  f);  }  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Pentru(PeriodParser  f  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  f);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Pentru(PeriodParser  f  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  f);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparators())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  ')'  expected	24	None	replace
230	[BUG]  [BUGGY]  Sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [CE]  cannot  find  symbol  Sep  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  sep.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol  Sep	54	None	replace
231	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser,  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser,  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser,  notPrinter);	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	41	None	replace
232	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notSeparator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notSeparator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notSeparator);	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	41	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  >  2);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  >  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  >  2);	  Preconditions.checkNotNull(elementPairs,    sep);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	18	None	replace
234	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  [Delete]  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	[Delete]	  if(f!=    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
235	[BUG]  [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  sep.getBeforeParser());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  sep.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  f.finish(f,  f.getPrinter(),  f.getParser(),  sep.getBeforeParser());	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    sep.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkArgument(elementPairs.size()  ==  2);  [CE]  cannot  find  symbol  Preconditions  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkArgument(elementPairs.size()  ==  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkArgument(elementPairs.size()  ==  2);	  Preconditions.checkNotNull(elementPairs);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	17	None	replace
237	[BUG]  [BUGGY]  Sep  =  parser.finish(f.getPrinter(),  sep.getSeparator());  [CE]  cannot  find  symbol  Sep  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Sep  =  parser.finish(f.getPrinter(),  sep.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Sep  =  parser.finish(f.getPrinter(),  sep.getSeparator());	  Sep    =    f.finish(sep.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol  Sep	16	None	replace
238	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  notParser);  [CE]  ')'  expected  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  notParser);	  Object[]    sep    =    createFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  ')'  expected	66	None	replace
239	[BUG]  [BUGGY]  sep  =  separator.finish(f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  separator.finish(f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  separator.finish(f.getPrinter(),  f.getSeparator());	  sep    =    f.finish(sep.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
240	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(sep.getParser(),  sep.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(sep.getParser(),  sep.getParser());  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(sep.getParser(),  sep.getParser());	  Object[]    sep    =    createSeparator(sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	85	None	replace
241	[BUG]  [BUGGY]  sep  =  parser.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter);  [CE]  cannot  find  symbol  parser  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  parser.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  parser.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter);	  sep    =    f.finish(f.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  parser	30	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  &&  sep);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  2  &&  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  2  &&  sep);	  Preconditions.checkState(elementPairs.size()    ==    2    &&    notPrinter);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	35	None	replace
243	[BUG]  [BUGGY]  sep  =  separator.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter);  [CE]  cannot  find  symbol  separator  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  separator.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  separator.finish(f.getPrinter(),  f.getParser(),  size,  notPrinter);	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    size,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  separator	29	None	replace
244	[BUG]  [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  &&  notPrinter  ||  notParser  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  &&  notPrinter  ||  notParser  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	79	None	replace
245	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.size);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.size);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.size);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	4	None	replace
246	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.type);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.type);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.type);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	4	None	replace
247	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  sep);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  size,  sep);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
248	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
249	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  separator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  separator);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	12	None	replace
250	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.before);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.before);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.before);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	12	None	replace
251	[BUG]  [BUGGY]  sep  =  parser.finish(f.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  parser  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  parser.finish(f.getPrinter(),  f.getParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  parser.finish(f.getPrinter(),  f.getParser());	  sep    =    sip.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  cannot  find  symbol  parser	84	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(notPrinter,  elementPairs);  [CE]  cannot  find  symbol  Preconditions  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(notPrinter,  elementPairs);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(notPrinter,  elementPairs);	  Preconditions.checkNotNull(elementPairs,    notPrinter);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	72	None	replace
253	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size,  f,  notPrinter,  notParser);  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size,  f,  notPrinter,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(2,  size,  f,  notPrinter,  notParser);	          Object    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser);    	non-compiled	[CE]  ')'  expected	69	None	replace
254	[BUG]  [BUGGY]  int  size  =  elementsPairs.size();  [CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  int  size  =  elementsPairs.size();  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	int  size  =  elementsPairs.size();	  int    size    =    elementPairs.size()    -    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	36	None	replace
255	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.separator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.separator);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    sep);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	87	None	replace
256	[BUG]  [BUGGY]  sep  =  sip.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sip.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sip.finish(f.getPrinter(),  f.getParser(),  f.getBeforeParser());	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
257	[BUG]  [BUGGY]  sep  =  parser.finish(f,  f.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  parser.finish(f,  f.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  parser.finish(f,  f.getPrinter(),  f.getParser(),  f.getSeparator());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
258	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(1,  size),  notPrinter,  notParser,  notParser);	  Object    sep    =    toFormatter(elementPairs.subList(1,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	63	None	replace
259	[BUG]  [BUGGY]  sep  =  separator.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  separator.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  separator.finish(f.getPrinter(),  f.getParser(),  f.getSeparator());	  sep    =    f.finish(sep.getPrinter(),    f.getParser(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
260	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  sep);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs,  notPrinter,  notParser,  sep);	  Object[]    sep    =    toFormatter(elementPairs,    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	5	None	replace
261	[BUG]  [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  notParser));  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  notParser));  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  toFormatter(elementPairs.subList(2,  size,  notPrinter,  notParser,  notParser));	  Object[]    sep    =    toFormatter(elementPairs.subList(2,    size,    notPrinter,    notParser,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	93	None	replace
262	[BUG]  [BUGGY]  >>  [Delete]  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  >>  [Delete]  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	>>  [Delete]	  if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
263	[BUG]  [BUGGY]  ==  [Delete]  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  ==  [Delete]  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	==  [Delete]	  if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
264	[BUG]  [BUGGY]  >=  [Delete]  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  >=  [Delete]  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	>=  [Delete]	  if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
265	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(sep.getPrinter(),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(sep.getPrinter(),  notPrinter);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(sep.getPrinter(),  notPrinter);	  Object[]    sep    =    createSeparator(sep,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	60	None	replace
266	[BUG]  [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size  -  2);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elementPairs.subList(0,  size  -  2);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elementPairs.subList(0,  size  -  2);	  Object[]    sep    =    elementPairs.subList(0,    size);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	51	None	replace
267	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.cloneTree());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.cloneTree());  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.cloneTree());	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    sep);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	74	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()!=  2  &&  elementPairs.get(0)  instanceof  Separator);  [CE]  cannot  find  symbol  Preconditions  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()!=  2  &&  elementPairs.get(0)  instanceof  Separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()!=  2  &&  elementPairs.get(0)  instanceof  Separator);	  Preconditions.checkState(elementPairs.size()!=    2);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	86	None	replace
269	[BUG]  [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.type);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.type);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createSeparator(elementPairs,  notPrinter,  notParser,  sep.type);	  Object[]    sep    =    createSeparator(elementPairs,    notPrinter,    notParser,    type);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	13	None	replace
270	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.before);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.before);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.before);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	73	None	replace
271	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  separator);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  separator);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  separator);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    beforeParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	73	None	replace
272	[BUG]  [BUGGY]  try  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  try  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	try  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparators())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
273	[BUG]  [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparators())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
274	[BUG]  [BUGGY]  parentFormatter  ==  null  ||  f.getSeparators()!=  null)  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parentFormatter  ==  null  ||  f.getSeparators()!=  null)  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parentFormatter  ==  null  ||  f.getSeparators()!=  null)  {  for(PeriodParser  sep  :  f.getSeparators())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparators())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  3);  [CE]  cannot  find  symbol  Preconditions  [FE]              IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()  ==  3);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()  ==  3);	  Preconditions.checkState(elementPairs.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	33	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(elementPairs.size()!=  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Preconditions.checkState(elementPairs.size()!=  1);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Preconditions.checkState(elementPairs.size()!=  1);	  Preconditions.checkState(elementPairs.size()    ==    1);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	33	None	replace
277	[BUG]  [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  ||  notPrinter  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }	          if(f    ==    null)    {    if(notPrinter    &&    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	81	None	replace
278	[BUG]  [BUGGY]  sep  =  separator.finish(f,  f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  separator.finish(f,  f.getPrinter(),  f.getSeparator());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  separator.finish(f,  f.getPrinter(),  f.getSeparator());	  sep    =    sep.finish(f,    f.getPrinter(),    f.getSeparator());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
279	[BUG]  [BUGGY]  Object[]  sep  =  elements.subList(2,  size,  notPrinter,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  elements.subList(2,  size,  notPrinter,  notParser);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  elements.subList(2,  size,  notPrinter,  notParser);	  Object[]    sep    =    elementPairs.subList(2,    size,    notPrinter);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	50	None	replace
280	[BUG]  [BUGGY]  try  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  try  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	try  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	23	None	replace
281	[BUG]  [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  not  a  statement	23	None	replace
282	[BUG]  [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  parentFormatter.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  parentFormatter.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parentFormatter  ==  null)  {  for(PeriodParser  sep  :  parentFormatter.getSeparator())  {  return  new  PeriodFormatter(sep,  sep);  }	  if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep,    sep);    }    	non-compiled	[CE]  not  a  statement	23	None	replace
283	[BUG]  [BUGGY]  sep  =  parser.finish(f,  f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  parser.finish(f,  f.getPrinter(),  f.getParser(),  f.getBeforeParser());  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  parser.finish(f,  f.getPrinter(),  f.getParser(),  f.getBeforeParser());	  sep    =    parser.finish(f.getPrinter(),    f.getParser(),    f.getBeforeParser());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
284	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  null,  sep);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  null,  sep);  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  null,  sep);	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    null);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	88	None	replace
285	[BUG]  [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);      [BUGGY]  Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.getParser());  [BUGGY]      PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());  return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	Object[]  sep  =  createFormatter(elementPairs,  notPrinter,  notParser,  sep.getParser());	  Object[]    sep    =    createFormatter(elementPairs,    notPrinter,    notParser,    null);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	88	None	replace
286	[BUG]  [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	Object  sep  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser);	  Object    sep    =    toFormatter(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	62	None	replace
287	[BUG]  [BUGGY]  parent  ==  null  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null  ||  notParser)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	82	None	replace
288	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parent  ==  null)  {  throw  new  IllegalStateException( "Builder  has  created  neither  a  printer  nor  a  parser.   ");  }	          if(f    ==    null)    {    if(notPrinter    ||    notParser)    {    throw    new    IllegalStateException(   "Builder    has    created    neither    a    printer    nor    a    parser.   ");    }    	non-compiled	[CE]  not  a  statement	82	None	replace
289	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iFinalText,  notPrinter,  size);  [CE]  cannot  find  symbol  iFinalText  [FE]                IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iFinalText,  notPrinter,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  iFinalText,  notPrinter,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    notPrinter,    size);    	non-compiled	[CE]  cannot  find  symbol  iFinalText	28	None	replace
290	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  iBeforeParser,  size);  [CE]  cannot  find  symbol  iBeforeParser  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  iBeforeParser,  size);  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter,  iBeforeParser,  size);	  sep    =    sep.finish(f.getPrinter(),    f.getParser(),    notPrinter,    size);    	non-compiled	[CE]  cannot  find  symbol  iBeforeParser	28	None	replace
291	[BUG]  [BUGGY]  try  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]        NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  try  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	try  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }	          if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
292	[BUG]  [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(     "Builder  has  created  neither  a  printer  nor  a  parser     ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);      [BUGGY]  parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }  [BUGGY]      return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	parentFormatter  ==  null)  {  for(PeriodParser  sep  :  f.getSeparator())  {  return  new  PeriodFormatter(sep);  }	          if(f    ==    null)    {    for(PeriodParser    sep    :    f.getSeparator())    {    return    new    PeriodFormatter(sep);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
