bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (formatter == null) { [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { [BUGGY] if (formatter == null) { [BUGGY] throw new IllegalArgumentException("No formatter supplied"); } clearPrefix(); append0(formatter.getPrinter(), formatter.getParser()); return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	192	192	1	replace	
2	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { [BUGGY] [BUGGY] if (formatter == null) { throw new IllegalArgumentException("No formatter supplied"); } clearPrefix(); append0(formatter.getPrinter(), formatter.getParser()); return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	192	192	1	add	
3	[BUG] [BUGGY] clearPrefix(); [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { if (formatter == null) { throw new IllegalArgumentException("No formatter supplied"); } [BUGGY] clearPrefix(); [BUGGY] append0(formatter.getPrinter(), formatter.getParser()); return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	195	195	1	replace	
4	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { if (formatter == null) { throw new IllegalArgumentException("No formatter supplied"); } [BUGGY] [BUGGY] clearPrefix(); append0(formatter.getPrinter(), formatter.getParser()); return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	195	195	1	add	
5	[BUG] [BUGGY] append0(formatter.getPrinter(), formatter.getParser()); [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { if (formatter == null) { throw new IllegalArgumentException("No formatter supplied"); } clearPrefix(); [BUGGY] append0(formatter.getPrinter(), formatter.getParser()); [BUGGY] return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	196	196	1	replace	
6	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { if (formatter == null) { throw new IllegalArgumentException("No formatter supplied"); } clearPrefix(); [BUGGY] [BUGGY] append0(formatter.getPrinter(), formatter.getParser()); return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	196	196	1	add	
7	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { if (formatter == null) { throw new IllegalArgumentException("No formatter supplied"); } clearPrefix(); append0(formatter.getPrinter(), formatter.getParser()); [BUGGY] return this; [BUGGY] } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	197	197	1	replace	
8	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder append(PeriodFormatter formatter) { if (formatter == null) { throw new IllegalArgumentException("No formatter supplied"); } clearPrefix(); append0(formatter.getPrinter(), formatter.getParser()); [BUGGY] [BUGGY] return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] append [RETURN_TYPE] PeriodFormatterBuilder  PeriodFormatter formatter [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter formatter PeriodParser beforeParser iAfterParser iBeforeParser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxParsedDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore Literal EMPTY List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	197	197	1	add	
9	[BUG] [BUGGY] appendField(SECONDS_OPTIONAL_MILLIS); [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSecondsWithOptionalMillis() { [BUGGY] appendField(SECONDS_OPTIONAL_MILLIS); [BUGGY] return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSecondsWithOptionalMillis [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	500	500	1	replace	
10	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSecondsWithOptionalMillis() { [BUGGY] [BUGGY] appendField(SECONDS_OPTIONAL_MILLIS); return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSecondsWithOptionalMillis [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	500	500	1	add	
11	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSecondsWithOptionalMillis() { appendField(SECONDS_OPTIONAL_MILLIS); [BUGGY] return this; [BUGGY] } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSecondsWithOptionalMillis [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	501	501	1	replace	
12	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSecondsWithOptionalMillis() { appendField(SECONDS_OPTIONAL_MILLIS); [BUGGY] [BUGGY] return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSecondsWithOptionalMillis [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	501	501	1	add	
13	[BUG] [BUGGY] return appendSeparator(text, text, null, false, true); [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) { [BUGGY] return appendSeparator(text, text, null, false, true); [BUGGY] } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparatorIfFieldsAfter [RETURN_TYPE] PeriodFormatterBuilder  String text [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	652	652	1	replace	
14	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSeparatorIfFieldsAfter(String text) { [BUGGY] [BUGGY] return appendSeparator(text, text, null, false, true); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparatorIfFieldsAfter [RETURN_TYPE] PeriodFormatterBuilder  String text [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	652	652	1	add	
15	[BUG] [BUGGY] return new Object[] {Literal.EMPTY, Literal.EMPTY}; [FE] IllegalArgumentException [CONTEXT] private static Object[] createComposite(List<Object> elementPairs) { switch (elementPairs.size()) { case 0: [BUGGY] return new Object[] {Literal.EMPTY, Literal.EMPTY}; [BUGGY] case 1: return new Object[] {elementPairs.get(0), elementPairs.get(1)}; default: Composite comp = new Composite(elementPairs); return new Object[] {comp, comp}; } } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] createComposite [RETURN_TYPE] Object[]  Object> elementPairs [VARIABLES] PeriodPrinter[] iPrinters Composite comp PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	818	818	1	replace	
16	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private static Object[] createComposite(List<Object> elementPairs) { switch (elementPairs.size()) { case 0: [BUGGY] [BUGGY] return new Object[] {Literal.EMPTY, Literal.EMPTY}; case 1: return new Object[] {elementPairs.get(0), elementPairs.get(1)}; default: Composite comp = new Composite(elementPairs); return new Object[] {comp, comp}; } } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] createComposite [RETURN_TYPE] Object[]  Object> elementPairs [VARIABLES] PeriodPrinter[] iPrinters Composite comp PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.7071067811865475	818	818	1	add	
17	[BUG] [BUGGY] appendField(MINUTES); [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendMinutes() { [BUGGY] appendField(MINUTES); [BUGGY] return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendMinutes [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.5	463	463	1	replace	
18	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendMinutes() { [BUGGY] [BUGGY] appendField(MINUTES); return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendMinutes [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.5	463	463	1	add	
19	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendMinutes() { appendField(MINUTES); [BUGGY] return this; [BUGGY] } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendMinutes [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.5	464	464	1	replace	
20	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendMinutes() { appendField(MINUTES); [BUGGY] [BUGGY] return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendMinutes [RETURN_TYPE] PeriodFormatterBuilder  [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrintedDigits printZeroSetting PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.5	464	464	1	add	
21	[BUG] [BUGGY] return appendSuffix(new SimpleAffix(text)); [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSuffix(String text) { if (text == null) { throw new IllegalArgumentException(); } [BUGGY] return appendSuffix(new SimpleAffix(text)); [BUGGY] } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSuffix [RETURN_TYPE] PeriodFormatterBuilder  String text [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	555	555	1	replace	
22	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSuffix(String text) { if (text == null) { throw new IllegalArgumentException(); } [BUGGY] [BUGGY] return appendSuffix(new SimpleAffix(text)); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSuffix [RETURN_TYPE] PeriodFormatterBuilder  String text [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	555	555	1	add	
23	[BUG] [BUGGY] if (text == null || finalText == null) { [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { [BUGGY] if (text == null || finalText == null) { [BUGGY] throw new IllegalArgumentException(); } clearPrefix();  List<Object> pairs = iElementPairs; if (pairs.size() == 0) { if (useAfter && useBefore == false) { Separator separator = new Separator( [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	730	730	1	replace	
24	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { [BUGGY] [BUGGY] if (text == null || finalText == null) { throw new IllegalArgumentException(); } clearPrefix();  List<Object> pairs = iElementPairs; if (pairs.size() == 0) { if (useAfter && useBefore == false) { Separator separator = new Separator( [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	730	730	1	add	
25	[BUG] [BUGGY] clearPrefix(); [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { if (text == null || finalText == null) { throw new IllegalArgumentException(); } [BUGGY] clearPrefix(); [BUGGY]   List<Object> pairs = iElementPairs; if (pairs.size() == 0) { if (useAfter && useBefore == false) { Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	734	734	1	replace	
26	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { if (text == null || finalText == null) { throw new IllegalArgumentException(); } [BUGGY] [BUGGY] clearPrefix();  List<Object> pairs = iElementPairs; if (pairs.size() == 0) { if (useAfter && useBefore == false) { Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	734	734	1	add	
27	[BUG] [BUGGY] List<Object> pairs = iElementPairs; [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { if (text == null || finalText == null) { throw new IllegalArgumentException(); } clearPrefix();  [BUGGY] List<Object> pairs = iElementPairs; [BUGGY] if (pairs.size() == 0) { if (useAfter && useBefore == false) { Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	737	737	1	replace	
28	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { if (text == null || finalText == null) { throw new IllegalArgumentException(); } clearPrefix();  [BUGGY] [BUGGY] List<Object> pairs = iElementPairs; if (pairs.size() == 0) { if (useAfter && useBefore == false) { Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	737	737	1	add	
29	[BUG] [BUGGY] if (pairs.size() == 0) { [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { if (text == null || finalText == null) { throw new IllegalArgumentException(); } clearPrefix();  List<Object> pairs = iElementPairs; [BUGGY] if (pairs.size() == 0) { [BUGGY] if (useAfter && useBefore == false) { Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }   [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	738	738	1	replace	
30	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] boolean useBefore, boolean useAfter) { if (text == null || finalText == null) { throw new IllegalArgumentException(); } clearPrefix();  List<Object> pairs = iElementPairs; [BUGGY] [BUGGY] if (pairs.size() == 0) { if (useAfter && useBefore == false) { Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }   [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	738	738	1	add	
31	[BUG] [BUGGY] Separator lastSeparator = null; [FE] IllegalArgumentException [CONTEXT] Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  int i; [BUGGY] Separator lastSeparator = null; [BUGGY] for (i=pairs.size(); --i>=0; ) { if (pairs.get(i) instanceof Separator) { lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }   [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	750	750	1	replace	
32	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] Separator separator = new Separator( text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  int i; [BUGGY] [BUGGY] Separator lastSeparator = null; for (i=pairs.size(); --i>=0; ) { if (pairs.get(i) instanceof Separator) { lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }   [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	750	750	1	add	
33	[BUG] [BUGGY] for (i=pairs.size(); --i>=0; ) { [FE] IllegalArgumentException [CONTEXT] text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  int i; Separator lastSeparator = null; [BUGGY] for (i=pairs.size(); --i>=0; ) { [BUGGY] if (pairs.get(i) instanceof Separator) { lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }  if (lastSeparator != null && pairs.size() == 0) { [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	751	751	1	replace	
34	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] text, finalText, variants, Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  int i; Separator lastSeparator = null; [BUGGY] [BUGGY] for (i=pairs.size(); --i>=0; ) { if (pairs.get(i) instanceof Separator) { lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }  if (lastSeparator != null && pairs.size() == 0) { [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	751	751	1	add	
35	[BUG] [BUGGY] if (pairs.get(i) instanceof Separator) { [FE] IllegalArgumentException [CONTEXT] Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  int i; Separator lastSeparator = null; for (i=pairs.size(); --i>=0; ) { [BUGGY] if (pairs.get(i) instanceof Separator) { [BUGGY] lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }  if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	752	752	1	replace	
36	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] Literal.EMPTY, Literal.EMPTY, useBefore, useAfter); append0(separator, separator); } return this; }  int i; Separator lastSeparator = null; for (i=pairs.size(); --i>=0; ) { [BUGGY] [BUGGY] if (pairs.get(i) instanceof Separator) { lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }  if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	752	752	1	add	
38	[BUG] [BUGGY] if (lastSeparator != null && pairs.size() == 0) { [FE] IllegalArgumentException [CONTEXT] for (i=pairs.size(); --i>=0; ) { if (pairs.get(i) instanceof Separator) { lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }  [BUGGY] if (lastSeparator != null && pairs.size() == 0) { [BUGGY] throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	761	761	1	replace	
39	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] for (i=pairs.size(); --i>=0; ) { if (pairs.get(i) instanceof Separator) { lastSeparator = (Separator) pairs.get(i); pairs = pairs.subList(i + 1, pairs.size()); break; } i--;// element pairs }  [BUGGY] [BUGGY] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	761	761	1	add	
40	[BUG] [BUGGY] Object[] comp = createComposite(pairs); [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { [BUGGY] Object[] comp = createComposite(pairs); [BUGGY] pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	764	764	1	replace	
41	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { [BUGGY] [BUGGY] Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	764	764	1	add	
42	[BUG] [BUGGY] pairs.clear(); [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); [BUGGY] pairs.clear(); [BUGGY] Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	765	765	1	replace	
43	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); [BUGGY] [BUGGY] pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	765	765	1	add	
44	[BUG] [BUGGY] Separator separator = new Separator(  text, finalText, variants,   (PeriodPrinter) comp[0], (PeriodParser) comp[1], [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); [BUGGY] Separator separator = new Separator(     text, finalText, variants,          (PeriodPrinter) comp[0], (PeriodParser) comp[1], [BUGGY] text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	766	768	1	replace	
45	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); [BUGGY] [BUGGY] Separator separator = new Separator(     text, finalText, variants,          (PeriodPrinter) comp[0], (PeriodParser) comp[1], text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	766	768	1	add	
46	[BUG] [BUGGY] pairs.add(separator); [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); [BUGGY] pairs.add(separator); [BUGGY] pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	770	770	1	replace	
47	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); [BUGGY] [BUGGY] pairs.add(separator); pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	770	770	1	add	
48	[BUG] [BUGGY] pairs.add(separator); [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); [BUGGY] pairs.add(separator); [BUGGY] } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	771	771	1	replace	
49	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (lastSeparator != null && pairs.size() == 0) { throw new IllegalStateException("Cannot have two adjacent separators"); } else { Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); [BUGGY] [BUGGY] pairs.add(separator); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	771	771	1	add	
50	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT] Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [BUGGY] return this; [BUGGY] } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	774	774	1	replace	
51	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] Object[] comp = createComposite(pairs); pairs.clear(); Separator separator = new Separator( text, finalText, variants, (PeriodPrinter) comp[0], (PeriodParser) comp[1], useBefore, useAfter); pairs.add(separator); pairs.add(separator); } [BUGGY] [BUGGY] return this; } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSeparator [RETURN_TYPE] PeriodFormatterBuilder  String text String finalText String[] variants boolean useBefore boolean useAfter [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator lastSeparator separator Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	774	774	1	add	
52	[BUG] [BUGGY] Separator sep = (Separator) elementPairs.get(0); [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { [BUGGY] Separator sep = (Separator) elementPairs.get(0); [BUGGY] PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); sep = sep.finish(f.getPrinter(), f.getParser()); return new PeriodFormatter(sep, sep); } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	800	800	1	replace	
53	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { [BUGGY] [BUGGY] Separator sep = (Separator) elementPairs.get(0); PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); sep = sep.finish(f.getPrinter(), f.getParser()); return new PeriodFormatter(sep, sep); } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	800	800	1	add	
54	[BUG] [BUGGY] PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { Separator sep = (Separator) elementPairs.get(0); [BUGGY] PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); [BUGGY] sep = sep.finish(f.getPrinter(), f.getParser()); return new PeriodFormatter(sep, sep); } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]); [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	replace	
55	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { Separator sep = (Separator) elementPairs.get(0); [BUGGY] [BUGGY] PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); sep = sep.finish(f.getPrinter(), f.getParser()); return new PeriodFormatter(sep, sep); } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]); [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	801	801	1	add	
56	[BUG] [BUGGY] sep = sep.finish(f.getPrinter(), f.getParser()); [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { Separator sep = (Separator) elementPairs.get(0); PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); [BUGGY] sep = sep.finish(f.getPrinter(), f.getParser()); [BUGGY] return new PeriodFormatter(sep, sep); } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	replace	
57	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { Separator sep = (Separator) elementPairs.get(0); PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); [BUGGY] [BUGGY] sep = sep.finish(f.getPrinter(), f.getParser()); return new PeriodFormatter(sep, sep); } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	802	802	1	add	
58	[BUG] [BUGGY] return new PeriodFormatter(sep, sep); [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { Separator sep = (Separator) elementPairs.get(0); PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); sep = sep.finish(f.getPrinter(), f.getParser()); [BUGGY] return new PeriodFormatter(sep, sep); [BUGGY] } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]); } } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	
59	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) { if (notPrinter && notParser) { throw new IllegalStateException("Builder has created neither a printer nor a parser"); } int size = elementPairs.size(); if (size >= 2 && elementPairs.get(0) instanceof Separator) { Separator sep = (Separator) elementPairs.get(0); PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser); sep = sep.finish(f.getPrinter(), f.getParser()); [BUGGY] [BUGGY] return new PeriodFormatter(sep, sep); } Object[] comp = createComposite(elementPairs); if (notPrinter) { return new PeriodFormatter(null, (PeriodParser) comp[1]); } else if (notParser) { return new PeriodFormatter((PeriodPrinter) comp[0], null); } else { return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]); } } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] toFormatter [RETURN_TYPE] PeriodFormatter  Object> elementPairs boolean notPrinter boolean notParser [VARIABLES] PeriodPrinter[] iPrinters PeriodFormatter f PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting size type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore notParser notPrinter rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs pairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix Separator sep Object[] comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	add	
60	[BUG] [BUGGY] if (text == null) { [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSuffix(String text) { [BUGGY] if (text == null) { [BUGGY] throw new IllegalArgumentException(); } return appendSuffix(new SimpleAffix(text)); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSuffix [RETURN_TYPE] PeriodFormatterBuilder  String text [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	
61	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public PeriodFormatterBuilder appendSuffix(String text) { [BUGGY] [BUGGY] if (text == null) { throw new IllegalArgumentException(); } return appendSuffix(new SimpleAffix(text)); } [CLASS] PeriodFormatterBuilder SimpleAffix PluralAffix CompositeAffix FieldFormatter Literal Separator Composite [METHOD] appendSuffix [RETURN_TYPE] PeriodFormatterBuilder  String text [VARIABLES] PeriodPrinter[] iPrinters PeriodParser beforeParser iAfterParser iBeforeParser parser PeriodParser[] iParsers String finalText iFinalText iPluralText iSingularText iText pluralText singularText text String[] iParsedForms variants int DAYS HOURS MAX_FIELD MILLIS MINUTES MONTHS PRINT_ZERO_ALWAYS PRINT_ZERO_IF_SUPPORTED PRINT_ZERO_NEVER PRINT_ZERO_RARELY_FIRST PRINT_ZERO_RARELY_LAST SECONDS SECONDS_MILLIS SECONDS_OPTIONAL_MILLIS WEEKS YEARS fieldType i iFieldType iMaxParsedDigits iMinPrintedDigits iPrintZeroSetting maxDigits maxParsedDigits minDigits minPrinted minPrintedDigits printZeroSetting type PeriodPrinter beforePrinter iAfterPrinter iBeforePrinter printer boolean iNotParser iNotPrinter iRejectSignedValues iUseAfter iUseBefore rejectSignedValues useAfter useBefore v Literal EMPTY literal List elementPairs iElementPairs parserList printerList FieldFormatter[] fieldFormatters iFieldFormatters PeriodFieldAffix iLeft iPrefix iRight iSuffix left prefix right suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	
62	[BUG] [BUGGY] originalPrinter = iElementPairs.get(iElementPairs.size() - 2); [FE] IllegalArgumentException [CONTEXT]  private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { final Object originalPrinter; final Object originalParser; if (iElementPairs.size() > 0) { [BUGGY] originalPrinter = iElementPairs.get(iElementPairs.size() - 2); [BUGGY] originalParser = iElementPairs.get(iElementPairs.size() - 1); } else { originalPrinter = null; originalParser = null; } [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	592	592	1	replace	
63	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]  private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { final Object originalPrinter; final Object originalParser; if (iElementPairs.size() > 0) { [BUGGY] [BUGGY] originalPrinter = iElementPairs.get(iElementPairs.size() - 2); originalParser = iElementPairs.get(iElementPairs.size() - 1); } else { originalPrinter = null; originalParser = null; } [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	592	592	1	add	
64	[BUG] [BUGGY] originalParser = iElementPairs.get(iElementPairs.size() - 1); [FE] IllegalArgumentException [CONTEXT] private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { final Object originalPrinter; final Object originalParser; if (iElementPairs.size() > 0) { originalPrinter = iElementPairs.get(iElementPairs.size() - 2); [BUGGY] originalParser = iElementPairs.get(iElementPairs.size() - 1); [BUGGY] } else { originalPrinter = null; originalParser = null; }  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	593	593	1	replace	
65	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { final Object originalPrinter; final Object originalParser; if (iElementPairs.size() > 0) { originalPrinter = iElementPairs.get(iElementPairs.size() - 2); [BUGGY] [BUGGY] originalParser = iElementPairs.get(iElementPairs.size() - 1); } else { originalPrinter = null; originalParser = null; }  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	593	593	1	add	
66	[BUG] [BUGGY] clearPrefix(); [FE] IllegalArgumentException [CONTEXT] originalPrinter != originalParser || !(originalPrinter instanceof FieldFormatter)) { throw new IllegalStateException("No field to apply suffix to"); } [BUGGY] clearPrefix(); [BUGGY] FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField;  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	605	605	1	replace	
67	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] originalPrinter != originalParser || !(originalPrinter instanceof FieldFormatter)) { throw new IllegalStateException("No field to apply suffix to"); } [BUGGY] [BUGGY] clearPrefix(); FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField;  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	605	605	1	add	
68	[BUG] [BUGGY] FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); [FE] IllegalArgumentException [CONTEXT] !(originalPrinter instanceof FieldFormatter)) { throw new IllegalStateException("No field to apply suffix to"); } clearPrefix(); [BUGGY] FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); [BUGGY] iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField; return this; [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	606	606	1	replace	
69	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] !(originalPrinter instanceof FieldFormatter)) { throw new IllegalStateException("No field to apply suffix to"); } clearPrefix(); [BUGGY] [BUGGY] FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField; return this; [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	606	606	1	add	
70	[BUG] [BUGGY] iElementPairs.set(iElementPairs.size() - 2, newField); [FE] IllegalArgumentException [CONTEXT] throw new IllegalStateException("No field to apply suffix to"); } clearPrefix(); FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); [BUGGY] iElementPairs.set(iElementPairs.size() - 2, newField); [BUGGY] iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField; return this; } [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	607	607	1	replace	
71	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] throw new IllegalStateException("No field to apply suffix to"); } clearPrefix(); FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); [BUGGY] [BUGGY] iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField; return this; } [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	607	607	1	add	
72	[BUG] [BUGGY] iElementPairs.set(iElementPairs.size() - 1, newField); [FE] IllegalArgumentException [CONTEXT] } clearPrefix(); FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); [BUGGY] iElementPairs.set(iElementPairs.size() - 1, newField); [BUGGY] iFieldFormatters[newField.getFieldType()] = newField; return this; }  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	608	608	1	replace	
73	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] } clearPrefix(); FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); [BUGGY] [BUGGY] iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField; return this; }  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	608	608	1	add	
74	[BUG] [BUGGY] iFieldFormatters[newField.getFieldType()] = newField; [FE] IllegalArgumentException [CONTEXT] clearPrefix(); FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); [BUGGY] iFieldFormatters[newField.getFieldType()] = newField; [BUGGY]  return this; }   [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	609	609	1	replace	
75	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] clearPrefix(); FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); [BUGGY] [BUGGY] iFieldFormatters[newField.getFieldType()] = newField; return this; }   [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	609	609	1	add	
76	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT] FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField; [BUGGY] return this; [BUGGY] }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	611	611	1	replace	
77	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix); iElementPairs.set(iElementPairs.size() - 2, newField); iElementPairs.set(iElementPairs.size() - 1, newField); iFieldFormatters[newField.getFieldType()] = newField; [BUGGY] [BUGGY] return this; }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	611	611	1	add	
78	[BUG] [BUGGY] if (iElementPairs.size() > 0) { [FE] IllegalArgumentException [CONTEXT]   private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { final Object originalPrinter; final Object originalParser; [BUGGY] if (iElementPairs.size() > 0) { [BUGGY] originalPrinter = iElementPairs.get(iElementPairs.size() - 2); originalParser = iElementPairs.get(iElementPairs.size() - 1); } else { originalPrinter = null; originalParser = null; [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.35355339059327373	591	591	1	replace	
79	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]   private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) { final Object originalPrinter; final Object originalParser; [BUGGY] [BUGGY] if (iElementPairs.size() > 0) { originalPrinter = iElementPairs.get(iElementPairs.size() - 2); originalParser = iElementPairs.get(iElementPairs.size() - 1); } else { originalPrinter = null; originalParser = null; [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.35355339059327373	591	591	1	add	
80	[BUG] [BUGGY] if (originalPrinter == null || originalParser == null || originalPrinter != originalParser ||  !(originalPrinter instanceof FieldFormatter)) { [FE] IllegalArgumentException [CONTEXT] } else { originalPrinter = null; originalParser = null; } [BUGGY] if (originalPrinter == null || originalParser == null ||    originalPrinter != originalParser ||        !(originalPrinter instanceof FieldFormatter)) { [BUGGY] originalPrinter != originalParser || !(originalPrinter instanceof FieldFormatter)) { throw new IllegalStateException("No field to apply suffix to"); }  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.35355339059327373	599	601	1	replace	
81	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] } else { originalPrinter = null; originalParser = null; } [BUGGY] [BUGGY] if (originalPrinter == null || originalParser == null ||    originalPrinter != originalParser ||        !(originalPrinter instanceof FieldFormatter)) { originalPrinter != originalParser || !(originalPrinter instanceof FieldFormatter)) { throw new IllegalStateException("No field to apply suffix to"); }  [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.35355339059327373	599	601	1	add	
82	[BUG] [BUGGY] appendField(DAYS); [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendDays() { [BUGGY] appendField(DAYS); [BUGGY] return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.3333333333333333	437	437	1	replace	
83	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendDays() { [BUGGY] [BUGGY] appendField(DAYS); return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.3333333333333333	437	437	1	add	
84	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendDays() { appendField(DAYS); [BUGGY] return this; [BUGGY] }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.3333333333333333	438	438	1	replace	
85	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendDays() { appendField(DAYS); [BUGGY] [BUGGY] return this; }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.3333333333333333	438	438	1	add	
86	[BUG] [BUGGY] appendField(HOURS); [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendHours() { [BUGGY] appendField(HOURS); [BUGGY] return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.30151134457776363	450	450	1	replace	
87	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendHours() { [BUGGY] [BUGGY] appendField(HOURS); return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.30151134457776363	450	450	1	add	
88	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendHours() { appendField(HOURS); [BUGGY] return this; [BUGGY] }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.30151134457776363	451	451	1	replace	
89	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendHours() { appendField(HOURS); [BUGGY] [BUGGY] return this; }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.30151134457776363	451	451	1	add	
90	[BUG] [BUGGY] appendField(MONTHS); [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendMonths() { [BUGGY] appendField(MONTHS); [BUGGY] return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	411	411	1	replace	
91	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendMonths() { [BUGGY] [BUGGY] appendField(MONTHS); return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	411	411	1	add	
92	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendMonths() { appendField(MONTHS); [BUGGY] return this; [BUGGY] }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	412	412	1	replace	
93	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendMonths() { appendField(MONTHS); [BUGGY] [BUGGY] return this; }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	412	412	1	add	
94	[BUG] [BUGGY] appendField(WEEKS); [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendWeeks() { [BUGGY] appendField(WEEKS); [BUGGY] return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	424	424	1	replace	
95	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendWeeks() { [BUGGY] [BUGGY] appendField(WEEKS); return this; }    [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	424	424	1	add	
96	[BUG] [BUGGY] return this; [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendWeeks() { appendField(WEEKS); [BUGGY] return this; [BUGGY] }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	425	425	1	replace	
97	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]    public PeriodFormatterBuilder appendWeeks() { appendField(WEEKS); [BUGGY] [BUGGY] return this; }     [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2773500981126146	425	425	1	add	
98	[BUG] [BUGGY] if (text == null) { [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendLiteral(String text) { [BUGGY] if (text == null) { [BUGGY] throw new IllegalArgumentException("Literal must not be null"); } clearPrefix(); Literal literal = new Literal(text); append0(literal, literal); [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2672612419124244	228	228	1	replace	
99	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]     public PeriodFormatterBuilder appendLiteral(String text) { [BUGGY] [BUGGY] if (text == null) { throw new IllegalArgumentException("Literal must not be null"); } clearPrefix(); Literal literal = new Literal(text); append0(literal, literal); [CLASS] 	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.2672612419124244	228	228	1	add	
