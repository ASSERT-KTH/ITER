bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  sep  =  sep.finish(f.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	add	        sep    =    sep.finish(f.getPrinter(),    f.getParser());    sep  =  sep.finish(f.getPrinter(),  f.getParser());	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
2	[BUG]  [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  sep  =  sep.finish(f.getPrinter(),  f.getParser());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  sep  =  sep.finish(f.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	        sep    =    sep.finish(f.getPrinter(),    f.getParser());    sep  =  sep.finish(f.getPrinter(),  f.getParser());	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
3	[BUG]  [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  Sep  =  sep.finish(f.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  Sep  [FE]      IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  Sep  =  sep.finish(f.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	        sep    =    sep.finish(f.getPrinter(),    f.getParser());    Sep  =  sep.finish(f.getPrinter(),  f.getParser());	  	non-compiled	[CE]  cannot  find  symbol  Sep	4	None	add
4	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size,  notPrinter));  [CE]  method  subList  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size,  notPrinter));  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size,  notPrinter));	      sep    =    sep.finish(elementPairs.subList(2,    size));    	non-compiled	[CE]  method  subList  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
5	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter);	      sep    =    sep.finish(elementPairs.subList(2,    size));    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	9	None	replace
6	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size  +  1));  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size  +  1));  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size  +  1));	      sep    =    sep.finish(elementPairs.subList(2,    size));    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	9	None	replace
7	[BUG]  [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text  ==  null  ||  text.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text  ==  null  ||  text.equals( "   "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.equals(   "   "))    {    if(text  ==  null  ||  text.equals( "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
8	[BUG]  [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text  ==  null  ||  text.equals( ".   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text  ==  null  ||  text.equals( ".   "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.equals(   "   "))    {    if(text  ==  null  ||  text.equals( ".   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
9	[BUG]  [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text  ==  null  ||  text.equals( ",   "))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text  ==  null  ||  text.equals( ",   "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.equals(   "   "))    {    if(text  ==  null  ||  text.equals( ",   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
10	[BUG]  [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text!=  null  ||  text.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  if(text!=  null  ||  text.equals( "   "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.equals(   "   "))    {    if(text!=  null  ||  text.equals( "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
11	[BUG]  [BUGGY]  int  sep  =  sep.finish(f.getPrinter(),  notPrinter.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  sep.finish(f.getPrinter(),  notPrinter.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  sep.finish(f.getPrinter(),  notPrinter.getParser());	      int    sep    =    sep.finish(f.getPrinter(),    sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	10	None	replace
12	[BUG]  [BUGGY]  int  sep  =  f.finish(f.getPrinter(),  sep.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]          IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  f.finish(f.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  f.finish(f.getPrinter(),  sep.getParser());	      int    sep    =    sep.finish(f.getPrinter(),    sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	10	None	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals( "0 "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text  ==  null  ||  text.equals( "0 "))  {	  if(text    ==    null    ||    text.equals(   "   "))    {    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
14	[BUG]  [BUGGY]  if(text  ==  null  ||  text.equals( "0 "))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals( "0 "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text  ==  null  ||  text.equals( "0 "))  {	  if(text    ==    null    ||    text.equals(   "   "))    {    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
15	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null  ||  text.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text!=  null  ||  text.length()  ==  0)  {	  if(text    ==    null    ||    text.length()!=    0)    {    	compilable	  [FE]  IllegalArgumentException  	15	6	replace
16	[BUG]  [BUGGY]  if(text!=  null  ||  text.length()  ==  0)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null  ||  text.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text!=  null  ||  text.length()  ==  0)  {	  if(text    ==    null    ||    text.length()!=    0)    {    	compilable	  [FE]  IllegalArgumentException  	15	6	replace
17	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text  ==  null  ||  text.length()  >=  0)  {	  if(text    ==    null    ||    text.length()!=    0)    {    	compilable	  [FE]  IllegalArgumentException  	15	5	replace
18	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()  >=  0)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text  ==  null  ||  text.length()  >=  0)  {	  if(text    ==    null    ||    text.length()!=    0)    {    	compilable	  [FE]  IllegalArgumentException  	15	5	replace
19	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  notParser);	      sep    =    sep.finish(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	6	None	replace
20	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  iBeforeParser);  [CE]  cannot  find  symbol  iBeforeParser  [FE]            IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  iBeforeParser);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  iBeforeParser);	      sep    =    sep.finish(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  cannot  find  symbol  iBeforeParser	6	None	replace
21	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size,  notPrinter,  notParser);  [CE]  ')'  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size,  notPrinter,  notParser);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size,  notPrinter,  notParser);	      sep    =    sep.finish(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  ')'  expected	6	None	replace
22	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size  -  1,  notPrinter,  notParser);  [CE]  ')'  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size  -  1,  notPrinter,  notParser);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size  -  1,  notPrinter,  notParser);	      sep    =    sep.finish(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  appendSuffix(text,  null);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  appendSuffix(text,  null);  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	appendSuffix(text,  null);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  TextUtilities.appendSuffix(text,  null);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  TextUtilities.appendSuffix(text,  null);  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	TextUtilities.appendSuffix(text,  null);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  appendSuffix(text);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  appendSuffix(text);  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	appendSuffix(text);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  appendSuffix(text,  true);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  appendSuffix(text,  true);  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	appendSuffix(text,  true);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  int  sep  =  sep.finish(elementPairs.getPrinter(),  sep.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  sep.finish(elementPairs.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  sep.finish(elementPairs.getPrinter(),  sep.getParser());	      int    sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	7	None	replace
28	[BUG]  [BUGGY]  int  sep  =  sep.finish(sep.getPrinter(),  notPrinter.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]              IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  sep.finish(sep.getPrinter(),  notPrinter.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  sep.finish(sep.getPrinter(),  notPrinter.getParser());	      int    sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	7	None	replace
29	[BUG]  [BUGGY]  int  sep  =  s.finish(sep.getPrinter(),  sep.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]                IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  s.finish(sep.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  s.finish(sep.getPrinter(),  sep.getParser());	      int    sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	7	None	replace
30	[BUG]  [BUGGY]  int  sep  =  notPrinter.finish(f.getPrinter(),  f.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  notPrinter.finish(f.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  notPrinter.finish(f.getPrinter(),  f.getParser());	      int    sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
31	[BUG]  [BUGGY]  int  sep  =  f.finish(sep.getPrinter(),  f.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]          IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  f.finish(sep.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  f.finish(sep.getPrinter(),  f.getParser());	      int    sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
32	[BUG]  [BUGGY]  int  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]            IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);	      int    sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
33	[BUG]  [BUGGY]  sep  =  sep.finish(sep.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(sep.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(sep.getPrinter(),  f.getParser());	      sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
34	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  sep.getParser());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(f.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(f.getPrinter(),  sep.getParser());	      sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
35	[BUG]  [BUGGY]  sep  =  s.finish(sep.getPrinter(),  sep.getParser());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  s.finish(sep.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  s.finish(sep.getPrinter(),  sep.getParser());	      sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	add	        if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
37	[BUG]  [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	        if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
38	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	add	        if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    if(sep  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
39	[BUG]  [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	        if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    if(sep  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	compilable	  [FE]  IllegalArgumentException  	12	1	add
40	[BUG]  [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  If(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  If(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	        if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    If(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	non-compiled	[CE]  ';'  expected	12	None	add
41	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getSeparator());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getSeparator());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getSeparator());	      sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
42	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.getPrinter(),  f.getParser());	      sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
43	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter);	      sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	5	None	replace
44	[BUG]  [BUGGY]  parent  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  parent  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	parent  ==  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	      if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
45	[BUG]  [BUGGY]  parent!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  parent!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	parent!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	      if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
46	[BUG]  [BUGGY]  parent!=  null  &&  notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  parent!=  null  &&  notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	parent!=  null  &&  notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	      if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
47	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  if(text  ==  null  ||  text.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  if(text  ==  null  ||  text.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()    ==    0)    {    if(text  ==  null  ||  text.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
48	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  if(text!=  null  ||  text.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  if(text!=  null  ||  text.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()    ==    0)    {    if(text!=  null  ||  text.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
49	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  if(text  ==  null  ||  text.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  if(text  ==  null  ||  text.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()    ==    0)    {    if(text  ==  null  ||  text.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
50	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  If(text  ==  null  ||  text.length()  ==  0)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()  ==  0)  {  If(text  ==  null  ||  text.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()    ==    0)    {    If(text  ==  null  ||  text.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
51	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  if(text  ==  null  ||  text.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  if(text  ==  null  ||  text.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()!=    0)    {    if(text  ==  null  ||  text.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
52	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  if(text  ==  null  ||  text.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  if(text  ==  null  ||  text.length()  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()!=    0)    {    if(text  ==  null  ||  text.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
53	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  if(text!=  null  ||  text.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  if(text!=  null  ||  text.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()!=    0)    {    if(text!=  null  ||  text.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
54	[BUG]  [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  If(text  ==  null  ||  text.length()!=  0)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.length()!=  0)  {  If(text  ==  null  ||  text.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.length()!=    0)    {    If(text  ==  null  ||  text.length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
55	[BUG]  [BUGGY]  int  sep  =  s.finish(f.getPrinter(),  sep.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  s.finish(f.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  s.finish(f.getPrinter(),  sep.getParser());	      int    sep    =    sep.finish(f.getPrinter(),    sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	10	None	replace
56	[BUG]  [BUGGY]  sep  =  sep.finish(ep.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  ep  [FE]              IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(ep.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(ep.getPrinter(),  f.getParser());	      sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  cannot  find  symbol  ep	8	None	replace
57	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals( "* "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text  ==  null  ||  text.equals( "* "))  {	  if(text    ==    null    ||    text.equals(   "   "))    {    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
58	[BUG]  [BUGGY]  if(text  ==  null  ||  text.equals( "* "))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals( "* "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text  ==  null  ||  text.equals( "* "))  {	  if(text    ==    null    ||    text.equals(   "   "))    {    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
59	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(1,  size));  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(1,  size));  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(1,  size));	      sep    =    sep.finish(elementPairs.subList(2,    size));    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	9	None	replace
60	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  if(notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	add	        sep    =    sep.finish(f.getPrinter(),    f.getParser());    if(notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
61	[BUG]  [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  if(notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      sep  =  sep.finish(f.getPrinter(),  f.getParser());  if(notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	        sep    =    sep.finish(f.getPrinter(),    f.getParser());    if(notPrinter)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
62	[BUG]  [BUGGY]  int  sep  =  s.finish(f.getPrinter(),  f.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  s.finish(f.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  s.finish(f.getPrinter(),  f.getParser());	      int    sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
63	[BUG]  [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  If(text  ==  null  ||  text.equals( "   "))  {  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text  ==  null  ||  text.equals(   "   "))  {  If(text  ==  null  ||  text.equals( "   "))  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text    ==    null    ||    text.equals(   "   "))    {    If(text  ==  null  ||  text.equals( "   "))  {	  	non-compiled	[CE]  	16	None	add
64	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  iAfterParser);  [CE]  cannot  find  symbol  iAfterParser  [FE]          IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  iAfterParser);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(2,  size),  notPrinter,  notParser,  iAfterParser);	      sep    =    sep.finish(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  cannot  find  symbol  iAfterParser	6	None	replace
65	[BUG]  [BUGGY]  sep  =  sep.finish(elementPairs.subList(1,  size),  notPrinter,  notParser);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(elementPairs.subList(1,  size),  notPrinter,  notParser);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(elementPairs.subList(1,  size),  notPrinter,  notParser);	      sep    =    sep.finish(elementPairs.subList(2,    size),    notPrinter,    notParser);    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	6	None	replace
66	[BUG]  [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep  >=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]      if(sep!=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  if(sep  >=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	        if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    if(sep  >=  null)  {  sep  =  sep.finish(f.getPrinter(),  f.getParser());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	add
67	[BUG]  [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);  [CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(f.getPrinter(),  f.getParser(),  size);	      sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  method  finish  in  class  Separator  cannot  be  applied  to  given  types;	5	None	replace
68	[BUG]  [BUGGY]  Sep  <  Object>  sep  =  sep.finish(f.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  Sep  <  Object>  sep  =  sep.finish(f.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	Sep  <  Object>  sep  =  sep.finish(f.getPrinter(),  f.getParser());	      if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
69	[BUG]  [BUGGY]  TextUtilities.appendSuffix(text);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  TextUtilities.appendSuffix(text);  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	TextUtilities.appendSuffix(text);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  TextUtilities.appendSuffix(text,  this);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  TextUtilities.appendSuffix(text,  this);  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	TextUtilities.appendSuffix(text,  this);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  TextUtilities.appendSuffix(text,  false);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  TextUtilities.appendSuffix(text,  false);  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	TextUtilities.appendSuffix(text,  false);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  sep  =  sep.finish(sep,  f.getPrinter(),  sep.getParser());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  sep  =  sep.finish(sep,  f.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	sep  =  sep.finish(sep,  f.getPrinter(),  sep.getParser());	      sep    =    sep.finish(sep.getPrinter(),    sep.getParser());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
73	[BUG]  [BUGGY]  aught  =  sep.finish(f.getPrinter(),  f.getParser());  [CE]  cannot  find  symbol  aught  [FE]    IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  aught  =  sep.finish(f.getPrinter(),  f.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	aught  =  sep.finish(f.getPrinter(),  f.getParser());	      if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    	non-compiled	[CE]  cannot  find  symbol  aught	13	None	replace
74	[BUG]  [BUGGY]  parent  ==  null)  {  sep  =  parent.finish(f.getPrinter(),  f.getParser());  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  parent  ==  null)  {  sep  =  parent.finish(f.getPrinter(),  f.getParser());  }  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	parent  ==  null)  {  sep  =  parent.finish(f.getPrinter(),  f.getParser());  }	      if(sep!=    null)    {    sep    =    sep.finish(f.getPrinter(),    f.getParser());    }    	non-compiled	[CE]  not  a  statement	13	None	replace
75	[BUG]  [BUGGY]  int  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter);  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter);  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  sep.finish(f.getPrinter(),  f.getParser(),  notPrinter);	      int    sep    =    sep.finish(f.getPrinter(),    f.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	11	None	replace
76	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(new  SimpleAffix(text));  }  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(new  SimpleAffix(text));  }	      	compilable	  [FE]  IllegalArgumentException  	3	5	replace
77	[BUG]  [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(new  SimpleAffix(text));  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(new  SimpleAffix(text));  }  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(new  SimpleAffix(text));  }	      	compilable	  [FE]  IllegalArgumentException  	3	5	replace
78	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null)  {  for(int  i  =  0,  len  =  text.length();  i  <  len;  ++i)  {  appendSuffix(new  SimpleAffix(text));  }  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text!=  null)  {  for(int  i  =  0,  len  =  text.length();  i  <  len;  ++i)  {  appendSuffix(new  SimpleAffix(text));  }	      	compilable	  [FE]  IllegalArgumentException  	3	5	replace
79	[BUG]  [BUGGY]  if(text!=  null)  {  for(int  i  =  0,  len  =  text.length();  i  <  len;  ++i)  {  appendSuffix(new  SimpleAffix(text));  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null)  {  for(int  i  =  0,  len  =  text.length();  i  <  len;  ++i)  {  appendSuffix(new  SimpleAffix(text));  }  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text!=  null)  {  for(int  i  =  0,  len  =  text.length();  i  <  len;  ++i)  {  appendSuffix(new  SimpleAffix(text));  }	      	compilable	  [FE]  IllegalArgumentException  	3	5	replace
80	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text);  }  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text);  }	      	compilable	  [FE]  StackOverflowError  	3	6	replace
81	[BUG]  [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text);  }  [FE]  StackOverflowError  [FE]              IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text);  }  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text);  }	      	compilable	  [FE]  StackOverflowError  	3	6	replace
82	[BUG]  [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text[i]);  }  [CE]  array  required,  but  String  found  [FE]                IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text[i]);  }  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text!=  null)  {  for(int  i  =  0;  i  <  text.length();  ++i)  {  appendSuffix(text[i]);  }	      	non-compiled	[CE]  array  required,  but  String  found	3	None	replace
83	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null  ||  text.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	add	if(text!=  null  ||  text.length()!=  0)  {	  if(text    ==    null    ||    text.length()!=    0)    {    	compilable	  [FE]  IllegalArgumentException  	15	6	replace
84	[BUG]  [BUGGY]  if(text!=  null  ||  text.length()!=  0)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  PeriodFormatterBuilder  appendSuffix(String  text)  {    [BUGGY]  if(text!=  null  ||  text.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException();  }  return  appendSuffix(new  SimpleAffix(text));  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  appendSuffix  [RETURN_TYPE]  PeriodFormatterBuilder  String  text  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4082482904638631	552	552	1	replace	if(text!=  null  ||  text.length()!=  0)  {	  if(text    ==    null    ||    text.length()!=    0)    {    	compilable	  [FE]  IllegalArgumentException  	15	6	replace
85	[BUG]  [BUGGY]  int  sep  =  parser.finish(f.getPrinter(),  sep.getParser());  [CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)  [FE]        IllegalArgumentException    [CONTEXT]    private  static  PeriodFormatter  toFormatter(List<Object>  elementPairs,  boolean  notPrinter,  boolean  notParser)  {  if  (notPrinter  &&  notParser)  {  throw  new  IllegalStateException(   "Builder  has  created  neither  a  printer  nor  a  parser   ");  }  int  size  =  elementPairs.size();  if  (size  >=  2  &&  elementPairs.get(0)  instanceof  Separator)  {  Separator  sep  =  (Separator)  elementPairs.get(0);  PeriodFormatter  f  =  toFormatter(elementPairs.subList(2,  size),  notPrinter,  notParser);  sep  =  sep.finish(f.getPrinter(),  f.getParser());    [BUGGY]  int  sep  =  parser.finish(f.getPrinter(),  sep.getParser());  [BUGGY]    return  new  PeriodFormatter(sep,  sep);  }  Object[]  comp  =  createComposite(elementPairs);  if  (notPrinter)  {  return  new  PeriodFormatter(null,  (PeriodParser)  comp[1]);  }  else  if  (notParser)  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  null);  }  else  {  return  new  PeriodFormatter((PeriodPrinter)  comp[0],  (PeriodParser)  comp[1]);  }  }  [CLASS]  PeriodFormatterBuilder  SimpleAffix  PluralAffix  CompositeAffix  FieldFormatter  Literal  Separator  Composite  [METHOD]  toFormatter  [RETURN_TYPE]  PeriodFormatter  Object>  elementPairs  boolean  notPrinter  boolean  notParser  [VARIABLES]  PeriodPrinter[]  iPrinters  PeriodFormatter  f  PeriodParser  beforeParser  iAfterParser  iBeforeParser  parser  PeriodParser[]  iParsers  String  finalText  iFinalText  iPluralText  iSingularText  iText  pluralText  singularText  text  String[]  iParsedForms  variants  int  DAYS  HOURS  MAX_FIELD  MILLIS  MINUTES  MONTHS  PRINT_ZERO_ALWAYS  PRINT_ZERO_IF_SUPPORTED  PRINT_ZERO_NEVER  PRINT_ZERO_RARELY_FIRST  PRINT_ZERO_RARELY_LAST  SECONDS  SECONDS_MILLIS  SECONDS_OPTIONAL_MILLIS  WEEKS  YEARS  fieldType  i  iFieldType  iMaxParsedDigits  iMinPrintedDigits  iPrintZeroSetting  maxDigits  maxParsedDigits  minDigits  minPrinted  minPrintedDigits  printZeroSetting  size  type  PeriodPrinter  beforePrinter  iAfterPrinter  iBeforePrinter  printer  boolean  iNotParser  iNotPrinter  iRejectSignedValues  iUseAfter  iUseBefore  notParser  notPrinter  rejectSignedValues  useAfter  useBefore  v  Literal  EMPTY  literal  List  elementPairs  iElementPairs  pairs  parserList  printerList  FieldFormatter[]  fieldFormatters  iFieldFormatters  PeriodFieldAffix  iLeft  iPrefix  iRight  iSuffix  left  prefix  right  suffix  Separator  sep  Object[]  comp  	projects/Time27/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java	0.4472135954999579	803	803	1	replace	int  sep  =  parser.finish(f.getPrinter(),  sep.getParser());	      int    sep    =    sep.finish(f.getPrinter(),    sep.getParser());    	non-compiled	[CE]  variable  sep  is  already  defined  in  method  toFormatter(List<Object>,boolean,boolean)	10	None	replace
