bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (repeat  >  0)  {  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if  (repeat  >  0)  {  [BUGGY]  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	if  (repeat  >  0)  {	if  (greater  >  0)  {  	non-compiled	[CE]  <identifier>  expected	55	None	replace
2	[BUG]  [BUGGY]  if  (timeToLive  >  0)  {  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  if  (timeToLive  >  0)  {  [BUGGY]  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	if  (timeToLive  >  0)  {	if  (greater  >  0)  {  	non-compiled	[CE]  <identifier>  expected	55	None	replace
3	[BUG]  [BUGGY]  if  (this.repeat  >  0)  {  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  if  (this.repeat  >  0)  {  [BUGGY]  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	if  (this.repeat  >  0)  {	if  (greater  >  0)  {  	non-compiled	[CE]  <identifier>  expected	55	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	  	if  (greater  >  0)  {  	non-compiled	[CE]  <identifier>  expected	55	None	replace
5	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(increase,  text.length()  /  5);  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(increase,  text.length()  /  5);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  timeToLive  =  Math.max(increase,  text.length()  /  5);		non-compiled	[CE]  <identifier>  expected	56	None	add
6	[BUG]  [BUGGY]    int  timeToLive  =  Math.min(increase,  text.length()  /  5);  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.min(increase,  text.length()  /  5);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  timeToLive  =  Math.min(increase,  text.length()  /  5);		non-compiled	[CE]  <identifier>  expected	56	None	add
7	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(increase,  text.length()  -  1);  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(increase,  text.length()  -  1);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  timeToLive  =  Math.max(increase,  text.length()  -  1);		non-compiled	[CE]  <identifier>  expected	56	None	add
8	[BUG]  [BUGGY]    int  timeToLive  =  Math.min(increase,  text.length()  -  1);  [CE]  <identifier>  expected  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.min(increase,  text.length()  -  1);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  timeToLive  =  Math.min(increase,  text.length()  -  1);		non-compiled	[CE]  <identifier>  expected	56	None	add
9	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(increase,  text.length());  [CE]  <identifier>  expected  [FE]            NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(increase,  text.length());  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  timeToLive  =  Math.max(increase,  text.length());		non-compiled	[CE]  <identifier>  expected	56	None	add
10	[BUG]  [BUGGY]    Math.min(increase,  text.length()  /  5);  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    Math.min(increase,  text.length()  /  5);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    Math.min(increase,  text.length()  /  5);		non-compiled	[CE]  <identifier>  expected	56	None	add
11	[BUG]  [BUGGY]    int  searchListIndex  =  searchList.size();  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    int  searchListIndex  =  searchList.size();  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  searchListIndex  =  searchList.size();		non-compiled	[CE]  <identifier>  expected	56	None	add
12	[BUG]  [BUGGY]    Math.min(increase,  searchList.length()  /  5);  increase  =  Math.min(increase,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    Math.min(increase,  searchList.length()  /  5);  increase  =  Math.min(increase,  searchList.length()  /  5);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    Math.min(increase,  searchList.length()  /  5);  increase  =  Math.min(increase,  searchList.length()  /  5);		non-compiled	[CE]  <identifier>  expected	56	None	add
13	[BUG]  [BUGGY]    Math.min(increase,  searchList.length()  /  5);  increase  =  Math.max(increase,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    Math.min(increase,  searchList.length()  /  5);  increase  =  Math.max(increase,  searchList.length()  /  5);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    Math.min(increase,  searchList.length()  /  5);  increase  =  Math.max(increase,  searchList.length()  /  5);		non-compiled	[CE]  <identifier>  expected	56	None	add
14	[BUG]  [BUGGY]    Math.min(increase,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]            NullPointerException  [CONTEXT]    [BUGGY]    Math.min(increase,  searchList.length()  /  5);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    Math.min(increase,  searchList.length()  /  5);		non-compiled	[CE]  <identifier>  expected	56	None	add
15	[BUG]  [BUGGY]  if(repeat)  {  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(repeat)  {  [BUGGY]  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	if(repeat)  {	if  (greater  >  0)  {  	non-compiled	[CE]  <identifier>  expected	55	None	replace
16	[BUG]  [BUGGY]    int  searchListIndex  =  searchList.size()  -  1;  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    int  searchListIndex  =  searchList.size()  -  1;  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  searchListIndex  =  searchList.size()  -  1;		non-compiled	[CE]  <identifier>  expected	56	None	add
17	[BUG]  [BUGGY]    int  timeToLive  =  Math.min(searchList.size(),  increase);  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.min(searchList.size(),  increase);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  timeToLive  =  Math.min(searchList.size(),  increase);		non-compiled	[CE]  <identifier>  expected	56	None	add
18	[BUG]  [BUGGY]    int  searchList  =  searchList.size();  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    int  searchList  =  searchList.size();  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  searchList  =  searchList.size();		non-compiled	[CE]  <identifier>  expected	56	None	add
19	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(searchList.length(),  increase);  [CE]  <identifier>  expected  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(searchList.length(),  increase);  [BUGGY]  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	    int  timeToLive  =  Math.max(searchList.length(),  increase);		non-compiled	[CE]  <identifier>  expected	56	None	add
20	[BUG]  [BUGGY]  if(text.length()  >  0)  {  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(text.length()  >  0)  {  [BUGGY]  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  while  (textIndex  !=  -1)  {  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3677	3677	1	replace	if(text.length()  >  0)  {	if  (greater  >  0)  {  	non-compiled	[CE]  <identifier>  expected	55	None	replace
