bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(0,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length());	  int    increase    =    Math.max(0,    searchList.length()    -    3);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  int  increase  =  Math.min(0,  searchList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.min(0,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(0,  searchList.length());	  int    increase    =    Math.max(0,    searchList.length()    -    3);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  int  increase  =  Math.max(1,  searchList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(1,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(1,  searchList.length());	  int    increase    =    Math.max(0,    searchList.length()    -    3);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  int  increase  =  Math.max(increase,  searchList.length());  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(increase,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(increase,  searchList.length());	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
5	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  text.length());	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
6	[BUG]  [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replacementList[i].substring(0,  searchList.length());	      String    text    =    replacementList[i].substring(0,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  String  text  =  searchList[i].substring(0,  replacementList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  String  text  =  searchList[i].substring(0,  replacementList.length()  -  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  searchList[i].substring(0,  replacementList.length()  -  1);	      String    text    =    replacementList[i].substring(0,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
8	[BUG]  [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  +  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replacementList[i].substring(0,  searchList.length()  +  1);	      String    text    =    replacementList[i].substring(0,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
9	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length());	      int    timeToLive    =    Math.min(replacementList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length());	      int    timeToLive    =    Math.min(replacementList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  2);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  2);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  /  2);	      int    timeToLive    =    Math.min(replacementList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  text.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(0,  text.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  text.length());	  int    increase    =    Math.max(0,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
14	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
15	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
16	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
17	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  3);  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  3);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  3);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
18	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  1);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  1);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  2);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  2);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  2);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  4);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  4);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  4);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
21	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
22	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length());	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  3);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  3);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  3);	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
24	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  1);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  1);	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  2);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  2);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  2);	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  int  increase  =  2;  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  2;	  int    increase    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  int  increase  =  3;  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  3;	  int    increase    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  repeat);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  repeat);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  repeat);	      int    timeToLive    =    Math.max(replacementList.length(),    increase);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length());	      int    timeToLive    =    Math.max(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
30	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length());  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length,  searchList.length());	  int    increase    =    Math.max(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
31	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length,  searchList.length()  -  1);	  int    increase    =    Math.max(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
32	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  searchList.length()  /  2);	  int    increase    =    Math.max(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
33	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  4);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  4);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  4);	      int    timeToLive    =    Math.min(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
35	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
36	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
37	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
38	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  3);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  3);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  3);	      int    timeToLive    =    Math.min(searchList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
39	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  greater);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  greater);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  greater);	      int    timeToLive    =    Math.min(searchList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
40	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  1);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  1);	      int    timeToLive    =    Math.min(searchList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach.length,  searchList.length());	  int    increase    =    Math.max(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  searchList.length()  -  1);	  int    increase    =    Math.max(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  /  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  searchList.length()  /  2);	  int    increase    =    Math.max(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
44	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  searchList.length()  +  1);	  int    increase    =    Math.max(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
45	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  1);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  searchList.length()  /  1);	  int    increase    =    Math.max(replacementList.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
46	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length());	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length()    -    searchList[i].length());    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
47	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet();	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length()    -    searchList[i].length());    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
48	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList);	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length()    -    searchList[i].length());    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
49	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length()    -    searchList[i].length());    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
50	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  1);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  /  1);	      int    timeToLive    =    Math.min(replacementList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  -  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length()  -  1);	      int    timeToLive    =    Math.min(replacements.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
52	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  -  2);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length()  -  2);	      int    timeToLive    =    Math.min(replacements.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
53	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length()  -  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacements.length,  searchList.length()  -  1);	      int    timeToLive    =    Math.min(replacements.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  2);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  2);	      int    timeToLive    =    Math.min(replacements.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
55	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  2);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  2);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  2);	      int    timeToLive    =    Math.min(searchList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
56	[BUG]  [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length()  -  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  searchList[i].substring(0,  searchList.length()  -  1);	      String    text    =    replacementList[i].substring(0,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
57	[BUG]  [BUGGY]  String  text  =  searchList[i].substring(0,  replacementList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  String  text  =  searchList[i].substring(0,  replacementList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  searchList[i].substring(0,  replacementList.length());	      String    text    =    replacementList[i].substring(0,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  MutableReplacement.checkNotNull(replacementList);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList);	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
59	[BUG]  [BUGGY]  safeMultiply(replacementList[i].length(),  false);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeMultiply(replacementList[i].length(),  false);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safeMultiply(replacementList[i].length(),  false);	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
60	[BUG]  [BUGGY]  safeMultiply(replacementList[i].length()  /  5);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeMultiply(replacementList[i].length()  /  5);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safeMultiply(replacementList[i].length()  /  5);	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  +  1);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  +  1);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  +  1);	      int    timeToLive    =    Math.min(replacementList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  5);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  searchList.length()  /  5);	  int    increase    =    Math.max(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
63	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  /  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length()  /  2);	  int    increase    =    Math.max(0,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length());  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach,  searchList.length());	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  int  increase  =  Math.max(searchList.length(),  replacementEach.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(searchList.length(),  replacementEach.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(searchList.length(),  replacementEach.length());	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
66	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length);	      int    timeToLive    =    Math.max(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
67	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  timeToLive);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  timeToLive);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  timeToLive);	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
68	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].length());	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length()    -    searchList[i].length());    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
69	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName());  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].getName());	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length()    -    searchList[i].length());    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
70	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  replacementList.length());	      int    timeToLive    =    Math.min(replacements.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
71	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replaceEach.length,  replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  replacementList.length());	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
72	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.length()  ];  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.length()  ];  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[searchList.length()  ];	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
73	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  ];  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  ];  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.length()  ];	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
74	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.size()  ];  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.size()  ];  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[searchList.size()  ];	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
75	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  ];  [CE]  <identifier>  expected  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  ];  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.size()  ];	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
76	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length);	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  replacementList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  replacementList.length());	      int    timeToLive    =    Math.min(replacements.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
78	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  greater);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  greater);  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  greater);	      int    timeToLive    =    Math.min(searchList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
79	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  long  timeToLive  =  Math.min(replacementList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length());	      int    timeToLive    =    Math.min(replacementList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
80	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
81	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
82	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
83	[BUG]  [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	      if(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
84	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replacementList.length,  replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  replacementList.length());	  int    increase    =    Math.max(replacementList.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
85	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(increase,  replacementList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(increase,  replacementList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(increase,  replacementList.length());	      int    timeToLive    =    Math.min(replacementList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
86	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length());  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  text.length());	      int    timeToLive    =    Math.min(replacementList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
87	[BUG]  [BUGGY]  String  text  =  replaceList[i].substring(0,  searchList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  String  text  =  replaceList[i].substring(0,  searchList.length());  [BUGGY]    int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replaceList[i].substring(0,  searchList.length());	      String    text    =    replacementList[i].substring(0,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
88	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  searchList.length());	  int    increase    =    Math.max(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
