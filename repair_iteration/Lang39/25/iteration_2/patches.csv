bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length()  -  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  searchList[i].substring(0,  searchList.length()  -  2);	  String    text    =    searchList[i].substring(0,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
2	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  3);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  3);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  3);	  int    timeToLive    =    Math.min(replacements.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
3	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  2);	  int    timeToLive    =    Math.min(replacements.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
4	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  1);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  1);	  int    timeToLive    =    Math.min(replacements.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
5	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  searchList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  searchList.length);	  int    timeToLive    =    Math.min(replacements.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
6	[BUG]  [BUGGY]  int  increase  =  Math.min(increase,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(increase,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(increase,  searchList.length()  /  5);	  int    increase    =    Math.max(increase,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length(),  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length(),  searchList.length());	  int    increase    =    Math.max(increase,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  int  increase  =  Math.max(increase,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(increase,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(increase,  searchList.length()  /  5);	  int    increase    =    Math.max(increase,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  int  increase  =  Math.min(increase,  searchList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(increase,  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(increase,  searchList.length());	  int    increase    =    Math.max(increase,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  *  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  *  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  *  2);	  int    timeToLive    =    Math.min(replacementList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  4);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  4);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  /  4);	  int    timeToLive    =    Math.min(replacementList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  +  1];  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  +  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.size()  +  1];	  MutableString[]    replacementList    =    new    MutableString[replacementList.size()    ];    	non-compiled	[CE]  <identifier>  expected	75	None	replace
13	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  -  1];  [CE]  <identifier>  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  -  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.size()  -  1];	  MutableString[]    replacementList    =    new    MutableString[replacementList.size()    ];    	non-compiled	[CE]  <identifier>  expected	75	None	replace
14	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  4);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  4);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  4);	  int    timeToLive    =    Math.min(searchList.length(),    2);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
15	[BUG]  [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  -  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replacementList[i].substring(0,  searchList.length()  -  2);	  String    text    =    replacementList[i].substring(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  searchList.length()  -  1);	  int    increase    =    Math.max(replaceList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
17	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceList.length,  searchList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceList.length,  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceList.length,  searchList.length());	  int    increase    =    Math.max(replaceList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
18	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceList.length,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceList.length,  searchList.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceList.length,  searchList.length()  -  1);	  int    increase    =    Math.max(replaceList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
19	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  +  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  searchList.length()  +  1);	  int    increase    =    Math.max(replaceList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
20	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.size());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.size());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.size());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
21	[BUG]  [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
22	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	List  <  String>  replacementList  =  Sets.newHashSet(replacementList);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
23	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length);	  int    timeToLive    =    Math.min(replacements.length,    greater);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
24	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  3);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  3);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  3);	  int    timeToLive    =    Math.min(replacements.length,    greater);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
25	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  2);	  int    timeToLive    =    Math.min(replacements.length,    greater);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
26	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  1);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  1);	  int    timeToLive    =    Math.min(replacements.length,    greater);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
27	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  searchList.length());	  int    timeToLive    =    Math.min(searchList.length(),    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	70	None	replace
28	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  searchList.length());	  int    timeToLive    =    Math.min(searchList.length(),    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	70	None	replace
29	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
30	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
31	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
32	[BUG]  [BUGGY]  safeMultiply(replacementList[i].length());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(replacementList[i].length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safeMultiply(replacementList[i].length());	  safeMultiply(replacementList[i].length()    /    5);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
33	[BUG]  [BUGGY]  SafeMultiply(replacementList[i].length());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  SafeMultiply(replacementList[i].length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	SafeMultiply(replacementList[i].length());	  safeMultiply(replacementList[i].length()    /    5);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
34	[BUG]  [BUGGY]  safelyMultiply(replacementList[i].length());  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safelyMultiply(replacementList[i].length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safelyMultiply(replacementList[i].length());	  safeMultiply(replacementList[i].length()    /    5);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
35	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  +  1,  text.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  +  1,  text.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  +  1,  text.length());	  int    timeToLive    =    Math.min(replacementList.length(),    text.length());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
36	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  text.length()  -  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  text.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  text.length()  -  1);	  int    timeToLive    =    Math.min(replacementList.length(),    text.length());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
37	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacements.length,  searchList.length());	  int    timeToLive    =    Math.max(replacements.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
38	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length()  /  1);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length()  /  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacements.length,  searchList.length()  /  1);	  int    timeToLive    =    Math.max(replacements.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
39	[BUG]  [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  searchList[i].substring(0,  searchList.length());	  String    text    =    searchList[i].substring(0,    replacementList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.size()  +  1];  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.size()  +  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[searchList.size()  +  1];	  MutableString[]    replacementList    =    new    MutableString[searchList.size()    ];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
41	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.size()  -  1];  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.size()  -  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[searchList.size()  -  1];	  MutableString[]    replacementList    =    new    MutableString[searchList.size()    ];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
42	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  *  2);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  *  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length()  *  2);	  int    increase    =    Math.max(0,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
43	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  +  2);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  +  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length()  +  2);	  int    increase    =    Math.max(0,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
44	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  /  4);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  /  4);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length()  /  4);	  int    increase    =    Math.max(0,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
45	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length()  -  1);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
46	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0].length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0].length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0].length());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
47	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length()  +  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length()  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].length()  +  1);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
48	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  *  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  *  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  *  1);	  int    timeToLive    =    Math.min(replacementList.length()    /    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
49	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacements.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacements.length,  replacementList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacements.length,  replacementList.length());	  int    timeToLive    =    Math.min(replacements.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
50	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  *  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  *  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  searchList.length()  *  2);	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
51	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
52	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  referenceList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  referenceList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  referenceList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
53	[BUG]  [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  /  1);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  /  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replacementList[i].substring(0,  searchList.length()  /  1);	  String    text    =    replacementList[i].substring(0,    searchList.length()    +    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  1);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  1);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
55	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  2);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  2);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
56	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  +  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  +  1);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
57	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  /  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach.length,  searchList.length()  /  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  searchList.length()  /  1);	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    +    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
58	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  *  2);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  *  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length()  *  2);	  int    timeToLive    =    Math.min(replacements.length,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
59	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length()  +  1);	  int    timeToLive    =    Math.min(replacements.length,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
60	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length()  -  1);	  int    increase    =    Math.max(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	1	None	replace
61	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  -  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length()  -  2);	  int    increase    =    Math.max(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	1	None	replace
62	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.length()  +  1];  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.length()  +  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[searchList.length()  +  1];	  MutableString[]    replacementList    =    new    MutableString[searchList.length()    ];    	non-compiled	[CE]  <identifier>  expected	72	None	replace
63	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[text.length()  ];  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[text.length()  ];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[text.length()  ];	  MutableString[]    replacementList    =    new    MutableString[searchList.length()    ];    	non-compiled	[CE]  <identifier>  expected	72	None	replace
64	[BUG]  [BUGGY]  int  increase  =  Math.max(1,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(1,  searchList.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(1,  searchList.length()  -  1);	  int    increase    =    Math.max(1,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
65	[BUG]  [BUGGY]  int  increase  =  Math.max(1,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(1,  searchList.length()  +  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(1,  searchList.length()  +  1);	  int    increase    =    Math.max(1,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length()  -  1);	  int    timeToLive    =    Math.max(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
67	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].length()  -  1);	  MutableReplacement.checkNotNull(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
68	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].length()  +  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].length()  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].length()  +  1);	  MutableReplacement.checkNotNull(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
69	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i]);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[i]);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i]);	  MutableReplacement.checkNotNull(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
70	[BUG]  [BUGGY]  MutableReplacement.checkState(replacementList[i].length()  ==  0);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkState(replacementList[i].length()  ==  0);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkState(replacementList[i].length()  ==  0);	  MutableReplacement.checkNotNull(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
71	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  *  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  *  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  searchList.length()  *  1);	  int    increase    =    Math.max(replacementList.length,    searchList.length()    /    1);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
72	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  +  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  searchList.length()  +  1);	  int    increase    =    Math.max(replacementList.length,    searchList.length()    /    1);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
73	[BUG]  [BUGGY]  MutableReplacement.checkState(replacementList[i].getName()!=  null);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkState(replacementList[i].getName()!=  null);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkState(replacementList[i].getName()!=  null);	  MutableReplacement.checkNotNull(replacementList[i].getName());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
74	[BUG]  [BUGGY]  MutableReplacement.checkState(replacementList[i].getName()  ==  null);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkState(replacementList[i].getName()  ==  null);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkState(replacementList[i].getName()  ==  null);	  MutableReplacement.checkNotNull(replacementList[i].getName());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
75	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName(),  repeat);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName(),  repeat);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].getName(),  repeat);	  MutableReplacement.checkNotNull(replacementList[i].getName());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
76	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach,  searchList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceEach,  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach,  searchList.length());	  int    increase    =    Math.max(replaceEach,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
77	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach,  searchList.length()  -  1);	  int    increase    =    Math.max(replaceEach,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
78	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  +  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach,  searchList.length()  +  1);	  int    increase    =    Math.max(replaceEach,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
79	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  /  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach,  searchList.length()  /  2);	  int    increase    =    Math.max(replaceEach,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
80	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  text.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  text.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  text.length()  -  1);	  int    increase    =    Math.max(0,    text.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
81	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  text.length()  /  5);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  text.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  text.length()  /  5);	  int    increase    =    Math.max(0,    text.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
82	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  text.length()  -  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  text.length()  -  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  text.length()  -  2);	  int    increase    =    Math.max(0,    text.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
83	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  text.length()  /  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  text.length()  /  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  text.length()  /  2);	  int    increase    =    Math.max(0,    text.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
84	[BUG]  [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  searchList[i].substring(0,  searchList.length()  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  searchList[i].substring(0,  searchList.length()  +  1);	  String    text    =    searchList[i].substring(0,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
85	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length(),  replacementList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length(),  replacementList.length());	  int    increase    =    Math.max(replacementList.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	84	None	replace
86	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length()  +  1,  replacementList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length()  +  1,  replacementList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length()  +  1,  replacementList.length());	  int    increase    =    Math.max(replacementList.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	84	None	replace
87	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	List  <  String>  replacementList  =  Sets.newHashSet();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
88	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newArrayList();  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newArrayList();  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	List  <  String>  replacementList  =  Sets.newArrayList();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
89	[BUG]  [BUGGY]  Collection  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Collection  <  String>  replacementList  =  Sets.newHashSet();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
90	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length(),  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length(),  searchList.length());	  int    increase    =    Math.max(searchList.length(),    replacementEach.length());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
91	[BUG]  [BUGGY]  int  increase  =  Math.max(replacements.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacements.length(),  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacements.length(),  searchList.length());	  int    increase    =    Math.max(searchList.length(),    replacementEach.length());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
92	[BUG]  [BUGGY]  int  increase  =  Math.max(searchList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(searchList.length(),  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(searchList.length(),  searchList.length());	  int    increase    =    Math.max(searchList.length(),    replacementEach.length());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
93	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length,  searchList.length()  /  1);	  int    increase    =    Math.min(replacementList.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
94	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacements.length,  searchList.length());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacements.length,  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacements.length,  searchList.length());	  int    timeToLive    =    Math.min(replacements.length,    searchList.length()    -    2);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
95	[BUG]  [BUGGY]  long  timeToLive  =  Math.max(replacementList.length(),  3);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.max(replacementList.length(),  3);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.max(replacementList.length(),  3);	  long    timeToLive    =    Math.min(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	79	None	replace
96	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length()  -  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length()  -  1);	  long    timeToLive    =    Math.min(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	79	None	replace
97	[BUG]  [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
98	[BUG]  [BUGGY]  while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
99	[BUG]  [BUGGY]  int  increase  =  Math.min(0,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(0,  searchList.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(0,  searchList.length()  -  1);	  int    increase    =    Math.min(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
100	[BUG]  [BUGGY]  int  increase  =  Math.min(0,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(0,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(0,  searchList.length()  /  5);	  int    increase    =    Math.min(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
101	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  1);	  int    timeToLive    =    Math.min(replacements.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
102	[BUG]  [BUGGY]  int  increase  =  3  *  Math.max(0,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  3  *  Math.max(0,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  3  *  Math.max(0,  searchList.length()  /  5);	  int    increase    =    3;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
103	[BUG]  [BUGGY]  int  increase  =  3  *  Math.max(replacementList.length(),  timeToLive);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  3  *  Math.max(replacementList.length(),  timeToLive);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  3  *  Math.max(replacementList.length(),  timeToLive);	  int    increase    =    3;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
104	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
105	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  2);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  2);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
106	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  +  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  +  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
107	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  +  1];  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  +  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.length()  +  1];	  MutableString[]    replacementList    =    new    MutableString[replacementList.length()    ];    	non-compiled	[CE]  <identifier>  expected	73	None	replace
108	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  -  1];  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  -  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.length()  -  1];	  MutableString[]    replacementList    =    new    MutableString[replacementList.length()    ];    	non-compiled	[CE]  <identifier>  expected	73	None	replace
109	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(increase,  searchList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(increase,  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(increase,  searchList.length());	  int    timeToLive    =    Math.min(increase,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
110	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  increase);	  int    timeToLive    =    Math.min(increase,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
111	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(increase,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(increase,  searchList.length()  /  5);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(increase,  searchList.length()  /  5);	  int    timeToLive    =    Math.min(increase,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
112	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  searchList.length());	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
113	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  3);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  3);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  3);	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
114	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  1);	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
115	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length,  searchList.length()  /  5);	  int    increase    =    Math.min(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
116	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  1);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
117	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  +  1);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
118	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  2);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
119	[BUG]  [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
120	[BUG]  [BUGGY]  while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
121	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  text.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length,  text.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  text.length());	  int    increase    =    Math.max(replacementList.length,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
122	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  referenceList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  referenceList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  referenceList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
123	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  5);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  5);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  5);	  int    timeToLive    =    Math.min(searchList.length(),    3);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
124	[BUG]  [BUGGY]  String  text  =  searchList[i].substring(0,  replaceList.length());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  searchList[i].substring(0,  replaceList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  searchList[i].substring(0,  replaceList.length());	  String    text    =    replaceList[i].substring(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	87	None	replace
125	[BUG]  [BUGGY]  String  text  =  replaceList[i].substring(0,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  replaceList[i].substring(0,  searchList.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replaceList[i].substring(0,  searchList.length()  -  1);	  String    text    =    replaceList[i].substring(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	87	None	replace
126	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length(),  replacementEach.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length(),  replacementEach.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length(),  replacementEach.length());	  int    increase    =    Math.max(replaceEach.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
127	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  replacementEach.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length,  replacementEach.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  replacementEach.length());	  int    increase    =    Math.max(replaceEach.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
128	[BUG]  [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
129	[BUG]  [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
130	[BUG]  [BUGGY]  while(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  while(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
131	[BUG]  [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
132	[BUG]  [BUGGY]  safeMultiply(replacementList[i].length(),  true);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(replacementList[i].length(),  true);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safeMultiply(replacementList[i].length(),  true);	  safeMultiply(replacementList[i].length(),    false);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
133	[BUG]  [BUGGY]  safeMultiply(replacementList[i].length()  -  1,  false);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(replacementList[i].length()  -  1,  false);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safeMultiply(replacementList[i].length()  -  1,  false);	  safeMultiply(replacementList[i].length(),    false);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
134	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  5);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  5);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  5);	  int    timeToLive    =    Math.min(replacementList.length(),    3);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
135	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList,  new  String[]  {  text  }  );  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList,  new  String[]  {  text  }  );  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList,  new  String[]  {  text  }  );	  MutableReplacement.checkNotNull(replacementList);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
136	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList,  false);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList,  false);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList,  false);	  MutableReplacement.checkNotNull(replacementList);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
137	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList,  true);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList,  true);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList,  true);	  MutableReplacement.checkNotNull(replacementList);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
138	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getName());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getName());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getName());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].getValue());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
139	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getKey());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getKey());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getKey());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].getValue());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
140	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	List  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].getValue());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
141	[BUG]  [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());  [CE]  <identifier>  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList[i].getValue());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].getValue());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
142	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  *  2);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  *  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  searchList.length()  *  2);	  int    increase    =    Math.max(replacementList.length,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
143	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
144	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  2);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
145	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  +  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
146	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach.length,  text.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceEach.length,  text.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach.length,  text.length());	  int    increase    =    Math.max(replaceEach.length,    text.length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
147	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach.length(),  text.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceEach.length(),  text.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach.length(),  text.length());	  int    increase    =    Math.max(replaceEach.length,    text.length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
148	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  text.length()  -  1);	  int    increase    =    Math.max(replaceEach.length,    text.length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
149	[BUG]  [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(replacementList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
150	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length()  -  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach.length,  searchList.length()  -  1);	  int    increase    =    Math.min(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
151	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach.length,  searchList.length()  /  5);	  int    increase    =    Math.min(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
152	[BUG]  [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
153	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  text.length()  /  5);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length,  text.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  text.length()  /  5);	  int    increase    =    Math.max(replacementList.length,    searchList.length()    /    5);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
154	[BUG]  [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  -  3);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  replacementList[i].substring(0,  searchList.length()  -  3);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replacementList[i].substring(0,  searchList.length()  -  3);	  String    text    =    replacementList[i].substring(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
155	[BUG]  [BUGGY]  safeMultiply(searchList[i].length(),  false);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(searchList[i].length(),  false);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safeMultiply(searchList[i].length(),  false);	  safeMultiply(replacementList[i].length(),    false);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
156	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  /  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  /  2);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
157	[BUG]  [BUGGY]  safeMultiply(replacementList[i].length()  +  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(replacementList[i].length()  +  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	safeMultiply(replacementList[i].length()  +  1);	  safeMultiply(replacementList[i].length()    /    5);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
158	[BUG]  [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
159	[BUG]  [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
160	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length()  /  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length()  /  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length()  /  2);	  long    timeToLive    =    Math.min(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	79	None	replace
161	[BUG]  [BUGGY]  int  increase  =  Math.max(1,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(1,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(1,  searchList.length()  /  5);	  int    increase    =    Math.max(1,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
162	[BUG]  [BUGGY]  int  increase  =  Math.max(2,  searchList.length());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(2,  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(2,  searchList.length());	  int    increase    =    Math.max(1,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
163	[BUG]  [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
164	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  4);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length,  searchList.length()  /  4);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length,  searchList.length()  /  4);	  int    increase    =    Math.max(replacementList.length,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
165	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  replacementList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  replacementList.length());	  int    timeToLive    =    Math.min(searchList.length(),    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	70	None	replace
166	[BUG]  [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
167	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length());	  int    timeToLive    =    Math.min(increase,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
168	[BUG]  [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList[i].length();  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
169	[BUG]  [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
170	[BUG]  [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
171	[BUG]  [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  searchList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
172	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  4);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  4);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  searchList.length()  /  4);	  int    timeToLive    =    Math.min(replacements.length,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
173	[BUG]  [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
174	[BUG]  [BUGGY]  int  increase  =  Math.min(searchList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(searchList.length(),  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(searchList.length(),  searchList.length());	  int    increase    =    Math.min(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
175	[BUG]  [BUGGY]  int  increase  =  Math.min(searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(searchList.length()  /  5);	  int    increase    =    Math.min(0,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
176	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
177	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  searchList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacements.length,  searchList.length);	  int    timeToLive    =    Math.min(replacements.length,    greater);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
178	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[0].getName());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[0].getName());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[0].getName());	  MutableReplacement.checkNotNull(replacementList[i].getName());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
179	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName(),  false);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName(),  false);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].getName(),  false);	  MutableReplacement.checkNotNull(replacementList[i].getName());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
180	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName(),  searchList);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].getName(),  searchList);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].getName(),  searchList);	  MutableReplacement.checkNotNull(replacementList[i].getName());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
181	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  text.length()  /  4);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  text.length()  /  4);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  text.length()  /  4);	  int    increase    =    Math.max(0,    text.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
182	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  0);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  0);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  0);	  int    timeToLive    =    Math.max(replacementList.length(),    1);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
183	[BUG]  [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	ArrayList  <  String>  replacementList  =  Sets.newHashSet();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
184	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  /  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  /  2);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
185	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  2  -  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length()  /  2  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length()  /  2  -  1);	  int    timeToLive    =    Math.min(replacementList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
186	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceEach.length,  replacementList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach.length,  replacementList.length());	  int    increase    =    Math.max(replaceEach.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
187	[BUG]  [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
188	[BUG]  [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	While(searchList.length  >  0)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(replacementList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
189	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[0].length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[0].length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[0].length());	  MutableReplacement.checkNotNull(replacementList[i].length());    	non-compiled	[CE]  <identifier>  expected	68	None	replace
190	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length()  /  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length()  /  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length()  /  2);	  int    timeToLive    =    Math.max(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
191	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.length()  -  1];  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[searchList.length()  -  1];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[searchList.length()  -  1];	  MutableString[]    replacementList    =    new    MutableString[searchList.length()    ];    	non-compiled	[CE]  <identifier>  expected	72	None	replace
192	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0].getValue());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0].getValue());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0].getValue());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].getValue());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
193	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList[i].getValue());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList[i].getValue());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(searchList[i].getValue());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i].getValue());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
194	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList);	  int    timeToLive    =    Math.min(replacementList.length(),    repeat);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
195	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  searchList);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length(),  searchList);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length(),  searchList);	  int    timeToLive    =    Math.min(replacements.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
196	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length(),  replacementList.length);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
197	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  3);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  3);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  3);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
198	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  replacementList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacements.length,  replacementList.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacements.length,  replacementList.length()  -  1);	  int    timeToLive    =    Math.min(replacements.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
199	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach,  searchList.length()  /  5);	  int    increase    =    Math.max(replaceEach,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
200	[BUG]  [BUGGY]  int  increase  =  Math.min(searchList.length(),  replaceEach.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(searchList.length(),  replaceEach.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(searchList.length(),  replaceEach.length());	  int    increase    =    Math.min(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
201	[BUG]  [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replaceEach.length,  searchList.length()  /  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replaceEach.length,  searchList.length()  /  2);	  int    increase    =    Math.min(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
202	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length()  /  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length()  /  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  text.length()  /  2);	  int    timeToLive    =    Math.min(replacementList.length(),    text.length());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
203	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  text.length());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  text.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  text.length());	  int    timeToLive    =    Math.min(replacementList.length(),    text.length());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
204	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList,  null);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList,  null);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList,  null);	  MutableReplacement.checkNotNull(replacementList);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
205	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList,  searchList);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList,  searchList);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList,  searchList);	  MutableReplacement.checkNotNull(replacementList);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
206	[BUG]  [BUGGY]  int  increase  =  Math.max(replacements.length(),  replacementEach.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacements.length(),  replacementEach.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacements.length(),  replacementEach.length());	  int    increase    =    Math.max(searchList.length(),    replacementEach.length());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
207	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  /  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  searchList.length()  /  2);	  int    increase    =    Math.max(replaceList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
208	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  /  5);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length,  searchList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  searchList.length()  /  5);	  int    increase    =    Math.max(replaceList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
209	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  2);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length,  searchList.length()  /  2);	  int    increase    =    Math.min(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
210	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  4);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length,  searchList.length()  /  4);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length,  searchList.length()  /  4);	  int    increase    =    Math.min(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
211	[BUG]  [BUGGY]  int  increase  =  3  *  Math.max(replacementList.length()  /  5);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  3  *  Math.max(replacementList.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  3  *  Math.max(replacementList.length()  /  5);	  int    increase    =    3;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
212	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  /  5);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  /  5);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  text.length()  /  5);	  int    increase    =    Math.max(replaceEach.length,    text.length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
213	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].toString());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[i].toString());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[i].toString());	  MutableReplacement.checkNotNull(replacementList[i].getName());    	non-compiled	[CE]  <identifier>  expected	69	None	replace
214	[BUG]  [BUGGY]  long  timeToLive  =  Math.max(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.max(replacementList.length(),  searchList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.max(replacementList.length(),  searchList.length());	  long    timeToLive    =    Math.min(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	79	None	replace
215	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  searchList.length()  +  1);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  searchList.length()  +  1);	  int    increase    =    Math.max(0,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
216	[BUG]  [BUGGY]  int  increase  =  Math.min(searchList.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(searchList.length,  replacementList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(searchList.length,  replacementList.length());	  int    increase    =    Math.min(replacementList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
217	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[this.replacementList.size()  ];  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[this.replacementList.size()  ];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[this.replacementList.size()  ];	  MutableString[]    replacementList    =    new    MutableString[replacementList.size()    ];    	non-compiled	[CE]  <identifier>  expected	75	None	replace
218	[BUG]  [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    searchList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
219	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  replacementList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacements.length,  replacementList.length());	  int    timeToLive    =    Math.max(replacements.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
220	[BUG]  [BUGGY]  int  increase  =  Math.max(replacementList.length(),  text.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacementList.length(),  text.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacementList.length(),  text.length());	  int    increase    =    Math.max(searchList.length(),    replacementEach.length());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
221	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  -  2);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  -  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  text.length()  -  2);	  int    increase    =    Math.max(replaceEach.length,    text.length());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
222	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[this.searchList.length()  ];  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[this.searchList.length()  ];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[this.searchList.length()  ];	  MutableString[]    replacementList    =    new    MutableString[searchList.length()    ];    	non-compiled	[CE]  <identifier>  expected	72	None	replace
223	[BUG]  [BUGGY]  int  increase  =  Math.max(replacements.length,  searchList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replacements.length,  searchList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replacements.length,  searchList.length());	  int    increase    =    Math.max(increase,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
224	[BUG]  [BUGGY]  int  increase  =  Math.max(0,  text.length()  -  3);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(0,  text.length()  -  3);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(0,  text.length()  -  3);	  int    increase    =    Math.max(0,    text.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
225	[BUG]  [BUGGY]  int  increase  =  Math.min(searchList.length(),  text.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(searchList.length(),  text.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(searchList.length(),  text.length());	  int    increase    =    Math.max(0,    text.length());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
226	[BUG]  [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  1)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    ++i)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
227	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[this.searchList.size()  ];  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[this.searchList.size()  ];  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableString[]  replacementList  =  new  MutableString[this.searchList.size()  ];	  MutableString[]    replacementList    =    new    MutableString[searchList.size()    ];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
228	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  text.length()  -  1);	  int    timeToLive    =    Math.min(replacementList.length(),    text.length());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
229	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length()  -  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  text.length()  -  2);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  text.length()  -  2);	  int    timeToLive    =    Math.min(replacementList.length(),    text.length());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
230	[BUG]  [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
231	[BUG]  [BUGGY]  while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  3)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
232	[BUG]  [BUGGY]  String  text  =  replacementList[i].substring(0,  replacementList.length());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String  text  =  replacementList[i].substring(0,  replacementList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	String  text  =  replacementList[i].substring(0,  replacementList.length());	  String    text    =    searchList[i].substring(0,    replacementList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
233	[BUG]  [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList[i]!=  null)  {  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
234	[BUG]  [BUGGY]  while(searchList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  while(searchList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  Math.max(replacementList[i].length(),  greater);  }	  while(searchList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    increase    +=    Math.max(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
235	[BUG]  [BUGGY]  int  increase  =  4;  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  4;  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  4;	  int    increase    =    3;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
236	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  replaceEach.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length,  replaceEach.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  replaceEach.length());	  int    increase    =    Math.max(replaceEach.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	71	None	replace
237	[BUG]  [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	while(searchList.length  >  5)  {  for(int  i  =  0;  i  <  replacementList.length;  ++i)  {  increase  +=  Math.min(replacementList[i].length(),  greater);  }	  while(searchList.length    >    0)    {    for(int    i    =    0;    i    <    replacementList.length;    ++i)    {    increase    +=    Math.min(replacementList[i].length(),    greater);    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
238	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  /  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach.length,  text.length()  /  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach.length,  text.length()  /  2);	  int    increase    =    Math.max(replaceEach.length,    searchList.length()    /    2);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
239	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceList.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceList.length,  replacementList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceList.length,  replacementList.length());	  int    increase    =    Math.max(replaceList.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
240	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
241	[BUG]  [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(replaceEach,  searchList.length()  -  2);  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(replaceEach,  searchList.length()  -  2);	  int    increase    =    Math.max(replaceEach,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
242	[BUG]  [BUGGY]  int  increase  =  Math.min(replacementList.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(replacementList.length,  replacementList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(replacementList.length,  replacementList.length());	  int    increase    =    Math.min(replacementList.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
243	[BUG]  [BUGGY]  int  increase  =  Math.max(1,  replacementList.length());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.max(1,  replacementList.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.max(1,  replacementList.length());	  int    increase    =    Math.max(1,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
244	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.length);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.length);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
245	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length,  replacementList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(searchList.length,  replacementList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(searchList.length,  replacementList.length());	  int    timeToLive    =    Math.min(replacements.length,    searchList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
246	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  timeToLive);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  timeToLive);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.min(replacementList.length,  timeToLive);	  int    timeToLive    =    Math.min(increase,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	85	None	replace
247	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  replacementList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacements.length,  replacementList.length()  -  1);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacements.length,  replacementList.length()  -  1);	  int    timeToLive    =    Math.min(replacements.length,    replacementList.length());    	non-compiled	[CE]  <identifier>  expected	77	None	replace
248	[BUG]  [BUGGY]  int  increase  =  Math.min(searchList.length,  replaceEach.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  increase  =  Math.min(searchList.length,  replaceEach.length());  [BUGGY]        for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  increase  =  Math.min(searchList.length,  replaceEach.length());	  int    increase    =    Math.min(replaceEach.length,    searchList.length());    	non-compiled	[CE]  <identifier>  expected	41	None	replace
249	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length());  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length());	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	29	None	replace
250	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  searchList.length);	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
251	[BUG]  [BUGGY]  MutableReplacement.checkState(replacementList!=  null);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkState(replacementList!=  null);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkState(replacementList!=  null);	  MutableReplacement.checkNotNull(replacementList);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
252	[BUG]  [BUGGY]  MutableReplacement.checkNotNull(replacementList[0]);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableReplacement.checkNotNull(replacementList[0]);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	MutableReplacement.checkNotNull(replacementList[0]);	  MutableReplacement.checkNotNull(replacementList);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
253	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacements);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacements);  [BUGGY]      int  increase  =  0;  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3672	3672	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacements);	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
