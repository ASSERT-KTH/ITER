bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(replacementList.length(),  greater);  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(replacementList.length(),  greater);  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    int  timeToLive  =  Math.max(replacementList.length(),  greater);		non-compiled	[CE]  <identifier>  expected	52	None	add
2	[BUG]  [BUGGY]    int  timeToLive  =  Math.min(replacementList.length(),  greater);  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.min(replacementList.length(),  greater);  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    int  timeToLive  =  Math.min(replacementList.length(),  greater);		non-compiled	[CE]  <identifier>  expected	52	None	add
3	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(replacementList.length(),  increase);  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(replacementList.length(),  increase);  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    int  timeToLive  =  Math.max(replacementList.length(),  increase);		non-compiled	[CE]  <identifier>  expected	52	None	add
4	[BUG]  [BUGGY]    int  timeToLive  =  Math.min(replacementList.length(),  increase);  [CE]  <identifier>  expected  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.min(replacementList.length(),  increase);  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    int  timeToLive  =  Math.min(replacementList.length(),  increase);		non-compiled	[CE]  <identifier>  expected	52	None	add
5	[BUG]  [BUGGY]    String[]  replacementList  =  getReplacementList();  [CE]  <identifier>  expected  [FE]            NullPointerException  [CONTEXT]    [BUGGY]    String[]  replacementList  =  getReplacementList();  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    String[]  replacementList  =  getReplacementList();		non-compiled	[CE]  <identifier>  expected	52	None	add
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  [BUGGY]  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {	for  (int  i  =  0;  i  <  searchList.length;  i++)  {  	non-compiled	[CE]  <identifier>  expected	51	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length();  i++)  {  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  searchList.length();  i++)  {  [BUGGY]  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length();  i++)  {	for  (int  i  =  0;  i  <  searchList.length;  i++)  {  	non-compiled	[CE]  <identifier>  expected	51	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  [BUGGY]  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {	for  (int  i  =  0;  i  <  searchList.length;  i++)  {  	non-compiled	[CE]  <identifier>  expected	51	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length;  i++)  {  [CE]  <identifier>  expected  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length;  i++)  {  [BUGGY]  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.searchList.length;  i++)  {	for  (int  i  =  0;  i  <  searchList.length;  i++)  {  	non-compiled	[CE]  <identifier>  expected	51	None	replace
10	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(replacementList.length(),  timeToLive);  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(replacementList.length(),  timeToLive);  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    int  timeToLive  =  Math.max(replacementList.length(),  timeToLive);		non-compiled	[CE]  <identifier>  expected	52	None	add
11	[BUG]  [BUGGY]    StringBuffer  buf  =  new  StringBuffer(replacementList.length());  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    StringBuffer  buf  =  new  StringBuffer(replacementList.length());  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    StringBuffer  buf  =  new  StringBuffer(replacementList.length());		non-compiled	[CE]  <identifier>  expected	52	None	add
12	[BUG]  [BUGGY]    int  timeToLive  =  Math.min(replacementList.length(),  timeToLive);  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.min(replacementList.length(),  timeToLive);  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    int  timeToLive  =  Math.min(replacementList.length(),  timeToLive);		non-compiled	[CE]  <identifier>  expected	52	None	add
13	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }		non-compiled	[CE]  <identifier>  expected	52	None	add
14	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }		non-compiled	[CE]  <identifier>  expected	52	None	add
15	[BUG]  [BUGGY]    int  timeToLive  =  Math.max(replacementList.length,  greater);  [CE]  <identifier>  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    int  timeToLive  =  Math.max(replacementList.length,  greater);  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    int  timeToLive  =  Math.max(replacementList.length,  greater);		non-compiled	[CE]  <identifier>  expected	52	None	add
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]  for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	    for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }		non-compiled	[CE]  <identifier>  expected	52	None	add
