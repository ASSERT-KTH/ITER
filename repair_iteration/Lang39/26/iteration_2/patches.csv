bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
2	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
3	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  -  2);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
4	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length()  +  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
5	[BUG]  [BUGGY]  this.replacementList[i]  =  replacementList[i].toLowerCase();  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  this.replacementList[i]  =  replacementList[i].toLowerCase();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	this.replacementList[i]  =  replacementList[i].toLowerCase();	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  selectionList.length();  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  selectionList.length();  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  selectionList.length();  i++)  {	  for(int    i    =    0;    i    <    searchList.length()    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  String[]  replacementList  =  super.replacementList(searchList);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  super.replacementList(searchList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  super.replacementList(searchList);	  String[]    replacementList    =    super.replacementList();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
10	[BUG]  [BUGGY]  String[]  replacementList  =  this.replacementList();  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  this.replacementList();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  this.replacementList();	  String[]    replacementList    =    super.replacementList();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
11	[BUG]  [BUGGY]  String[]  replacementList  =  super.replacementList(0,  1);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  super.replacementList(0,  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  super.replacementList(0,  1);	  String[]    replacementList    =    super.replacementList();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
13	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  *  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  increase  *  1);	  int    timeToLive    =    Math.max(replacementList.length(),    increase    +    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
14	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  1);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  1);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
15	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  +  1);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  +  1);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
16	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  2);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length  -  2);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
17	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  0);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  0);	  int    timeToLive    =    Math.max(replacementList.length,    2);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
18	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(new  String[replacementList.size()  ]);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(new  String[replacementList.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList().toArray(new  String[replacementList.size()  ]);	  String[]    replacementList    =    getReplacementList().toArray(replacementList);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
19	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(replacements);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(replacements);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList().toArray(replacements);	  String[]    replacementList    =    getReplacementList().toArray(replacementList);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
20	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(new  String[replacements.size()  ]);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(new  String[replacements.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList().toArray(new  String[replacements.size()  ]);	  String[]    replacementList    =    getReplacementList().toArray(replacementList);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
21	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(false);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(false);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(false);	  String[]    replacementList    =    getReplacementList(true);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(false,  false);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(false,  false);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(false,  false);	  String[]    replacementList    =    getReplacementList(true);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(false,  true);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(false,  true);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(false,  true);	  String[]    replacementList    =    getReplacementList(true);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(true,  false);  [CE]  <identifier>  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(true,  false);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(true,  false);	  String[]    replacementList    =    getReplacementList(true);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  searchList.length());	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
26	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  1);	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
27	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  3);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  3);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  3);	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
28	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  +  1);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
29	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  2);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length()  -  2);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
30	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  searchList.length);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  searchList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length,  searchList.length);	  int    timeToLive    =    Math.max(replacementList.length,    searchList.length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
31	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  searchList.length  -  1);	  int    timeToLive    =    Math.max(replacementList.length,    searchList.length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
32	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length  +  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  searchList.length  +  1);	  int    timeToLive    =    Math.max(replacementList.length,    searchList.length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
33	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length  -  2);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  searchList.length  -  2);	  int    timeToLive    =    Math.max(replacementList.length,    searchList.length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
34	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(null,  null);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(null,  null);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(null,  null);	  String[]    replacementList    =    getReplacementList(null);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(this);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(this);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(this);	  String[]    replacementList    =    getReplacementList(null);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    larger;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  larger;  }  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  larger;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  larger;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    larger;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
38	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(ReplacementList.length());  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StringBuffer  buf  =  new  StringBuffer(ReplacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(ReplacementList.length());	  StringBuffer    buf    =    new    StringBuffer(replacementList.length()    +    2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
39	[BUG]  [BUGGY]  StringBuilder  buf  =  new  StringBuffer(replacementList.length());  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StringBuilder  buf  =  new  StringBuffer(replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuilder  buf  =  new  StringBuffer(replacementList.length());	  StringBuffer    buf    =    new    StringBuffer(replacementList.length()    +    2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
40	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(searchList.length);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(searchList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(searchList.length);	  String[]    replacementList    =    getReplacementList(searchList);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
41	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(replacementList);  [CE]  <identifier>  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(replacementList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(replacementList);	  String[]    replacementList    =    getReplacementList(searchList);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
42	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(searchList,  false);  [CE]  <identifier>  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(searchList,  false);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(searchList,  false);	  String[]    replacementList    =    getReplacementList(searchList);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
43	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  +  3);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  increase  +  3);	  int    timeToLive    =    Math.min(replacementList.length(),    increase    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  +  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  increase  +  2);	  int    timeToLive    =    Math.min(replacementList.length(),    increase    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0]);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[0]);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
46	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	List  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList[i]);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList[i]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(searchList[i]);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  for(String  i  =  0;  i  <  searchList.length;  i++)  {  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  for(String  i  =  0;  i  <  searchList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(String  i  =  0;  i  <  searchList.length;  i++)  {	  for(String    i    =    0;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
49	[BUG]  [BUGGY]  for(String  i  =  0;  i  <  this.replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(String  i  =  0;  i  <  this.replacementList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(String  i  =  0;  i  <  this.replacementList.length;  i++)  {	  for(String    i    =    0;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
50	[BUG]  [BUGGY]  for(String  i  =  1;  i  <  replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(String  i  =  1;  i  <  replacementList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(String  i  =  1;  i  <  replacementList.length;  i++)  {	  for(String    i    =    0;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
51	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
52	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  -  2);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
53	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  +  1);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length  +  1);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
54	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  3);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length,  3);	  int    timeToLive    =    Math.max(replacementList.length,    3);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length()  -  1;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.searchList.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length()  -  2;  i++)  {  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length()  -  2;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.searchList.length()  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length()  +  1;  i++)  {  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length()  +  1;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.searchList.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }	  int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
59	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }	  int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
60	[BUG]  [BUGGY]  int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }	  int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
61	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  1);	  StringBuffer    buf    =    new    StringBuffer(searchList.length());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
62	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  -  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(searchList.length()  -  1);	  StringBuffer    buf    =    new    StringBuffer(searchList.length());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
63	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  2);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  2);	  StringBuffer    buf    =    new    StringBuffer(searchList.length());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
64	[BUG]  [BUGGY]  StringBuilder  buf  =  new  StringBuilder(searchList.length()  +  1);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StringBuilder  buf  =  new  StringBuilder(searchList.length()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuilder  buf  =  new  StringBuilder(searchList.length()  +  1);	  StringBuffer    buf    =    new    StringBuffer(searchList.length());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
65	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  2);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length,  2);	  int    timeToLive    =    Math.min(replacementList.length,    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]    ==    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
67	[BUG]  [BUGGY]  StringBuilder  buf  =  new  StringBuilder(replacementList.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StringBuilder  buf  =  new  StringBuilder(replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuilder  buf  =  new  StringBuilder(replacementList.length());	  StringBuffer    buf    =    new    StringBuffer(replacementList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
68	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList.length);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(searchList.length);	  Set    <    String>    replacementList    =    Sets.newHashSet(searchList);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList.size());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList.size());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(searchList.size());	  Set    <    String>    replacementList    =    Sets.newHashSet(searchList);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
70	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(searchList);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(searchList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	List  <  String>  replacementList  =  Sets.newHashSet(searchList);	  Set    <    String>    replacementList    =    Sets.newHashSet(searchList);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length  -  1;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length  -  2;  i++)  {  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length  -  2;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length  -  2;  i++)  {  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length  -  2;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.searchList.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.size());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.size());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList.size());	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
75	[BUG]  [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
76	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	List  <  String>  replacementList  =  Sets.newHashSet(replacementList);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
77	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  5);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  5);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  5);	  int    timeToLive    =    Math.min(replacementList.length(),    3);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length()  -  1;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.replacementList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length()  -  2;  i++)  {  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length()  -  2;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length()  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.replacementList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  2  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  2  *  greater;  }	  for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length  -  2;  i++)  {  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length  -  2;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.replacementList.length    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
82	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	List  <  String>  replacementList  =  Sets.newHashSet();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
83	[BUG]  [BUGGY]  List  <  String>  replacementList  =  Sets.newArrayList();  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  replacementList  =  Sets.newArrayList();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	List  <  String>  replacementList  =  Sets.newArrayList();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
84	[BUG]  [BUGGY]  Collection  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Collection  <  String>  replacementList  =  Sets.newHashSet();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
85	[BUG]  [BUGGY]  if(replacementList!=  null)  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(replacementList!=  null)  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList!=  null)  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);  }	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length  -  1;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacements.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.replacements.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length  -  2;  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length  -  2;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacements.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    this.replacements.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.selectionList.length;  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.selectionList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.selectionList.length;  i++)  {	  for(int    i    =    0;    i    <    selectionList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  searchList.length;  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  1;  i  <  searchList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  1;  i  <  searchList.length;  i++)  {	  for(int    i    =    1;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  this.replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  1;  i  <  this.replacementList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  1;  i  <  this.replacementList.length;  i++)  {	  for(int    i    =    1;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  2;  i  <  replacementList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  2;  i  <  replacementList.length;  i++)  {	  for(int    i    =    1;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  2  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  2  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  replacementList.length();  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  1;  i  <  replacementList.length();  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  1;  i  <  replacementList.length();  i++)  {	  for(int    i    =    0;    i    <    replacementList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
94	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(searchList.length(),  replacementList.length());	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
95	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length());	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(searchList[i]    ==    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  replacementList.length  -  1;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	ArrayList  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);	  Set    <    String>    replacementList    =    Sets.newHashSet(replacementList[i]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
99	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  *  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  increase  *  1);	  int    timeToLive    =    Math.min(replacementList.length(),    increase    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
100	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacements.length());  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacements.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(replacements.length());	  StringBuffer    buf    =    new    StringBuffer(replacementList.length()    -    1);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
101	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  replacementList.length);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
102	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(searchList.length(),  replacementList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(searchList.length(),  replacementList.length);	  int    timeToLive    =    Math.min(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
103	[BUG]  [BUGGY]  int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }	  for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
104	[BUG]  [BUGGY]  PersonnelUtils.checkState(replacementList[i]  ==  null);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  PersonnelUtils.checkState(replacementList[i]  ==  null);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	PersonnelUtils.checkState(replacementList[i]  ==  null);	  if(replacementList[i]    ==    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
105	[BUG]  [BUGGY]  PersonnelUtils.checkState(replacementList[i]!=  null);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  PersonnelUtils.checkState(replacementList[i]!=  null);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	PersonnelUtils.checkState(replacementList[i]!=  null);	  if(replacementList[i]    ==    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
106	[BUG]  [BUGGY]  PersonnelUtils.checkNotNull(replacementList[i]);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  PersonnelUtils.checkNotNull(replacementList[i]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	PersonnelUtils.checkNotNull(replacementList[i]);	  if(replacementList[i]    ==    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
107	[BUG]  [BUGGY]  safeReplacement(replacementList[i]);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeReplacement(replacementList[i]);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	safeReplacement(replacementList[i]);	  if(replacementList[i]    ==    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
108	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    larger;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
109	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length());	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
110	[BUG]  [BUGGY]  Annotations.checkNotNull(replacementList);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Annotations.checkNotNull(replacementList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Annotations.checkNotNull(replacementList);	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
111	[BUG]  [BUGGY]  Annotation[]  replacementList  =  getReplacementList();  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Annotation[]  replacementList  =  getReplacementList();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Annotation[]  replacementList  =  getReplacementList();	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
112	[BUG]  [BUGGY]  safeReplacement(replacementList);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeReplacement(replacementList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	safeReplacement(replacementList);	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
113	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length);  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  replacementList.length);	  int    timeToLive    =    Math.max(replacementList.length(),    searchList.length);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
114	[BUG]  [BUGGY]  for(String  i  =  1;  i  <  searchList.length;  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(String  i  =  1;  i  <  searchList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(String  i  =  1;  i  <  searchList.length;  i++)  {	  for(int    i    =    1;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
115	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  0);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length,  0);	  int    timeToLive    =    Math.min(replacementList.length,    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
116	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  searchList.length);	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
117	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  +  3);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  increase  +  3);	  int    timeToLive    =    Math.max(replacementList.length(),    increase    +    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
118	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  +  2);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  increase  +  2);	  int    timeToLive    =    Math.max(replacementList.length(),    increase    +    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
119	[BUG]  [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	ArrayList  <  String>  replacementList  =  Sets.newHashSet();	  Set    <    String>    replacementList    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
120	[BUG]  [BUGGY]  PersonnelUtils.checkNotNull(replacementList);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  PersonnelUtils.checkNotNull(replacementList);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	PersonnelUtils.checkNotNull(replacementList);	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
121	[BUG]  [BUGGY]  for(String  i  =  0;  i  <  replacementList.length();  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(String  i  =  0;  i  <  replacementList.length();  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(String  i  =  0;  i  <  replacementList.length();  i++)  {	  for(int    i    =    0;    i    <    replacementList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
122	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Integer  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Integer  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }	  int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
123	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
125	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  3);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(searchList.length()  +  3);	  StringBuffer    buf    =    new    StringBuffer(searchList.length());    	non-compiled	[CE]  <identifier>  expected	35	None	replace
126	[BUG]  [BUGGY]  String[]  replacementList  =  super.replacementList(searchList,  null);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  super.replacementList(searchList,  null);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  super.replacementList(searchList,  null);	  String[]    replacementList    =    super.replacementList();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
127	[BUG]  [BUGGY]  String[]  replacementList  =  super.replacementList(this);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  super.replacementList(this);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  super.replacementList(this);	  String[]    replacementList    =    super.replacementList();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length  +  1;  i++)  {  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length  +  1;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacements.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    this.replacements.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
129	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(null,  false);  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(null,  false);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(null,  false);	  String[]    replacementList    =    getReplacementList(null);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  2  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  2  *  greater;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(searchList[i]    ==    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
131	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(false,  null);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(false,  null);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(false,  null);	  String[]    replacementList    =    getReplacementList(true);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
132	[BUG]  [BUGGY]  long  timeToLive  =  Math.max(replacementList.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  long  timeToLive  =  Math.max(replacementList.length(),  searchList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	long  timeToLive  =  Math.max(replacementList.length(),  searchList.length);	  long    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
133	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(replacementList,  false);  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(replacementList,  false);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList().toArray(replacementList,  false);	  String[]    replacementList    =    getReplacementList().toArray(replacementList);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
134	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(replacements);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String[]  replacementList  =  getReplacementList(replacements);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(replacements);	  String[]    replacementList    =    getReplacementList(searchList);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
135	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  0);  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  0);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  0);	  int    timeToLive    =    Math.max(replacementList.length(),    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
136	[BUG]  [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  }	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
137	[BUG]  [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  3  *  greater;  }	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
138	[BUG]  [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  3  *  greater;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  increase  +=  3  *  greater;  }	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
139	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  replacementList.length);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  replacementList.length);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  replacementList.length);	  int    timeToLive    =    Math.max(replacementList.length,    searchList.length);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
140	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  ];  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.size()  ];  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.size()  ];	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
141	[BUG]  [BUGGY]  this.replacementList[i]  =  replacementList[i].trim();  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  this.replacementList[i]  =  replacementList[i].trim();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	this.replacementList[i]  =  replacementList[i].trim();	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
142	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  ];  [CE]  <identifier>  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length()  ];  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.length()  ];	  if(replacementList[i]!=    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
143	[BUG]  [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length];  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  MutableString[]  replacementList  =  new  MutableString[replacementList.length];  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	MutableString[]  replacementList  =  new  MutableString[replacementList.length];	  if(replacementList[i]    ==    null)    {    for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
144	[BUG]  [BUGGY]  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length());  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length());  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	{  StringBuffer  buf  =  new  StringBuffer(replacementList.length());	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
145	[BUG]  [BUGGY]  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  -  1);  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	{  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  -  1);	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
146	[BUG]  [BUGGY]  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	{  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
147	[BUG]  [BUGGY]  Class  <?>  replacementList  =  getReplacementList();  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  replacementList  =  getReplacementList();  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Class  <?>  replacementList  =  getReplacementList();	  if(replacementList!=    null)    {    StringBuffer    buf    =    new    StringBuffer(replacementList.length());    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
148	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  0;  i  <  replacementList.length;  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	For(int  i  =  0;  i  <  replacementList.length;  i++)  {	  for(int    i    =    1;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchingList.length();  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchingList.length();  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchingList.length();  i++)  {	  for(int    i    =    0;    i    <    searchList.length()    -    1;    i++)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  larger;  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  larger;  }  [BUGGY]      for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  larger;  }	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.size();  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.size();  i++)  {  [BUGGY]      int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.size();  i++)  {	  for(int    i    =    0;    i    <    this.replacementList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
