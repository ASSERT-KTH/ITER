bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  +  1);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  increase  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  increase  +  1);	      int    timeToLive    =    Math.min(replacementList.length(),    increase);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  3);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  3);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  3);	      int    timeToLive    =    Math.min(replacementList.length(),    increase);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  1);	      int    timeToLive    =    Math.min(replacementList.length(),    increase);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(true);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  String[]  replacementList  =  getReplacementList(true);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(true);	      String[]    replacementList    =    getReplacementList();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(null);  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  String[]  replacementList  =  getReplacementList(null);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(null);	      String[]    replacementList    =    getReplacementList();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList(searchList);  [CE]  <identifier>  expected  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  String[]  replacementList  =  getReplacementList(searchList);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList(searchList);	      String[]    replacementList    =    getReplacementList();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length();  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length();  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.searchList.length();  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  this.searchList.length  -  1;  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.searchList.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.searchList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length();  i++)  {  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length();  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length();  i++)  {	  for(int    i    =    0;    i    <    this.replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  this.replacementList.length  -  1;  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacementList.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet();  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet();  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet();	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
12	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList[i]);	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(searchList);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(searchList);	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  replacementList  =  Sets.newHashSet(replacementList);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	Set  <  String>  replacementList  =  Sets.newHashSet(replacementList);	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
18	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  3);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  3);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  3);	      int    timeToLive    =    Math.max(replacementList.length,    greater);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
19	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  1);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  1);	      int    timeToLive    =    Math.max(replacementList.length,    greater);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
20	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  2);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  2);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  2);	      int    timeToLive    =    Math.max(replacementList.length,    greater);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
21	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  1);  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length,  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length,  1);	      int    timeToLive    =    Math.max(replacementList.length,    greater);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
22	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  3);  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  3);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  3);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  1);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  1);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  2);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  2);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  2);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  4);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  4);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  4);	      int    timeToLive    =    Math.max(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]  ==  null)  {  increase  +=  3  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  2  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  larger;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length;  i++)  {  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  this.replacements.length;  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  this.replacements.length;  i++)  {	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  1;  i  <  replacementList.length;  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  1;  i  <  replacementList.length;  i++)  {	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length());  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length());	      int    timeToLive    =    Math.max(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length());  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length());	      int    timeToLive    =    Math.max(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  1);	      StringBuffer    buf    =    new    StringBuffer(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
35	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length());  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  StringBuffer  buf  =  new  StringBuffer(searchList.length());  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(searchList.length());	      StringBuffer    buf    =    new    StringBuffer(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
36	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  -  1);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(replacementList.length()  -  1);	      StringBuffer    buf    =    new    StringBuffer(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  2);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  2);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	StringBuffer  buf  =  new  StringBuffer(replacementList.length()  +  2);	      StringBuffer    buf    =    new    StringBuffer(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length();  i++)  {  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length();  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length();  i++)  {	  for(int    i    =    0;    i    <    searchList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchList.length()  -  1;  i++)  {  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  searchList.length()  -  1;  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  searchList.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    searchList.length();    i++)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  2);  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  2);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  2);	      int    timeToLive    =    Math.min(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
41	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  4);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  4);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  4);	      int    timeToLive    =    Math.min(replacementList.length(),    greater);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  +  1);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  increase  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  increase  +  1);	      int    timeToLive    =    Math.max(replacementList.length(),    increase);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.min(replacementList.length(),  searchList.length);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.min(replacementList.length(),  searchList.length);	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
44	[BUG]  [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  timeToLive);  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  long  timeToLive  =  Math.min(replacementList.length(),  timeToLive);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	long  timeToLive  =  Math.min(replacementList.length(),  timeToLive);	      int    timeToLive    =    Math.min(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
45	[BUG]  [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(replacementList);  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  String[]  replacementList  =  getReplacementList().toArray(replacementList);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  getReplacementList().toArray(replacementList);	      String[]    replacementList    =    getReplacementList();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length);  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length(),  searchList.length);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length(),  searchList.length);	      int    timeToLive    =    Math.max(replacementList.length(),    timeToLive);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
47	[BUG]  [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length);  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  timeToLive  =  Math.max(replacementList.length,  searchList.length);  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  timeToLive  =  Math.max(replacementList.length,  searchList.length);	      int    timeToLive    =    Math.max(replacementList.length,    greater);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	int  i  =  0;  i  <  replacementList.length;  i++)  {  if(replacementList[i]!=  null)  {  increase  +=  3  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(replacementList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  replacementList.length;  i++)  {  if(searchList[i]  ==  null)  {  increase  +=  3  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
50	[BUG]  [BUGGY]  for(String  i  =  0;  i  <  replacementList.length;  i++)  {  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  for(String  i  =  0;  i  <  replacementList.length;  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(String  i  =  0;  i  <  replacementList.length;  i++)  {	  for(int    i    =    0;    i    <    replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  if(replacementList!=  null)  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length());  }  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(replacementList!=  null)  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length());  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList!=  null)  {  StringBuffer  buf  =  new  StringBuffer(replacementList.length());  }	      StringBuffer    buf    =    new    StringBuffer(replacementList.length());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
53	[BUG]  [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  2  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    2    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  selectionList.length;  i++)  {  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  for(int  i  =  0;  i  <  selectionList.length;  i++)  {  [BUGGY]    int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	for(int  i  =  0;  i  <  selectionList.length;  i++)  {	  for(int    i    =    0;    i    <    this.replacementList.length;    i++)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
56	[BUG]  [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]  ==  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
57	[BUG]  [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  }  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  }  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	if(replacementList[i]!=  null)  {  for(int  i  =  0;  i  <  searchList.length;  i++)  {  if(searchList[i]!=  null)  {  increase  +=  3  *  greater;  }  }	      for(int    i    =    0;    i    <    searchList.length;    i++)    {    if(searchList[i]!=    null)    {    increase    +=    3    *    greater;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  String[]  replacementList  =  super.replacementList();  [CE]  <identifier>  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  String[]  replacementList  =  super.replacementList();  [BUGGY]    for  (int  i  =  0;  i  <  searchList.length;  i++)  {  int  greater  =  replacementList[i].length()  -  searchList[i].length();  if  (greater  >  0)  {  increase  +=  3  *  greater;  //  assume  3  matches  }  }  increase  =  Math.min(increase,  text.length()  /  5);  StringBuilder  buf  =  new  StringBuilder(text.length()  +  increase);  [CLASS]  StringUtils  [METHOD]  replaceEach  [RETURN_TYPE]  String  String  text  String[]  searchList  String[]  replacementList  boolean  repeat  int  timeToLive  	projects/Lang39/src/java/org/apache/commons/lang3/StringUtils.java	0.7071067811865475	3675	3675	1	replace	String[]  replacementList  =  super.replacementList();	      String[]    replacementList    =    getReplacementList();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
