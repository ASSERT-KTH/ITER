bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  order  =  resultOffset  *  n;  [CE]  cannot  find  symbol  function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  order  =  resultOffset  *  n;  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  order  =  resultOffset  *  n;	      int    order    =    n    *    resultOffset;    	non-compiled	[CE]  cannot  find  symbol  function	11	None	replace
2	[BUG]  [BUGGY]  int  order  =  n  /  resultOffset;  [CE]  cannot  find  symbol  function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  order  =  n  /  resultOffset;  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  order  =  n  /  resultOffset;	      int    order    =    n    *    resultOffset;    	non-compiled	[CE]  cannot  find  symbol  function	11	None	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  resultOffset];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	add	double[]  function  =  new  double[2  +  resultOffset];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	12	replace
4	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  resultOffset];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  resultOffset];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]  function  =  new  double[2  +  resultOffset];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	12	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	add	double[]  function  =  new  double[1];	  double[]    function    =    new    double[1    +    n];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	12	replace
6	[BUG]  [BUGGY]  double[]  function  =  new  double[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]  function  =  new  double[1];	  double[]    function    =    new    double[1    +    n];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	12	replace
7	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  resultOffset  +  1);  [CE]  cannot  find  symbol  function  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  n  =  Math.max(resultOffset,  resultOffset  +  1);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	n  =  Math.max(resultOffset,  resultOffset  +  1);	      n    =    Math.max(resultOffset,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol  function	8	None	replace
8	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  resultOffset);  [CE]  cannot  find  symbol  function  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  n  =  Math.min(resultOffset,  resultOffset);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	n  =  Math.min(resultOffset,  resultOffset);	      n    =    Math.max(resultOffset,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol  function	8	None	replace
9	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  double[]  function  =  new  double[1  +  resultOffset];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    resultOffset];    double[]  function  =  new  double[1  +  resultOffset];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	1	None	add
10	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  Double[]  function  =  new  double[1  +  resultOffset];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  Double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    resultOffset];    Double[]  function  =  new  double[1  +  resultOffset];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	1	None	add
11	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  double[]  function  =  new  double[1  +  n];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  double[]  function  =  new  double[1  +  n];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    resultOffset];    double[]  function  =  new  double[1  +  n];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	1	None	add
12	[BUG]  [BUGGY]  int  n  =  Math.min(resultOffset,  resultOffset);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  n  =  Math.min(resultOffset,  resultOffset);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  n  =  Math.min(resultOffset,  resultOffset);	      	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	5	None	replace
13	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset);  [CE]  cannot  find  symbol  function  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  n  =  Math.abs(resultOffset);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	n  =  Math.abs(resultOffset);	      	non-compiled	[CE]  cannot  find  symbol  function	5	None	replace
14	[BUG]  [BUGGY]  double[][]  n  =  resultOffset  *  Math.abs(resultOffset  +  1);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[][]  n  =  resultOffset  *  Math.abs(resultOffset  +  1);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[][]  n  =  resultOffset  *  Math.abs(resultOffset  +  1);	      double[][]    n    =    resultOffset    *    Math.abs(resultOffset);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	12	None	replace
15	[BUG]  [BUGGY]  double[][]  resultOffset  =  resultOffset  *  Math.abs(resultOffset);  [CE]  variable  resultOffset  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[][]  resultOffset  =  resultOffset  *  Math.abs(resultOffset);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[][]  resultOffset  =  resultOffset  *  Math.abs(resultOffset);	      double[][]    n    =    resultOffset    *    Math.abs(resultOffset);    	non-compiled	[CE]  variable  resultOffset  is  already  defined  in  method  rootN(double[],int,int,double[],int)	12	None	replace
16	[BUG]  [BUGGY]  double[][]  order  =  new  double[1  +  resultOffset];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[][]  order  =  new  double[1  +  resultOffset];  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[][]  order  =  new  double[1  +  resultOffset];	      double[][]    order    =    new    double[1    +    n];    	non-compiled	[CE]  incompatible  types	9	None	replace
17	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  n];  double[]  function  =  new  double[1  +  n];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  n];  double[]  function  =  new  double[1  +  n];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    n];    double[]  function  =  new  double[1  +  n];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	3	None	add
18	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  n];  Double[]  function  =  new  double[1  +  n];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  n];  Double[]  function  =  new  double[1  +  n];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    n];    Double[]  function  =  new  double[1  +  n];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	3	None	add
19	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  n];  int  n  =  Math.min(resultOffset,  resultOffset);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  n];  int  n  =  Math.min(resultOffset,  resultOffset);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    n];    int  n  =  Math.min(resultOffset,  resultOffset);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	3	None	add
20	[BUG]  [BUGGY]  double[][]  order  =  new  double[2  +  resultOffset];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[][]  order  =  new  double[2  +  resultOffset];  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[][]  order  =  new  double[2  +  resultOffset];	      double[][]    order    =    new    double[2    +    n];    	non-compiled	[CE]  incompatible  types	15	None	replace
21	[BUG]  [BUGGY]  int  order  =  resultOffset  *  Math.pow(1  +  n);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  order  =  resultOffset  *  Math.pow(1  +  n);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  order  =  resultOffset  *  Math.pow(1  +  n);	      int    order    =    n    *    Math.pow(1    +    n);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	16	None	replace
22	[BUG]  [BUGGY]  int  order  =  n  *  Math.pow(resultOffset,  1  +  n);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  order  =  n  *  Math.pow(resultOffset,  1  +  n);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  order  =  n  *  Math.pow(resultOffset,  1  +  n);	      int    order    =    n    *    Math.pow(1    +    n);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
23	[BUG]  [BUGGY]  double[]  order  =  new  double[1  +  resultOffset];  [CE]  cannot  find  symbol  function  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  order  =  new  double[1  +  resultOffset];  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]  order  =  new  double[1  +  resultOffset];	      double[]    order    =    new    double[1    +    n];    	non-compiled	[CE]  cannot  find  symbol  function	6	None	replace
24	[BUG]  [BUGGY]  double[]  order  =  new  double[1  +  n  +  1];  [CE]  cannot  find  symbol  function  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  order  =  new  double[1  +  n  +  1];  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]  order  =  new  double[1  +  n  +  1];	      double[]    order    =    new    double[1    +    n];    	non-compiled	[CE]  cannot  find  symbol  function	6	None	replace
25	[BUG]  [BUGGY]      int  order  =  n  *  resultOffset;  int  order  =  n  *  resultOffset;  [CE]  variable  order  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]      int  order  =  n  *  resultOffset;  int  order  =  n  *  resultOffset;  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	        int    order    =    n    *    resultOffset;    int  order  =  n  *  resultOffset;	  	non-compiled	[CE]  variable  order  is  already  defined  in  method  rootN(double[],int,int,double[],int)	10	None	add
26	[BUG]  [BUGGY]      int  order  =  n  *  resultOffset;  Int  order  =  n  *  resultOffset;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]      int  order  =  n  *  resultOffset;  Int  order  =  n  *  resultOffset;  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	        int    order    =    n    *    resultOffset;    Int  order  =  n  *  resultOffset;	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
27	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  double[]  function  =  new  double[2  +  order];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[2    +    order];    double[]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	13	None	add
28	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  final  double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  final  double[]  function  =  new  double[2  +  order];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[2    +    order];    final  double[]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	13	None	add
29	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  int[]  order  =  new  double[2  +  order];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  int[]  order  =  new  double[2  +  order];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[2    +    order];    int[]  order  =  new  double[2  +  order];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	add
30	[BUG]  [BUGGY]  double[][]  n  =  resultOffset  *  Math.abs(resultOffset  +  2);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[][]  n  =  resultOffset  *  Math.abs(resultOffset  +  2);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[][]  n  =  resultOffset  *  Math.abs(resultOffset  +  2);	      double[][]    n    =    resultOffset    *    Math.abs(resultOffset);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	12	None	replace
31	[BUG]  [BUGGY]  int  order  =  n  *  resultOffset  +  1;  [CE]  cannot  find  symbol  function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  order  =  n  *  resultOffset  +  1;  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  order  =  n  *  resultOffset  +  1;	      int    order    =    n    *    resultOffset;    	non-compiled	[CE]  cannot  find  symbol  function	11	None	replace
32	[BUG]  [BUGGY]  n  =  Math.max(result,  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  n  =  Math.max(result,  resultOffset);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	n  =  Math.max(result,  resultOffset);	      n    =    Math.max(resultOffset,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	8	None	replace
33	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  int  n  =  Math.min(resultOffset,  n);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  int  n  =  Math.min(resultOffset,  n);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    resultOffset];    int  n  =  Math.min(resultOffset,  n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	1	None	add
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset  -  1];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	add	double[]  function  =  new  double[1  +  resultOffset  -  1];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	12	replace
35	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset  -  1];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]  function  =  new  double[1  +  resultOffset  -  1];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	12	replace
36	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  Double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  Double[]  function  =  new  double[2  +  order];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[2    +    order];    Double[]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	13	None	add
37	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  int  order  =  n  *  Math.pow(1  +  n);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  int  order  =  n  *  Math.pow(1  +  n);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[2    +    order];    int  order  =  n  *  Math.pow(1  +  n);	  	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	13	None	add
38	[BUG]  [BUGGY]  int  order  =  n  *  Math.pow(1  +  resultOffset);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  order  =  n  *  Math.pow(1  +  resultOffset);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  order  =  n  *  Math.pow(1  +  resultOffset);	      int    order    =    n    *    Math.pow(1    +    n);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	16	None	replace
39	[BUG]  [BUGGY]  int  n  =  Math.abs(resultOffset);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  n  =  Math.abs(resultOffset);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  n  =  Math.abs(resultOffset);	      	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	5	None	replace
40	[BUG]  [BUGGY]  int  n  =  Math.min(result,  n);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  n  =  Math.min(result,  n);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  n  =  Math.min(result,  n);	      	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	5	None	replace
41	[BUG]  [BUGGY]  int  order  =  n  *  Math.pow(1  +  resultOffset,  n);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int  order  =  n  *  Math.pow(1  +  resultOffset,  n);  [BUGGY]    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	int  order  =  n  *  Math.pow(1  +  resultOffset,  n);	      int    order    =    n    *    Math.pow(1    +    n);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
42	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  int[][]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  int[][]  function  =  new  double[2  +  order];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[2    +    order];    int[][]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  rootN(double[],int,int,double[],int)	13	None	add
43	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  n];  int  n  =  Math.min(resultOffset,  n);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  n];  int  n  =  Math.min(resultOffset,  n);  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]    function    =    new    double[1    +    n];    int  n  =  Math.min(resultOffset,  n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	3	None	add
44	[BUG]  [BUGGY]  double[]  function  =  new  double[1]  +  resultOffset];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1]  +  resultOffset];  [BUGGY]    double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	947	947	1	replace	double[]  function  =  new  double[1]  +  resultOffset];	  double[]    function    =    new    double[1    +    n];    	non-compiled	[CE]  ';'  expected	4	None	replace
