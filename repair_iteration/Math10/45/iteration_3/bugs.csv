bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
2	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
4	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
6	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	15	11	add
8	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	15	11	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;  function[i]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;	  	compilable	  [FE]  AssertionError  	8	1	add
10	[BUG]  [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;  function[i]  =  inv;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;  function[i]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;	  	compilable	  [FE]  AssertionError  	8	1	add
11	[BUG]  [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  xk[i]  =  inv;  function[i]  =  inv;  [CE]  array  required,  but  double  found  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  xk[i]  =  inv;  function[i]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        function[i]    =    inv;    xk[i]  =  inv;  function[i]  =  inv;	  	non-compiled	[CE]  array  required,  but  double  found	8	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;  function[i]  =  xk;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        function[i]    =    inv;    function[i]  =  inv;  function[i]  =  xk;	  	compilable	  [FE]  AssertionError  	8	1	add
13	[BUG]  [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;  function[i]  =  xk;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    function[i]  =  inv;  function[i]  =  inv;  function[i]  =  xk;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        function[i]    =    inv;    function[i]  =  inv;  function[i]  =  xk;	  	compilable	  [FE]  AssertionError  	8	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -n);    function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	27	11	add
15	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -n);    function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	27	11	add
16	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  Function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [CE]  cannot  find  symbol  Function  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  Function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -n);    Function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);	  	non-compiled	[CE]  cannot  find  symbol  Function	27	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	27	11	add
18	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	27	11	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]  =  xk;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]  =  xk;  xk  =  FastMath.pow(inv,  -n);	  function[i]    =    inv;    xk    =    FastMath.pow(inv,    -n);    	compilable	  [FE]  AssertionError  	28	11	replace
20	[BUG]  [BUGGY]  function[i]  =  xk;  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]  =  xk;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]  =  xk;  xk  =  FastMath.pow(inv,  -n);	  function[i]    =    inv;    xk    =    FastMath.pow(inv,    -n);    	compilable	  [FE]  AssertionError  	28	11	replace
21	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  -1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  double  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	double  xk  =  FastMath.pow(inv,  -1);	  double    xk    =    FastMath.pow(inv,    -i);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	7	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]  =  xk;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]  =  xk;  xk  *=  inv;	  function[i]    =    inv;    xk    *=    inv;    	compilable	  [FE]  AssertionError  	11	11	replace
23	[BUG]  [BUGGY]  function[i]  =  xk;  xk  *=  inv;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]  =  xk;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]  =  xk;  xk  *=  inv;	  function[i]    =    inv;    xk    *=    inv;    	compilable	  [FE]  AssertionError  	11	11	replace
24	[BUG]  [BUGGY]  function[i]  =  coefficient;  xk  *=  inv;  [CE]  cannot  find  symbol  coefficient  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]  =  coefficient;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]  =  coefficient;  xk  *=  inv;	  function[i]    =    inv;    xk    *=    inv;    	non-compiled	[CE]  cannot  find  symbol  coefficient	11	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	xk    =    FastMath.pow(inv,    -n    +    1);    xk  =  FastMath.pow(inv,  -n  +  1);	  	compilable	  [FE]  AssertionError  	17	12	add
26	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  xk  =  FastMath.pow(inv,  -n  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	xk    =    FastMath.pow(inv,    -n    +    1);    xk  =  FastMath.pow(inv,  -n  +  1);	  	compilable	  [FE]  AssertionError  	17	12	add
27	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  double  xk  =  FastMath.pow(inv,  -n  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  double  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	xk    =    FastMath.pow(inv,    -n    +    1);    double  xk  =  FastMath.pow(inv,  -n  +  1);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	17	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -i);    function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	29	12	add
29	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -i);    function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	29	12	add
30	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  Function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [CE]  cannot  find  symbol  Function  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  Function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -i);    Function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);	  	non-compiled	[CE]  cannot  find  symbol  Function	29	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	29	12	add
32	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	29	12	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  =  FastMath.pow(inv,  n);  xk  =  FastMath.pow(inv,  n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	xk    =    FastMath.pow(inv,    n);    xk  =  FastMath.pow(inv,  n);	  	compilable	  [FE]  AssertionError  	32	12	add
34	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  n);  xk  =  FastMath.pow(inv,  n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  =  FastMath.pow(inv,  n);  xk  =  FastMath.pow(inv,  n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	xk    =    FastMath.pow(inv,    n);    xk  =  FastMath.pow(inv,  n);	  	compilable	  [FE]  AssertionError  	32	12	add
35	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  n);  double  xk  =  FastMath.pow(inv,  n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  =  FastMath.pow(inv,  n);  double  xk  =  FastMath.pow(inv,  n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	xk    =    FastMath.pow(inv,    n);    double  xk  =  FastMath.pow(inv,  n);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	32	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -2);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);	  	compilable	  [FE]  AssertionError  	24	12	add
37	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -2);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);	  	compilable	  [FE]  AssertionError  	24	12	add
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  2);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -2);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  2);	  	compilable	  [FE]  AssertionError  	24	12	add
39	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  2);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -2);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  2);	  	compilable	  [FE]  AssertionError  	24	12	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  function[0]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[0]    =    inv;    function[0]  =  inv;	  	compilable	  [FE]  AssertionError  	1	1	add
41	[BUG]  [BUGGY]  function[0]  =  inv;  function[0]  =  inv;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  function[0]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]    =    inv;    function[0]  =  inv;	  	compilable	  [FE]  AssertionError  	1	1	add
42	[BUG]  [BUGGY]  function[0]  =  inv;  Function[0]  =  inv;  [CE]  cannot  find  symbol  Function  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  Function[0]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]    =    inv;    Function[0]  =  inv;	  	non-compiled	[CE]  cannot  find  symbol  Function	1	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[0]    =    inv;    xk  *=  inv;	  	compilable	  [FE]  AssertionError  	1	12	add
44	[BUG]  [BUGGY]  function[0]  =  inv;  xk  *=  inv;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]    =    inv;    xk  *=  inv;	  	compilable	  [FE]  AssertionError  	1	12	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  xk;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[0]  =  xk;	  function[0]    =    inv;    	compilable	  [FE]  AssertionError  	2	12	replace
46	[BUG]  [BUGGY]  function[0]  =  xk;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  xk;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]  =  xk;	  function[0]    =    inv;    	compilable	  [FE]  AssertionError  	2	12	replace
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[1]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[1]  =  inv;	  function[0]    =    inv;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	12	replace
48	[BUG]  [BUGGY]  function[1]  =  inv;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[1]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[1]  =  inv;	  function[0]    =    inv;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	12	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -n);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	19	11	add
50	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -n);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	19	11	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -n);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	19	11	add
52	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -n);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	19	11	add
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -n);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	19	11	add
54	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -n);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	19	11	add
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  function[i]  =  inv;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    *=    inv;    function[i]  =  inv;  xk  *=  inv;	  	compilable	  [FE]  AssertionError  	10	12	add
56	[BUG]  [BUGGY]  function[i]    =    inv;    xk  *=  inv;  function[i]  =  inv;  xk  *=  inv;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  function[i]  =  inv;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    *=    inv;    function[i]  =  inv;  xk  *=  inv;	  	compilable	  [FE]  AssertionError  	10	12	add
57	[BUG]  [BUGGY]  function[i]    =    inv;    xk  *=  inv;  Function[i]  =  inv;  xk  *=  inv;  [CE]  cannot  find  symbol  Function  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  Function[i]  =  inv;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    *=    inv;    Function[i]  =  inv;  xk  *=  inv;	  	non-compiled	[CE]  cannot  find  symbol  Function	10	None	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    *=    inv;    xk  *=  inv;	  	compilable	  [FE]  AssertionError  	10	12	add
59	[BUG]  [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  *=  inv;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    *=    inv;    xk  *=  inv;	  	compilable	  [FE]  AssertionError  	10	12	add
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	22	12	add
61	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	22	12	add
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	22	12	add
63	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	22	12	add
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -i);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	3	12	add
65	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -i);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	3	12	add
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -i);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	3	12	add
67	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -i);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	3	12	add
68	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  if(function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  if(function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -n);    if(function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);	  	non-compiled	[CE]  ')'  expected	27	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    *=    inv;    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	10	11	add
70	[BUG]  [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    *=    inv;    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	10	11	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]        =        inv;        xk    *=    inv;    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	10	12	add
72	[BUG]  [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    *=    inv;    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	10	12	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	15	11	add
74	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	15	11	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	15	12	add
76	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	15	12	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
78	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	13	12	add
79	[BUG]  [BUGGY]  function[i]  =  coefficient;  xk  =  FastMath.pow(inv,  -i);  [CE]  cannot  find  symbol  coefficient  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]  =  coefficient;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]  =  coefficient;  xk  =  FastMath.pow(inv,  -i);	  function[i]    =    inv;    xk    =    FastMath.pow(inv,    -i);    	non-compiled	[CE]  cannot  find  symbol  coefficient	30	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[0]  =  inv;  xk  =  FastMath.pow(inv,  -i);	  function[i]    =    inv;    xk    =    FastMath.pow(inv,    -i);    	compilable	  [FE]  AssertionError  	30	11	replace
81	[BUG]  [BUGGY]  function[0]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]  =  inv;  xk  =  FastMath.pow(inv,  -i);	  function[i]    =    inv;    xk    =    FastMath.pow(inv,    -i);    	compilable	  [FE]  AssertionError  	30	11	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[0]    =    inv;    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	1	11	add
83	[BUG]  [BUGGY]  function[0]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]    =    inv;    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	1	11	add
84	[BUG]  [BUGGY]  n  =  FastMath.pow(inv,  -n);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  n  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	n  =  FastMath.pow(inv,  -n);	          xk    =    FastMath.pow(inv,    -n);    xk    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
85	[BUG]  [BUGGY]  function[i]  =  coefficient;  xk  =  FastMath.pow(inv,  -n);  [CE]  cannot  find  symbol  coefficient  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]  =  coefficient;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]  =  coefficient;  xk  =  FastMath.pow(inv,  -n);	  function[i]    =    inv;    xk    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  cannot  find  symbol  coefficient	28	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -i);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  i);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	3	12	add
87	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  i);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -i);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  i);  xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	3	12	add
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	22	12	add
89	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	22	12	add
90	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  if(function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  if(function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -i);    if(function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);	  	non-compiled	[CE]  ')'  expected	29	None	add
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -3);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -2);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -3);	  	compilable	  [FE]  AssertionError  	24	12	add
92	[BUG]  [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -3);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]          xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);  xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -3);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	                xk        =        FastMath.pow(inv,        -1);        xk    =    FastMath.pow(inv,    -2);    xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -3);	  	compilable	  [FE]  AssertionError  	24	12	add
93	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  double  xk  =  FastMath.pow(inv,  -n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -n);    double  xk  =  FastMath.pow(inv,  -n);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	27	None	add
94	[BUG]  [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  double  xk  =  FastMath.pow(inv,  -i);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);  double  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    =    FastMath.pow(inv,    -i);    double  xk  =  FastMath.pow(inv,  -i);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	29	None	add
95	[BUG]  [BUGGY]  function[0]  =  inv;  double  function[0]  =  inv;  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[0]  =  inv;  double  function[0]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]    =    inv;    double  function[0]  =  inv;	  	non-compiled	[CE]  ']'  expected	1	None	add
96	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  double  xk  =  FastMath.pow(inv,  n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	double  xk  =  FastMath.pow(inv,  n);	  double    xk    =    FastMath.pow(inv,    -i);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	7	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	xk  *=  inv;	  function[i]    =    inv;    xk    *=    inv;    	compilable	  [FE]  AssertionError  	11	12	replace
98	[BUG]  [BUGGY]  xk  *=  inv;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  xk  *=  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	xk  *=  inv;	  function[i]    =    inv;    xk    *=    inv;    	compilable	  [FE]  AssertionError  	11	12	replace
99	[BUG]  [BUGGY]  function[i]    =    inv;    xk  *=  inv;  double  xk  =  FastMath.pow(inv,  -n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    *=    inv;    double  xk  =  FastMath.pow(inv,  -n);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	10	None	add
100	[BUG]  [BUGGY]  function[i]    =    inv;    xk  *=  inv;  double  xk  =  FastMath.pow(inv,  -i);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  function[i]    =    inv;    xk  *=  inv;  double  xk  =  FastMath.pow(inv,  -i);  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]        =        inv;        xk    *=    inv;    double  xk  =  FastMath.pow(inv,  -i);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	10	None	add
101	[BUG]  [BUGGY]  double  function[i]  =  inv;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {      [BUGGY]  double  function[i]  =  inv;  [BUGGY]      xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	double  function[i]  =  inv;	  function[i]    =    inv;    double    function[i]    =    inv;    	non-compiled	[CE]  ']'  expected	31	None	replace
