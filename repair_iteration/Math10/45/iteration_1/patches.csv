bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[0]  =  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[0]  =  inv;	  function[i]    =    inv;    	compilable	  [FE]  AssertionError  	7	11	replace
2	[BUG]  [BUGGY]  function[0]  =  inv;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[0]  =  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[0]  =  inv;	  function[i]    =    inv;    	compilable	  [FE]  AssertionError  	7	11	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	4	12	add
4	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -i);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -i);    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	4	12	add
5	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -i);  xk  =  fastMath.pow(inv,  -i);  [CE]  cannot  find  symbol  fastMath  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -i);  xk  =  fastMath.pow(inv,  -i);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -i);    xk  =  fastMath.pow(inv,  -i);	  	non-compiled	[CE]  cannot  find  symbol  fastMath	4	None	add
6	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  -n  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  double  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	double  xk  =  FastMath.pow(inv,  -n  +  1);	      double    xk    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	3	None	replace
7	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  -i);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  double  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	double  xk  =  FastMath.pow(inv,  -i);	      double    xk    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	3	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  function[i]  =  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]    =    inv;    function[i]  =  inv;	  	compilable	  [FE]  AssertionError  	6	1	add
9	[BUG]  [BUGGY]  function[i]  =  inv;  function[i]  =  inv;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  function[i]  =  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]    =    inv;    function[i]  =  inv;	  	compilable	  [FE]  AssertionError  	6	1	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  xk  *=  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]    =    inv;    xk  *=  inv;	  	compilable	  [FE]  AssertionError  	6	12	add
11	[BUG]  [BUGGY]  function[i]  =  inv;  xk  *=  inv;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  xk  *=  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]    =    inv;    xk  *=  inv;	  	compilable	  [FE]  AssertionError  	6	12	add
12	[BUG]  [BUGGY]  function[i]  =  inv;  Function[i]  =  inv;  [CE]  cannot  find  symbol  Function  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  Function[i]  =  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]    =    inv;    Function[i]  =  inv;	  	non-compiled	[CE]  cannot  find  symbol  Function	6	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	8	12	add
14	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -1);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -1);	  	compilable	  [FE]  AssertionError  	8	12	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	8	11	add
16	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	8	11	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	xk  =  FastMath.pow(inv,  -n  +  1);	      xk    =    FastMath.pow(inv,    -n);    	compilable	  [FE]  AssertionError  	2	12	replace
18	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	xk  =  FastMath.pow(inv,  -n  +  1);	      xk    =    FastMath.pow(inv,    -n);    	compilable	  [FE]  AssertionError  	2	12	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	1	11	add
20	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -n);  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -n);    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	1	11	add
21	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -n);  double  xk  =  FastMath.pow(inv,  -n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -n);  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -n);    double  xk  =  FastMath.pow(inv,  -n);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	1	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	8	12	add
23	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	8	12	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);	  	compilable	  [FE]  AssertionError  	8	12	add
25	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -1);  xk  =  FastMath.pow(inv,  -2);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -1);    xk  =  FastMath.pow(inv,  -2);	  	compilable	  [FE]  AssertionError  	8	12	add
26	[BUG]  [BUGGY]      xk  =  FastMath.pow(inv,  -i);  double  xk  =  FastMath.pow(inv,  -i);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]      xk  =  FastMath.pow(inv,  -i);  double  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	        xk    =    FastMath.pow(inv,    -i);    double  xk  =  FastMath.pow(inv,  -i);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	4	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	6	11	add
28	[BUG]  [BUGGY]  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]    =    inv;    xk  =  FastMath.pow(inv,  -n);	  	compilable	  [FE]  AssertionError  	6	11	add
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	6	12	add
30	[BUG]  [BUGGY]  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  xk  =  FastMath.pow(inv,  -i);  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]    =    inv;    xk  =  FastMath.pow(inv,  -i);	  	compilable	  [FE]  AssertionError  	6	12	add
31	[BUG]  [BUGGY]  function[i]  =  inv;  double  function[i]  =  inv;  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  function[i]  =  inv;  double  function[i]  =  inv;  [BUGGY]    xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	function[i]    =    inv;    double  function[i]  =  inv;	  	non-compiled	[CE]  ']'  expected	6	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  xk  =  FastMath.pow(inv,  n);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	add	xk  =  FastMath.pow(inv,  n);	      xk    =    FastMath.pow(inv,    -i);    	compilable	  [FE]  AssertionError  	5	12	replace
33	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {    [BUGGY]  xk  =  FastMath.pow(inv,  n);  [BUGGY]    function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	897	897	1	replace	xk  =  FastMath.pow(inv,  n);	      xk    =    FastMath.pow(inv,    -i);    	compilable	  [FE]  AssertionError  	5	12	replace
