bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    rootN(tmp2,  0,  2,  tmp1,  0);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	add	    rootN(tmp2,  0,  2,  tmp1,  0);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	14	1
2	[BUG]  [BUGGY]    rootN(tmp2,  0,  2,  tmp1,  0);  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    rootN(tmp2,  0,  2,  tmp1,  0);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    rootN(tmp2,  0,  2,  tmp1,  0);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	14	1	add
2	[BUG]  [BUGGY]    double[]  x  =  new  double[getSize()  ];  rootN(tmp2,  0,  2,  tmp1,  0);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    double[]  x  =  new  double[getSize()  ];  rootN(tmp2,  0,  2,  tmp1,  0);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    double[]  x  =  new  double[getSize()  ];  rootN(tmp2,  0,  2,  tmp1,  0);		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	14	None	add
3	[BUG]  [BUGGY]    double[]  x  =  new  double[getSize()  ];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    double[]  x  =  new  double[getSize()  ];  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    double[]  x  =  new  double[getSize()  ];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	14	None	add
5	[BUG]  [BUGGY]    rootN(tmp2,  0,  2,  tmp1,  0);  resultOffset  =  Math.sqrt(resultOffset)+  x;  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    rootN(tmp2,  0,  2,  tmp1,  0);  resultOffset  =  Math.sqrt(resultOffset)+  x;  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    rootN(tmp2,  0,  2,  tmp1,  0);  resultOffset  =  Math.sqrt(resultOffset)+  x;		non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	add
11	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(xOffset  >  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(xOffset  >  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(xOffset  >  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[xOffset]!=  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[xOffset]!=  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[xOffset]!=  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(xOffset]!=  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(xOffset]!=  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(xOffset]!=  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[xOffset]  ==  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[xOffset]  ==  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[xOffset]  ==  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	  	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[resultOffset()  ];  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]  double[]  tmp1  =  new  double[resultOffset()  ];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  tmp1  =  new  double[resultOffset()  ];	double[]  tmp1  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
23	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[getResultOffset()  ];  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]  double[]  tmp1  =  new  double[getResultOffset()  ];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  tmp1  =  new  double[getResultOffset()  ];	double[]  tmp1  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  tmp1  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	  	double[]  tmp1  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol  tmp1	1	None	replace
31	[BUG]  [BUGGY]    -  x  divide(y,  xOffset,  tmp1,  0,  tmp2,  0);  [CE]  not  a  statement  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    -  x  divide(y,  xOffset,  tmp1,  0,  tmp2,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    -  x  divide(y,  xOffset,  tmp1,  0,  tmp2,  0);		non-compiled	[CE]  not  a  statement	18	None	add
32	[BUG]  [BUGGY]    -  x  divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  [CE]  not  a  statement  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    -  x  divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    -  x  divide(x,  yOffset,  tmp1,  0,  tmp2,  0);		non-compiled	[CE]  not  a  statement	18	None	add
33	[BUG]  [BUGGY]    -  x  divide(y,  xOffset,  tmp1,  0,  0);  [CE]  not  a  statement  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    -  x  divide(y,  xOffset,  tmp1,  0,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    -  x  divide(y,  xOffset,  tmp1,  0,  0);		non-compiled	[CE]  not  a  statement	18	None	add
34	[BUG]  [BUGGY]    -  x  divide(y,  xOffset,  tmp1,  0,  2);  [CE]  not  a  statement  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    -  x  divide(y,  xOffset,  tmp1,  0,  2);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    -  x  divide(y,  xOffset,  tmp1,  0,  2);		non-compiled	[CE]  not  a  statement	18	None	add
35	[BUG]  [BUGGY]    ||  r  >  x)  {  result[resultOffset]  =  0;  [CE]  illegal  start  of  expression  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    ||  r  >  x)  {  result[resultOffset]  =  0;  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    ||  r  >  x)  {  result[resultOffset]  =  0;		non-compiled	[CE]  illegal  start  of  expression	18	None	add
41	[BUG]  [BUGGY]    double[]  x  =  new  double[getSize()  ];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  x  =  new  double[getSize()  ];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  x  =  new  double[getSize()  ];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
42	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  tmp2  =  new  double[getSize()  ];		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
43	[BUG]  [BUGGY]    double[]  x  =  new  double[resultOffset];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  x  =  new  double[resultOffset];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  x  =  new  double[resultOffset];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
44	[BUG]  [BUGGY]    double[]  tmp1  =  new  double[getSize()  ];  [CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  tmp1  =  new  double[getSize()  ];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  tmp1  =  new  double[getSize()  ];		non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
45	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getResultOffset()  ];  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  tmp2  =  new  double[getResultOffset()  ];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  tmp2  =  new  double[getResultOffset()  ];		non-compiled	[CE]  cannot  find  symbol	4	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	add	    atan(tmp1,  0,  tmp2,  0);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	20	1
52	[BUG]  [BUGGY]    atan(tmp1,  0,  tmp2,  0);  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    atan(tmp1,  0,  tmp2,  0);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	20	1	add
52	[BUG]  [BUGGY]    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);		non-compiled	[CE]  illegal  start  of  expression	20	None	add
53	[BUG]  [BUGGY]    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	20	None	add
54	[BUG]  [BUGGY]    /(r  -  x))  atan(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    /(r  -  x))  atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    /(r  -  x))  atan(tmp1,  0,  tmp2,  0);		non-compiled	[CE]  illegal  start  of  expression	20	None	add
55	[BUG]  [BUGGY]    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    /(r  -  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
62	[BUG]  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(x  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(x  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  tmp2,  0);  //  atan(x  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  if(xOffset  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  cannot  find  symbol  i  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  if(xOffset  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	if(xOffset  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
64	[BUG]  [BUGGY]  atan(tmp2,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp2,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp2,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  if(resultOffset)  {  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  if(resultOffset)  {  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	if(resultOffset)  {  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
72	[BUG]  [BUGGY]  if(resultOffset)  {  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x  <  2  double[]  tmp2  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  if(resultOffset)  {  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x  <  2  double[]  tmp2  =  new  double[getSize()  ];  }  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	if(resultOffset)  {  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x  <  2  double[]  tmp2  =  new  double[getSize()  ];  }	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
73	[BUG]  [BUGGY]  if(xOffset  ==  0)  {  xOffset  =  xOffset  +  tmp1,  0;  //  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [CE]  ';'  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  if(xOffset  ==  0)  {  xOffset  =  xOffset  +  tmp1,  0;  //  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	if(xOffset  ==  0)  {  xOffset  =  xOffset  +  tmp1,  0;  //  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  ';'  expected	3	None	replace
74	[BUG]  [BUGGY]  if(xOffset  ==  0)  {  double[]  tmp2  =  new  double[getSize()  ];  }  [CE]  cannot  find  symbol  tmp2  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  if(xOffset  ==  0)  {  double[]  tmp2  =  new  double[getSize()  ];  }  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	if(xOffset  ==  0)  {  double[]  tmp2  =  new  double[getSize()  ];  }	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol  tmp2	3	None	replace
82	[BUG]  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset);  [CE]  possible  loss  of  precision  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    resultOffset  =  Math.sqrt(resultOffset);		non-compiled	[CE]  possible  loss  of  precision	6	None	add
83	[BUG]  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset,  xOffset);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset,  xOffset);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    resultOffset  =  Math.sqrt(resultOffset,  xOffset);		non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	6	None	add
84	[BUG]  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset,  yOffset);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset,  yOffset);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    resultOffset  =  Math.sqrt(resultOffset,  yOffset);		non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	6	None	add
85	[BUG]  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset  +  x);  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    resultOffset  =  Math.sqrt(resultOffset  +  x);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    resultOffset  =  Math.sqrt(resultOffset  +  x);		non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	add
91	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(resultOffset  >  0)  {  if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(resultOffset  >  0)  {  if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
92	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  if(x[xOffset]  >=  0)  {  tmp2  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(resultOffset  >  0)  {  if(x[xOffset]  >=  0)  {  tmp2  =  new  double[getSize()  ];  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(resultOffset  >  0)  {  if(x[xOffset]  >=  0)  {  tmp2  =  new  double[getSize()  ];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
93	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  if(x[xOffset]  ==  0)  {  tmp1  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(resultOffset  >  0)  {  if(x[xOffset]  ==  0)  {  tmp1  =  new  double[getSize()  ];  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(resultOffset  >  0)  {  if(x[xOffset]  ==  0)  {  tmp1  =  new  double[getSize()  ];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
94	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  if(x[yOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(resultOffset  >  0)  {  if(x[yOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(resultOffset  >  0)  {  if(x[yOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
95	[BUG]  [BUGGY]    double[]  y  =  new  double[getSize()  ];  [CE]  variable  y  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    double[]  y  =  new  double[getSize()  ];  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    double[]  y  =  new  double[getSize()  ];		non-compiled	[CE]  variable  y  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	8	None	add
102	[BUG]  [BUGGY]  multiply(x,  yOffset,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  multiply(x,  yOffset,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	multiply(x,  yOffset,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
103	[BUG]  [BUGGY]  multiply(x,  yOffset,  y,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  multiply(x,  yOffset,  y,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	multiply(x,  yOffset,  y,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
111	[BUG]  [BUGGY]  divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
112	[BUG]  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(x,  yOffset,  tmp2,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
113	[BUG]  [BUGGY]  if(xOffset  ==  0)  {  divide(y,  xOffset,  tmp2,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  }  else  {  result[resultOffset  +  i]  [CE]  cannot  find  symbol  i  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  if(xOffset  ==  0)  {  divide(y,  xOffset,  tmp2,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  }  else  {  result[resultOffset  +  i]  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	if(xOffset  ==  0)  {  divide(y,  xOffset,  tmp2,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  }  else  {  result[resultOffset  +  i]	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
114	[BUG]  [BUGGY]  if(xOffset  ==  0)  {  divide(y,  xOffset,  tmp1,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  }  else  {  result[resultOffset  +  i]  [CE]  cannot  find  symbol  i  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  if(xOffset  ==  0)  {  divide(y,  xOffset,  tmp1,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  }  else  {  result[resultOffset  +  i]  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	if(xOffset  ==  0)  {  divide(y,  xOffset,  tmp1,  0,  tmp2,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  }  else  {  result[resultOffset  +  i]	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
121	[BUG]  [BUGGY]    double[]  x  =  new  double[getSize()  ];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  x  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    double[]  x  =  new  double[getSize()  ];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	2	None	add
122	[BUG]  [BUGGY]    final  double[]  x  =  new  double[getSize()  ];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    final  double[]  x  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    final  double[]  x  =  new  double[getSize()  ];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	2	None	add
123	[BUG]  [BUGGY]    double[]  x  =  new  double[resultOffset];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  x  =  new  double[resultOffset];  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    double[]  x  =  new  double[resultOffset];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	2	None	add
124	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    double[]  tmp2  =  new  double[getSize()  ];		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	2	None	add
125	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  if(xOffset  >  0)  {  result  =  new  double[resultOffset];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    if(resultOffset  >  0)  {  if(xOffset  >  0)  {  result  =  new  double[resultOffset];  }  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    if(resultOffset  >  0)  {  if(xOffset  >  0)  {  result  =  new  double[resultOffset];  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
131	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
132	[BUG]  [BUGGY]  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
133	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  }  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
134	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  <  2  +  y  >>  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  <  2  +  y  >>  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  <  2  +  y  >>  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]  if(x[resultOffset]  >  0)  {  [BUGGY]    add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	add	if(x[resultOffset]  >  0)  {	if  (x[xOffset]  >=  0)  {  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	13	1
142	[BUG]  [BUGGY]  if(x[resultOffset]  >  0)  {  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]  if(x[resultOffset]  >  0)  {  [BUGGY]    add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	if(x[resultOffset]  >  0)  {	if  (x[xOffset]  >=  0)  {  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	13	1	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]  if(x[resultOffset]  >=  0)  {  [BUGGY]    add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	add	if(x[resultOffset]  >=  0)  {	if  (x[xOffset]  >=  0)  {  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	13	1
145	[BUG]  [BUGGY]  if(x[resultOffset]  >=  0)  {  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]  if(x[resultOffset]  >=  0)  {  [BUGGY]    add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	if(x[resultOffset]  >=  0)  {	if  (x[xOffset]  >=  0)  {  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	13	1	replace
151	[BUG]  [BUGGY]    result[resultOffset  +  x]  =  x[xOffset++];  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    result[resultOffset  +  x]  =  x[xOffset++];  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    result[resultOffset  +  x]  =  x[xOffset++];		non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	add
152	[BUG]  [BUGGY]    result[resultOffset  +  x]  =  0;  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    result[resultOffset  +  x]  =  0;  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    result[resultOffset  +  x]  =  0;		non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	add
153	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    result[resultOffset]  =  x[xOffset];  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	    result[resultOffset]  =  x[xOffset];		compilable	  [FE]  AssertionError  testAtan2SpecialCases	16	1
154	[BUG]  [BUGGY]    result[resultOffset]  =  x[xOffset];  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    result[resultOffset]  =  x[xOffset];  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    result[resultOffset]  =  x[xOffset];		compilable	  [FE]  AssertionError  testAtan2SpecialCases	16	1	add
155	[BUG]  [BUGGY]    result[resultOffset]  =  x[xOffset++];  [CE]  final  parameter  xOffset  may  not  be  assigned  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    result[resultOffset]  =  x[xOffset++];  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    result[resultOffset]  =  x[xOffset++];		non-compiled	[CE]  final  parameter  xOffset  may  not  be  assigned	16	None	add
162	[BUG]  [BUGGY]  double[]  tmp2  =  new  double[resultOffset()  ];  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]  double[]  tmp2  =  new  double[resultOffset()  ];  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	double[]  tmp2  =  new  double[resultOffset()  ];	double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
163	[BUG]  [BUGGY]  double[]  tmp2  =  new  double[getItemCount()  ];  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]  double[]  tmp2  =  new  double[getItemCount()  ];  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	double[]  tmp2  =  new  double[getItemCount()  ];	double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
164	[BUG]  [BUGGY]  double[]  tmp2  =  new  double[getLength()  ];  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]  double[]  tmp2  =  new  double[getLength()  ];  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	double[]  tmp2  =  new  double[getLength()  ];	double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
171	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    double[]  tmp2  =  new  double[getSize()  ];		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	12	None	add
172	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp1,  0,  tmp2,  0);  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp1,  0,  tmp2,  0);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp1,  0,  tmp2,  0);		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	12	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    tmp1  =  new  double[getSize()  ];  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	add	    tmp1  =  new  double[getSize()  ];		compilable	  [FE]  AssertionError  testAtan2SpecialCases	12	1
174	[BUG]  [BUGGY]    tmp1  =  new  double[getSize()  ];  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    tmp1  =  new  double[getSize()  ];  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    tmp1  =  new  double[getSize()  ];		compilable	  [FE]  AssertionError  testAtan2SpecialCases	12	1	add
174	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    double[]  tmp2  =  new  double[getSize()  ];  add(tmp1,  0,  tmp2,  0,  tmp2,  0);		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	12	None	add
181	[BUG]  [BUGGY]  if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]  if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }	add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
182	[BUG]  [BUGGY]  if(xOffset  ==  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]  if(xOffset  ==  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(xOffset  ==  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +	add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
183	[BUG]  [BUGGY]  if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]  if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +	add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
184	[BUG]  [BUGGY]  if(xOffset  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]  if(xOffset  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(xOffset  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  else  {  result[resultOffset  +	add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
191	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    double[]  tmp2  =  new  double[getSize()  ];		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	10	None	add
192	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  }  [CE]  method  rootN  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  }		non-compiled	[CE]  method  rootN  in  class  DSCompiler  cannot  be  applied  to  given  types;	10	None	add
193	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  rootN(tmp2,  0,  2,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  rootN(tmp2,  0,  2,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  rootN(tmp2,  0,  2,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
194	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
195	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  2,  tmp1,  0);  if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
1	[BUG]  [BUGGY]  atan(tmp1,  0,  tmp2,  0,  tmp2);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp1,  0,  tmp2,  0,  tmp2);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  tmp2,  0,  tmp2);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]  atan(tmp1,  0,  tmp2);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp1,  0,  tmp2);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  tmp2);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
3	[BUG]  [BUGGY]  atan(tmp1,  0,  tmp2,  0,  tmp2.length);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp1,  0,  tmp2,  0,  tmp2.length);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  tmp2,  0,  tmp2.length);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  atan(tmp1,  0,  tmp2,  0,  xOffset));  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  ';'  expected  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp1,  0,  tmp2,  0,  xOffset));  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  tmp2,  0,  xOffset));  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  ';'  expected	19	None	replace
21	[BUG]  [BUGGY]    double[]  x  =(double[])result.clone();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  x  =(double[])result.clone();  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  x  =(double[])result.clone();		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
23	[BUG]  [BUGGY]    double[]  x  =(double[])result;  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  x  =(double[])result;  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  x  =(double[])result;		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
24	[BUG]  [BUGGY]    double[]  x  =(double[])resultOffset;  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  x  =(double[])resultOffset;  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  x  =(double[])resultOffset;		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
25	[BUG]  [BUGGY]    double[]  x  =(double[])resultOffset.clone();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  x  =(double[])resultOffset.clone();  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  x  =(double[])resultOffset.clone();		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	4	None	add
44	[BUG]  [BUGGY]  double[]  tmp1  =  new  double(getSize()  -  1);  [CE]  '['  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]  double[]  tmp1  =  new  double(getSize()  -  1);  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  tmp1  =  new  double(getSize()  -  1);	double[]  tmp1  =  new  double[getSize()];  	non-compiled	[CE]  '['  expected	1	None	replace
61	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
62	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  if(x[xOffset]  >=  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
63	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
64	[BUG]  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
65	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  tmp1  =  new  double[getSize()  ];  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	add	    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	12	1
83	[BUG]  [BUGGY]    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	12	1	add
83	[BUG]  [BUGGY]    if(xOffset  ==  0)  {  x  =  xOffset;  if(xOffset  >  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    if(xOffset  ==  0)  {  x  =  xOffset;  if(xOffset  >  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    if(xOffset  ==  0)  {  x  =  xOffset;  if(xOffset  >  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
84	[BUG]  [BUGGY]    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  [CE]  method  rootN  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  rootN(tmp1,  0,  tmp2,  0,  tmp2,  0);		non-compiled	[CE]  method  rootN  in  class  DSCompiler  cannot  be  applied  to  given  types;	12	None	add
85	[BUG]  [BUGGY]    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  rootN(tmp1,  0,  tmp2,  0,  tmp2);  [CE]  method  rootN  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  rootN(tmp1,  0,  tmp2,  0,  tmp2);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    System.arraycopy(y,  0,  tmp1,  0,  resultOffset);  rootN(tmp1,  0,  tmp2,  0,  tmp2);		non-compiled	[CE]  method  rootN  in  class  DSCompiler  cannot  be  applied  to  given  types;	12	None	add
101	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    double[]  tmp2  =  new  double[getSize()  ];		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	16	None	add
102	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  atan(x,  yOffset,  tmp1,  0,  tmp2,  0);  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  atan(x,  yOffset,  tmp1,  0,  tmp2,  0);  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    double[]  tmp2  =  new  double[getSize()  ];  atan(x,  yOffset,  tmp1,  0,  tmp2,  0);		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	16	None	add
103	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp2,  0,  tmp2,  0);  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp2,  0,  tmp2,  0);  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp2,  0,  tmp2,  0);		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	16	None	add
104	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  atan(x,  yOffset,  tmp2,  0,  tmp2,  0);  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  atan(x,  yOffset,  tmp2,  0,  tmp2,  0);  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    double[]  tmp2  =  new  double[getSize()  ];  atan(x,  yOffset,  tmp2,  0,  tmp2,  0);		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	16	None	add
105	[BUG]  [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp1,  0,  tmp2,  0);  [CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp1,  0,  tmp2,  0);  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    double[]  tmp2  =  new  double[getSize()  ];  multiply(x,  yOffset,  tmp1,  0,  tmp2,  0);		non-compiled	[CE]  variable  tmp2  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	16	None	add
121	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  rootN  =(double[])result.clone();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	    double[]  rootN  =(double[])result.clone();		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1
122	[BUG]  [BUGGY]    double[]  rootN  =(double[])result.clone();  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  rootN  =(double[])result.clone();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    double[]  rootN  =(double[])result.clone();		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    final  double[]  rootN  =(double[])result.clone();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	    final  double[]  rootN  =(double[])result.clone();		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1
123	[BUG]  [BUGGY]    final  double[]  rootN  =(double[])result.clone();  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    final  double[]  rootN  =(double[])result.clone();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    final  double[]  rootN  =(double[])result.clone();		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1	add
123	[BUG]  [BUGGY]    final  double[]  x  =(double[])resultOffset.doubleValue();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    final  double[]  x  =(double[])resultOffset.doubleValue();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    final  double[]  x  =(double[])resultOffset.doubleValue();		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	2	None	add
124	[BUG]  [BUGGY]    final  double[]  rootN  =(double[])resultOffset.clone();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    final  double[]  rootN  =(double[])resultOffset.clone();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    final  double[]  rootN  =(double[])resultOffset.clone();		non-compiled	[CE]  int  cannot  be  dereferenced	2	None	add
125	[BUG]  [BUGGY]    final  double[]  rootN  =(double[])resultOffset.asToken();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    final  double[]  rootN  =(double[])resultOffset.asToken();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    final  double[]  rootN  =(double[])resultOffset.asToken();		non-compiled	[CE]  int  cannot  be  dereferenced	2	None	add
141	[BUG]  [BUGGY]    tmp1,  0,  2,  tmp1,  0);  [CE]  not  a  statement  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    tmp1,  0,  2,  tmp1,  0);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    tmp1,  0,  2,  tmp1,  0);		non-compiled	[CE]  not  a  statement	14	None	add
143	[BUG]  [BUGGY]    double[]  x  =(double[])resultOffset.doubleValue();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    double[]  x  =(double[])resultOffset.doubleValue();  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    double[]  x  =(double[])resultOffset.doubleValue();		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	14	None	add
144	[BUG]  [BUGGY]    double[]  x  =(double[])result.clone();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    double[]  x  =(double[])result.clone();  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    double[]  x  =(double[])result.clone();		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	14	None	add
145	[BUG]  [BUGGY]    double[]  x  =(double[])result.doubleValue();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    double[]  x  =(double[])result.doubleValue();  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    double[]  x  =(double[])result.doubleValue();		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	14	None	add
161	[BUG]  [BUGGY]  if(x[r]  >=  0)  {  [CE]  cannot  find  symbol  r  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]  if(x[r]  >=  0)  {  [BUGGY]    add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	if(x[r]  >=  0)  {	if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  cannot  find  symbol  r	13	None	replace
181	[BUG]  [BUGGY]  //  x  <  2  double[]  tmp2  =  new  double[getSize()  ];  [CE]  cannot  find  symbol  tmp2  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  //  x  <  2  double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	//  x  <  2  double[]  tmp2  =  new  double[getSize()  ];	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol  tmp2	3	None	replace
183	[BUG]  [BUGGY]  //  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  [CE]  cannot  find  symbol  tmp2  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  //  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	//  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol  tmp2	3	None	replace
184	[BUG]  [BUGGY]  //  x  >=  2  double[]  tmp2  =  new  double[getSize()  ];  [CE]  cannot  find  symbol  tmp2  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  //  x  >=  2  double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	//  x  >=  2  double[]  tmp2  =  new  double[getSize()  ];	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  cannot  find  symbol  tmp2	3	None	replace
203	[BUG]  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(x,  yOffset,  tmp2,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
204	[BUG]  [BUGGY]  divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(x,  yOffset,  tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
221	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[xOffset]!=  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[xOffset]!=  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[xOffset]!=  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
222	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[xOffset]  >=  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[xOffset]  >=  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[xOffset]  >=  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
223	[BUG]  [BUGGY]  rootN(tmp2,  0,  x,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y)if(x[yOffset]  >=  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp2,  0,  x,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y)if(x[yOffset]  >=  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp2,  0,  x,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y)if(x[yOffset]  >=  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
224	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[yOffset]  >=  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[yOffset]  >=  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp2,  0);  //  r  =  sqrt(x  >>  2  +  xOffset)if(x[yOffset]  >=  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
241	[BUG]  [BUGGY]    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  multiply(tmp1,  0,  x,  yOffset,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  multiply(tmp1,  0,  x,  yOffset,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  multiply(tmp1,  0,  x,  yOffset,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
242	[BUG]  [BUGGY]    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  add(tmp2,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  add(tmp2,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  add(tmp2,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
243	[BUG]  [BUGGY]    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  add(tmp2,  0,  tmp2,  0,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  add(tmp2,  0,  tmp2,  0,  tmp1,  0);  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[resultOffset]  >=  0)  {  if(x[resultOffset]  ==  0)  {  add(tmp2,  0,  tmp2,  0,  tmp1,  0);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
244	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  xOffset,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  xOffset,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  xOffset,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
245	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  xOffset,  tmp2,  0,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  xOffset,  tmp2,  0,  tmp1,  0);  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  add(tmp1,  0,  xOffset,  tmp2,  0,  tmp1,  0);  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
301	[BUG]  [BUGGY]    ||(x[yOffset]  >=  0))  {  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    ||(x[yOffset]  >=  0))  {  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    ||(x[yOffset]  >=  0))  {  add(tmp1,  0,  x,  yOffset,  tmp2,  0);		non-compiled	[CE]  illegal  start  of  expression	18	None	add
302	[BUG]  [BUGGY]    ||(x[yOffset]  >=  0))  {  add(tmp2,  0,  x,  yOffset,  tmp1,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    ||(x[yOffset]  >=  0))  {  add(tmp2,  0,  x,  yOffset,  tmp1,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    ||(x[yOffset]  >=  0))  {  add(tmp2,  0,  x,  yOffset,  tmp1,  0);		non-compiled	[CE]  illegal  start  of  expression	18	None	add
303	[BUG]  [BUGGY]    ||(x[yOffset]  >=  0))  {  add(tmp2,  0,  x,  yOffset,  tmp2,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    ||(x[yOffset]  >=  0))  {  add(tmp2,  0,  x,  yOffset,  tmp2,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    ||(x[yOffset]  >=  0))  {  add(tmp2,  0,  x,  yOffset,  tmp2,  0);		non-compiled	[CE]  illegal  start  of  expression	18	None	add
304	[BUG]  [BUGGY]    r  =  sqrt(x[xOffset]);  [CE]  cannot  find  symbol  r  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    r  =  sqrt(x[xOffset]);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    r  =  sqrt(x[xOffset]);		non-compiled	[CE]  cannot  find  symbol  r	18	None	add
305	[BUG]  [BUGGY]    r  =  sqrt(x[xOffset]?  1  :  0);  [CE]  cannot  find  symbol  r  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    r  =  sqrt(x[xOffset]?  1  :  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    r  =  sqrt(x[xOffset]?  1  :  0);		non-compiled	[CE]  cannot  find  symbol  r	18	None	add
321	[BUG]  [BUGGY]  if(y[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(y[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(y[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
322	[BUG]  [BUGGY]  if(yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  ')'  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  ')'  expected	7	None	replace
323	[BUG]  [BUGGY]  if(x[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(x[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(x[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
324	[BUG]  [BUGGY]  if(y[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(y[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(y[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0,  tmp2,  0,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
341	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
342	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  >>  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  >>  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  >>  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
343	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  >>  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
361	[BUG]  [BUGGY]    +  rootN(tmp1,  0,  2,  tmp1,  0);  [CE]  not  a  statement  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    +  rootN(tmp1,  0,  2,  tmp1,  0);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    +  rootN(tmp1,  0,  2,  tmp1,  0);		non-compiled	[CE]  not  a  statement	6	None	add
362	[BUG]  [BUGGY]    +  y[xOffset]  rootN(tmp1,  0,  2,  tmp1,  0);  [CE]  not  a  statement  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    +  y[xOffset]  rootN(tmp1,  0,  2,  tmp1,  0);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    +  y[xOffset]  rootN(tmp1,  0,  2,  tmp1,  0);		non-compiled	[CE]  not  a  statement	6	None	add
363	[BUG]  [BUGGY]    y  =  rootN(tmp1,  0,  2,  tmp1,  0);  [CE]  incompatible  types  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    y  =  rootN(tmp1,  0,  2,  tmp1,  0);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    y  =  rootN(tmp1,  0,  2,  tmp1,  0);		non-compiled	[CE]  incompatible  types	6	None	add
364	[BUG]  [BUGGY]    +  y[xOffset]  rootN(tmp1,  0,  2,  tmp2,  0);  [CE]  not  a  statement  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    +  y[xOffset]  rootN(tmp1,  0,  2,  tmp2,  0);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    +  y[xOffset]  rootN(tmp1,  0,  2,  tmp2,  0);		non-compiled	[CE]  not  a  statement	6	None	add
365	[BUG]  [BUGGY]    +  y[xOffset]  rootN(tmp1,  0,  2);  [CE]  not  a  statement  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    +  y[xOffset]  rootN(tmp1,  0,  2);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    +  y[xOffset]  rootN(tmp1,  0,  2);		non-compiled	[CE]  not  a  statement	6	None	add
382	[BUG]  [BUGGY]    multiply(x,  yOffset,  tmp1,  0,  tmp2.length);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    multiply(x,  yOffset,  tmp1,  0,  tmp2.length);  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    multiply(x,  yOffset,  tmp1,  0,  tmp2.length);		non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	8	None	add
383	[BUG]  [BUGGY]    multiply(x,  yOffset,  tmp1,  0,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    multiply(x,  yOffset,  tmp1,  0,  resultOffset);  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    multiply(x,  yOffset,  tmp1,  0,  resultOffset);		non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	8	None	add
384	[BUG]  [BUGGY]    multiply(x,  yOffset,  tmp1,  0,  tmp2);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    multiply(x,  yOffset,  tmp1,  0,  tmp2);  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    multiply(x,  yOffset,  tmp1,  0,  tmp2);		non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	8	None	add
385	[BUG]  [BUGGY]    multiply(x,  resultOffset,  y,  tmp1,  0,  0);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    multiply(x,  resultOffset,  y,  tmp1,  0,  0);  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    multiply(x,  resultOffset,  y,  tmp1,  0,  0);		non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	8	None	add
1	[BUG]  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  return(tmp1,  0,  tmp2,  0);  }  [CE]  ')'  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  return(tmp1,  0,  tmp2,  0);  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  return(tmp1,  0,  tmp2,  0);  }		non-compiled	[CE]  ')'  expected	8	None	add
2	[BUG]  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
3	[BUG]  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  break;  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
4	[BUG]  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  return(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  ')'  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  return(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  return(tmp1,  0,  tmp2,  0,  tmp2,  0);  }		non-compiled	[CE]  ')'  expected	8	None	add
5	[BUG]  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);      //  x^2  +  y^2    rootN(tmp2,  0,  2,  tmp1,  0);            //  r  =  sqrt(x^2  +  y^2)  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	    if(y[xOffset]  >=  0)  {  if(y[xOffset]  ==  0)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
31	[BUG]  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  return;  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
32	[BUG]  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  break;  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
33	[BUG]  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[yOffset]  >=  0)  {  if(x[yOffset]  ==  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
34	[BUG]  [BUGGY]    if(y[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(y[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  return;  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(y[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
35	[BUG]  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  return;  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	    if(x[xOffset]  >=  0)  {  if(x[xOffset]  ==  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
61	[BUG]  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits);  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    .setMaximumFractionDigits(maximumFractionDigits);		non-compiled	[CE]  illegal  start  of  expression	14	None	add
62	[BUG]  [BUGGY]    .setMaximumFractionDigits(-x);  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    .setMaximumFractionDigits(-x);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    .setMaximumFractionDigits(-x);		non-compiled	[CE]  illegal  start  of  expression	14	None	add
63	[BUG]  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits)-  1;  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits)-  1;  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    .setMaximumFractionDigits(maximumFractionDigits)-  1;		non-compiled	[CE]  illegal  start  of  expression	14	None	add
64	[BUG]  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits,  0);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    .setMaximumFractionDigits(maximumFractionDigits,  0);		non-compiled	[CE]  illegal  start  of  expression	14	None	add
65	[BUG]  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits),  0);  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]    .setMaximumFractionDigits(maximumFractionDigits),  0);  [BUGGY]  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	    .setMaximumFractionDigits(maximumFractionDigits),  0);		non-compiled	[CE]  illegal  start  of  expression	14	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]  double[]  tmp1  =  new  double[getSize()  +  resultOffset];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	double[]  tmp1  =  new  double[getSize()  +  resultOffset];	double[]  tmp1  =  new  double[getSize()];  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	1	1
93	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[getSize()  +  resultOffset];  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]  double[]  tmp1  =  new  double[getSize()  +  resultOffset];  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  tmp1  =  new  double[getSize()  +  resultOffset];	double[]  tmp1  =  new  double[getSize()];  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	1	1	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]  double[]  tmp2  =  new  double[getSize()  +  resultOffset];  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	add	double[]  tmp2  =  new  double[getSize()  +  resultOffset];	double[]  tmp2  =  new  double[getSize()];  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	5	1
125	[BUG]  [BUGGY]  double[]  tmp2  =  new  double[getSize()  +  resultOffset];  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]  double[]  tmp2  =  new  double[getSize()  +  resultOffset];  [BUGGY]  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	double[]  tmp2  =  new  double[getSize()  +  resultOffset];	double[]  tmp2  =  new  double[getSize()];  	compilable	  [FE]  AssertionError  testAtan2SpecialCases	5	1	replace
151	[BUG]  [BUGGY]    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection.setMinimumFractionDigits(-x);  [CE]  bad  operand  type  double[]  for  unary  operator  '-'  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection.setMinimumFractionDigits(-x);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection.setMinimumFractionDigits(-x);		non-compiled	[CE]  bad  operand  type  double[]  for  unary  operator  '-'	12	None	add
152	[BUG]  [BUGGY]    srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);  srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);  [CE]  cannot  find  symbol  srcDerivativesIndirection  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);  srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);  srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);		non-compiled	[CE]  cannot  find  symbol  srcDerivativesIndirection	12	None	add
153	[BUG]  [BUGGY]    srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);  [CE]  cannot  find  symbol  srcDerivativesIndirection  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    srcDerivativesIndirection  =  calculateSrcDerivativesIndirection(x,  yOffset);		non-compiled	[CE]  cannot  find  symbol  srcDerivativesIndirection	12	None	add
154	[BUG]  [BUGGY]    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection  =  srcDerivativesIndirection.getMinimumSize();  [CE]  bad  operand  type  double[]  for  unary  operator  '-'  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection  =  srcDerivativesIndirection.getMinimumSize();  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection  =  srcDerivativesIndirection.getMinimumSize();		non-compiled	[CE]  bad  operand  type  double[]  for  unary  operator  '-'	12	None	add
155	[BUG]  [BUGGY]    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection.setMinimumFractionDigits(-x,  -y);  [CE]  bad  operand  type  double[]  for  unary  operator  '-'  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection.setMinimumFractionDigits(-x,  -y);  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)    if  (x[xOffset]  >=  0)  {  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	    srcDerivativesIndirection.setMaximumFractionDigits(-x);  srcDerivativesIndirection.setMinimumFractionDigits(-x,  -y);		non-compiled	[CE]  bad  operand  type  double[]  for  unary  operator  '-'	12	None	add
181	[BUG]  [BUGGY]    xOffset  =  calculateXOffset(x,  resultOffset);  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    xOffset  =  calculateXOffset(x,  resultOffset);  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    xOffset  =  calculateXOffset(x,  resultOffset);		non-compiled	[CE]  cannot  find  symbol	4	None	add
182	[BUG]  [BUGGY]    xOffset  =  xOffset  +  resultOffset  +  1;  [CE]  final  parameter  xOffset  may  not  be  assigned  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    xOffset  =  xOffset  +  resultOffset  +  1;  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    xOffset  =  xOffset  +  resultOffset  +  1;		non-compiled	[CE]  final  parameter  xOffset  may  not  be  assigned	4	None	add
183	[BUG]  [BUGGY]    xOffset  =  calculateXOffset(x);  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    xOffset  =  calculateXOffset(x);  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    xOffset  =  calculateXOffset(x);		non-compiled	[CE]  cannot  find  symbol	4	None	add
184	[BUG]  [BUGGY]    xOffset  =  xOffset  +  resultOffset  *  2;  [CE]  final  parameter  xOffset  may  not  be  assigned  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    xOffset  =  xOffset  +  resultOffset  *  2;  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    xOffset  =  xOffset  +  resultOffset  *  2;		non-compiled	[CE]  final  parameter  xOffset  may  not  be  assigned	4	None	add
185	[BUG]  [BUGGY]    double[]  rootN(tmp1,  0,  x,  resultOffset);  [CE]  ';'  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]    double[]  rootN(tmp1,  0,  x,  resultOffset);  [BUGGY]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	    double[]  rootN(tmp1,  0,  x,  resultOffset);		non-compiled	[CE]  ';'  expected	4	None	add
211	[BUG]  [BUGGY]    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  return;  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
212	[BUG]  [BUGGY]    if(x[r]  >=  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[r]  >=  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  return;  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[r]  >=  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
213	[BUG]  [BUGGY]    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  continue;  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
214	[BUG]  [BUGGY]    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  break;  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[r]  ==  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
215	[BUG]  [BUGGY]    if(x[r]  >=  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    if(x[r]  >=  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  continue;  }  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    if(x[r]  >=  0)  {  if(x[r]  ==  rootN(tmp1,  0,  tmp2,  0))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
242	[BUG]  [BUGGY]  if(xOffset  ==  x)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]  if(xOffset  ==  x)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(xOffset  ==  x)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }	add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
243	[BUG]  [BUGGY]  if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]  if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(xOffset  ==  xOffset)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }	add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
244	[BUG]  [BUGGY]  if(xOffset  ==  xEnd)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]  if(xOffset  ==  xEnd)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(xOffset  ==  xEnd)  {  add(tmp1,  0,  x,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }	add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
271	[BUG]  [BUGGY]    ||  y[xOffset]  ==  0)  {  rootN(tmp1,  0,  2,  tmp1,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    ||  y[xOffset]  ==  0)  {  rootN(tmp1,  0,  2,  tmp1,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    ||  y[xOffset]  ==  0)  {  rootN(tmp1,  0,  2,  tmp1,  0);		non-compiled	[CE]  illegal  start  of  expression	18	None	add
272	[BUG]  [BUGGY]    2  =(x[])x.intValue();  [CE]  unexpected  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    2  =(x[])x.intValue();  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    2  =(x[])x.intValue();		non-compiled	[CE]  unexpected  type	18	None	add
273	[BUG]  [BUGGY]    ||  y[xOffset]  ==  0)  {  rootN(tmp2,  0,  2,  tmp1,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    ||  y[xOffset]  ==  0)  {  rootN(tmp2,  0,  2,  tmp1,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    ||  y[xOffset]  ==  0)  {  rootN(tmp2,  0,  2,  tmp1,  0);		non-compiled	[CE]  illegal  start  of  expression	18	None	add
274	[BUG]  [BUGGY]    ||  y[xOffset]  ==  0)  {  rootN(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  expression  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    ||  y[xOffset]  ==  0)  {  rootN(tmp1,  0,  tmp2,  0);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    ||  y[xOffset]  ==  0)  {  rootN(tmp1,  0,  tmp2,  0);		non-compiled	[CE]  illegal  start  of  expression	18	None	add
275	[BUG]  [BUGGY]    2  =(x[])x.intValue();  r  =  sqrt(x[0]);  [CE]  unexpected  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]    2  =(x[])x.intValue();  r  =  sqrt(x[0]);  [BUGGY]  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)    atan(tmp1,  0,  tmp2,  0);      //  atan(y  /  (r  +  x))      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	    2  =(x[])x.intValue();  r  =  sqrt(x[0]);		non-compiled	[CE]  unexpected  type	18	None	add
301	[BUG]  [BUGGY]    double[]  rootN(tmp1,  0,  2,  tmp1,  0);  [CE]  ';'  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    double[]  rootN(tmp1,  0,  2,  tmp1,  0);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    double[]  rootN(tmp1,  0,  2,  tmp1,  0);		non-compiled	[CE]  ';'  expected	6	None	add
302	[BUG]  [BUGGY]    result[0]  =  Math.max(result,  0,  xOffset);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    result[0]  =  Math.max(result,  0,  xOffset);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    result[0]  =  Math.max(result,  0,  xOffset);		non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	6	None	add
303	[BUG]  [BUGGY]    result[0]  =  Math.max(result,  xOffset);  [CE]  no  suitable  method  found  for  max(double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    result[0]  =  Math.max(result,  xOffset);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    result[0]  =  Math.max(result,  xOffset);		non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	6	None	add
304	[BUG]  [BUGGY]    result[0]  =  Math.max(resultOffset,  x);  [CE]  no  suitable  method  found  for  max(int,double[])  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    result[0]  =  Math.max(resultOffset,  x);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    result[0]  =  Math.max(resultOffset,  x);		non-compiled	[CE]  no  suitable  method  found  for  max(int,double[])	6	None	add
305	[BUG]  [BUGGY]    double[]  rootN(tmp1,  0,  2,  0);  [CE]  ';'  expected  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  [BUGGY]    double[]  rootN(tmp1,  0,  2,  0);  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1389	1389	1	replace	    double[]  rootN(tmp1,  0,  2,  0);		non-compiled	[CE]  ';'  expected	6	None	add
331	[BUG]  [BUGGY]  if(x[i]  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  cannot  find  symbol  i  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  if(x[i]  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	if(x[i]  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
334	[BUG]  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  result.length;  ++i)  {  [CE]  illegal  start  of  type  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  result.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /(r  +  x))  for(int  i  =  0;  i  <  result.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
361	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  }  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  }	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
363	[BUG]  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  <<  2  +  y  >>  2)  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  [BUGGY]  if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  <<  2  +  y  >>  2)  [BUGGY]  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1391	1393	1	replace	if(x[xOffset]  >=  0)  {  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x  <=  2  +  y  {  2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  <<  2  +  y  >>  2)	add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);    //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
391	[BUG]  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
392	[BUG]  [BUGGY]  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
393	[BUG]  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(x,  yOffset,  tmp2,  0,  tmp1,  0);	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
394	[BUG]  [BUGGY]  divide(y,  xOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [CE]  illegal  start  of  type  [CONTEXT]  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [BUGGY]  divide(y,  xOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1398	1400	1	replace	divide(y,  xOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)atan(tmp1,  0,  tmp2,  0);	divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);    //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
421	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[yOffset]  ==  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[yOffset]  ==  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  >>  2)if(x[yOffset]  ==  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
422	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  <<  1)if(x[yOffset]  ==  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  <<  1)if(x[yOffset]  ==  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  <<  1)if(x[yOffset]  ==  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
423	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  {  2)if(x[yOffset]  ==  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  {  2)if(x[yOffset]  ==  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  +  y  {  2)if(x[yOffset]  ==  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
424	[BUG]  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  <<  2)if(x[yOffset]  ==  0)  {  [CE]  illegal  start  of  type  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  [BUGGY]  rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  <<  2)if(x[yOffset]  ==  0)  {  [BUGGY]    if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1392	1394	1	replace	rootN(tmp1,  0,  2,  tmp1,  0);  //  r  =  sqrt(x  >>  2  +  y  <<  2)if(x[yOffset]  ==  0)  {	rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
451	[BUG]  [BUGGY]    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  xOffset)  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  xOffset)  {  return;  }  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  xOffset)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
452	[BUG]  [BUGGY]    if(xOffset  ==  xEnd)  {  atan(tmp1,  0,  r,  xOffset);  }  else  {  break;  }  [CE]  cannot  find  symbol  xEnd  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    if(xOffset  ==  xEnd)  {  atan(tmp1,  0,  r,  xOffset);  }  else  {  break;  }  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    if(xOffset  ==  xEnd)  {  atan(tmp1,  0,  r,  xOffset);  }  else  {  break;  }		non-compiled	[CE]  cannot  find  symbol  xEnd	16	None	add
453	[BUG]  [BUGGY]    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  0)  {  return;  }  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
454	[BUG]  [BUGGY]    r  =  sqrt2(x[xOffset]);  [CE]  cannot  find  symbol  r  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    r  =  sqrt2(x[xOffset]);  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    r  =  sqrt2(x[xOffset]);		non-compiled	[CE]  cannot  find  symbol  r	16	None	add
455	[BUG]  [BUGGY]    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  xOffset)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {    [BUGGY]    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  xOffset)  {  break;  }  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	    if(xOffset  ==  xEnd)  {  xOffset  =  xOffset  +  1;  if(xOffset  ==  xOffset)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
481	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  rootN  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	    double[]  rootN  =  new  double[getSize()  ];		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1
482	[BUG]  [BUGGY]    double[]  rootN  =  new  double[getSize()  ];  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  rootN  =  new  double[getSize()  ];  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    double[]  rootN  =  new  double[getSize()  ];		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1	add
482	[BUG]  [BUGGY]    double[]  rootN  =(double[])result.getSize();  [CE]  cannot  find  symbol  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    double[]  rootN  =(double[])result.getSize();  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    double[]  rootN  =(double[])result.getSize();		non-compiled	[CE]  cannot  find  symbol	2	None	add
483	[BUG]  [BUGGY]    result[0]  =  Math.max(result,  yOffset);  [CE]  no  suitable  method  found  for  max(double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    result[0]  =  Math.max(result,  yOffset);  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    result[0]  =  Math.max(result,  yOffset);		non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	2	None	add
484	[BUG]  [BUGGY]    result[0]  =  Math.max(result,  0);  [CE]  no  suitable  method  found  for  max(double[],int)  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    result[0]  =  Math.max(result,  0);  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    result[0]  =  Math.max(result,  0);		non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	2	None	add
485	[BUG]  [BUGGY]  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    result[0]  =  Math.max(resultOffset,  y.length);  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	    result[0]  =  Math.max(resultOffset,  y.length);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1
486	[BUG]  [BUGGY]    result[0]  =  Math.max(resultOffset,  y.length);  [FE]  AssertionError  testAtan2SpecialCases  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    [BUGGY]    result[0]  =  Math.max(resultOffset,  y.length);  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	    result[0]  =  Math.max(resultOffset,  y.length);		compilable	  [FE]  AssertionError  testAtan2SpecialCases	2	1	add
511	[BUG]  [BUGGY]  if(x[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(x[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(x[yOffset]  >=  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
512	[BUG]  [BUGGY]  if(yOffset  ==  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(yOffset  ==  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(yOffset  ==  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
513	[BUG]  [BUGGY]  if(yOffset  <  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(yOffset  <  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(yOffset  <  0)  {  multiply(y,  yOffset,  tmp1,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
514	[BUG]  [BUGGY]  if(yOffset  ==  0)  {  multiply(y,  yOffset,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  [BUGGY]  if(yOffset  ==  0)  {  multiply(y,  yOffset,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }  [BUGGY]  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1390	1392	1	replace	if(yOffset  ==  0)  {  multiply(y,  yOffset,  tmp2,  0);//  y  {  2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  }	multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);    //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);      //  r  =  sqrt(x^2  +  y^2)  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
543	[BUG]  [BUGGY]  if(xOffset  ==  0)  {  multiply(x,  xOffset,  x,  tmp1,  0);//  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  if(xOffset  ==  0)  {  multiply(x,  xOffset,  x,  tmp1,  0);//  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	if(xOffset  ==  0)  {  multiply(x,  xOffset,  x,  tmp1,  0);//  x  <=  2  double[]  tmp2  =  new  double[getSize()  ];  }	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
544	[BUG]  [BUGGY]  if(xOffset  ==  0)  {  multiply(x,  xOffset,  x,  tmp1,  0);//  x  >=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [CE]  illegal  start  of  expression  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  [BUGGY]  if(xOffset  ==  0)  {  multiply(x,  xOffset,  x,  tmp1,  0);//  x  >=  2  double[]  tmp2  =  new  double[getSize()  ];  }  [BUGGY]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1388	1389	1	replace	if(xOffset  ==  0)  {  multiply(x,  xOffset,  x,  tmp1,  0);//  x  >=  2  double[]  tmp2  =  new  double[getSize()  ];  }	multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
572	[BUG]  [BUGGY]  if(x[r]  ==  0)  {  [CE]  cannot  find  symbol  r  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]  if(x[r]  ==  0)  {  [BUGGY]    add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	if(x[r]  ==  0)  {	if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  cannot  find  symbol  r	13	None	replace
573	[BUG]  [BUGGY]  if(x[r]  >  0)  {  [CE]  cannot  find  symbol  r  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  [BUGGY]  if(x[r]  >  0)  {  [BUGGY]    add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1394	1394	1	replace	if(x[r]  >  0)  {	if  (x[xOffset]  >=  0)  {  	non-compiled	[CE]  cannot  find  symbol  r	13	None	replace
