bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result[i]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[i]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[i]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))	  result[i]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
2	[BUG]  [BUGGY]  result[i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))	  result[i]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
3	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  'else'  without  'if'  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	add(tmp1,  0,  x,  xOffset,  tmp2,  0);	      	non-compiled	[CE]  'else'  without  'if'	3	None	replace
4	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  break;  [CE]  'else'  without  'if'  [FE]              AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  break;  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	add(tmp1,  0,  x,  xOffset,  tmp2,  0);  break;	      	non-compiled	[CE]  'else'  without  'if'	3	None	replace
5	[BUG]  [BUGGY]  result[0]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[0]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[0]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))	  result[0]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
6	[BUG]  [BUGGY]  result[0]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[0]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[0]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))	  result[0]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
7	[BUG]  [BUGGY]  ((  resultOffset  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  resultOffset  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  resultOffset  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);	      ((    yOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    result[resultOffset]    =    2    *    result[xOffset    +    i];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  ((  yOffset  +  i)>  tmp1.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)>  tmp1.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)>  tmp1.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];	      ((    yOffset    +    i)>    yOffset)&&(yOffset    >    yOffset))    {    result[xOffset    +    i]    =    2    *    tmp2[i];    	non-compiled	[CE]  not  a  statement	4	None	replace
9	[BUG]  [BUGGY]  ((  yOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];	      ((    yOffset    +    i)>    yOffset)&&(yOffset    >    yOffset))    {    result[xOffset    +    i]    =    2    *    tmp2[i];    	non-compiled	[CE]  not  a  statement	4	None	replace
10	[BUG]  [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  ((  y  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  y  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  y  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  ((  xOffset  +  i)  <  =  0)?  x  :  yOffset;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  xOffset  +  i)  <  =  0)?  x  :  yOffset;  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  xOffset  +  i)  <  =  0)?  x  :  yOffset;	      ((    yOffset    +    i)    <    =    0)?    x    :    xOffset;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  ((  x  +  i)  <  =  0)?  x  :  yOffset;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  x  +  i)  <  =  0)?  x  :  yOffset;  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  x  +  i)  <  =  0)?  x  :  yOffset;	      ((    yOffset    +    i)    <    =    0)?    x    :    xOffset;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  tmp2[i];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  tmp2[i];	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    result[resultOffset]    =    2    *    tmp2[i];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  ((  yOffset  +  i)>  tmp1.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)>  tmp1.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)>  tmp1.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];	      ((    yOffset    +    i)>    yOffset)&&(yOffset    >    yOffset))    {    result[xOffset    +    i]    =    2    *    tmp2[0];    	non-compiled	[CE]  not  a  statement	6	None	replace
16	[BUG]  [BUGGY]  ((  yOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];	      ((    yOffset    +    i)>    yOffset)&&(yOffset    >    yOffset))    {    result[xOffset    +    i]    =    2    *    tmp2[0];    	non-compiled	[CE]  not  a  statement	6	None	replace
17	[BUG]  [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  1  *  tmp2[i];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  1  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  1  *  tmp2[i];	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    result[resultOffset]    =    1    *    tmp2[i];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  ((  yOffset  +  i)  ==  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)  ==  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)  ==  0)?  -FastMath.PI  :  FastMath.PI);	      ((    yOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    	non-compiled	[CE]  not  a  statement	8	None	replace
19	[BUG]  [BUGGY]  ((  yOffset  +  i)  >=  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)  >=  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)  >=  0)?  -FastMath.PI  :  FastMath.PI);	      ((    yOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    	non-compiled	[CE]  not  a  statement	8	None	replace
20	[BUG]  [BUGGY]  ((  xOffset  +  i)  ==  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  xOffset  +  i)  ==  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  xOffset  +  i)  ==  0)?  -FastMath.PI  :  FastMath.PI);	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    	non-compiled	[CE]  not  a  statement	13	None	replace
21	[BUG]  [BUGGY]  ((  xOffset  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  result[xOffset  +  i];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  xOffset  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  result[xOffset  +  i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  xOffset  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  result[xOffset  +  i];	      ((    yOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    result[resultOffset]    =    2    *    result[xOffset    +    i];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  ((  yOffset  +  i)>  tmp2.length)&&(yOffset  <  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)>  tmp2.length)&&(yOffset  <  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)>  tmp2.length)&&(yOffset  <  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];	      ((    yOffset    +    i)>    yOffset)&&(yOffset    >    yOffset))    {    result[xOffset    +    i]    =    2    *    tmp2[i];    	non-compiled	[CE]  not  a  statement	4	None	replace
23	[BUG]  [BUGGY]  ((  tmp2[0]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  tmp2[i];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  tmp2[0]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  tmp2[0]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  2  *  tmp2[i];	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    result[resultOffset]    =    2    *    tmp2[i];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  ((  tmp2[0]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  1  *  tmp2[i];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  tmp2[0]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  1  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  tmp2[0]  <  =  0)?  -FastMath.PI  :  FastMath.PI);  result[resultOffset]  =  1  *  tmp2[i];	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    result[resultOffset]    =    1    *    tmp2[i];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
25	[BUG]  [BUGGY]  result[i]  =  2  *  tmp2[i];  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[i]  =  2  *  tmp2[i];  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[i]  =  2  *  tmp2[i];	  result[resultOffset]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    i))    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
26	[BUG]  [BUGGY]  result[0]  =  2  *  atan(tmp1,  0,  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[0]  =  2  *  atan(tmp1,  0,  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[0]  =  2  *  atan(tmp1,  0,  tmp2[i];  //  2  *  atan(y  /  (r  +  x))	  result[0]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  ')'  expected	1	None	replace
27	[BUG]  [BUGGY]  result[0]  =  2  *  tmp2[0];  //  2  *  atan(y  /  (r  +  x))  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[0]  =  2  *  tmp2[0];  //  2  *  atan(y  /  (r  +  x))  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[0]  =  2  *  tmp2[0];  //  2  *  atan(y  /  (r  +  x))	  result[0]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
28	[BUG]  [BUGGY]  result[i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  }  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  }  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  }	  result[resultOffset]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    i))    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
29	[BUG]  [BUGGY]  result[i]  =  2  *  atan(tmp1,  0,  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[i]  =  2  *  atan(tmp1,  0,  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[i]  =  2  *  atan(tmp1,  0,  tmp2[i];  //  2  *  atan(y  /  (r  +  x))	  result[i]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  ')'  expected	7	None	replace
30	[BUG]  [BUGGY]  result[i]  =  2  *  atan(tmp1,  0,  tmp2[i]);  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[i]  =  2  *  atan(tmp1,  0,  tmp2[i]);  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[i]  =  2  *  atan(tmp1,  0,  tmp2[i]);	  result[i]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
31	[BUG]  [BUGGY]  ((  yOffset  +  i)  ==  0)?  x  :  xOffset;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  yOffset  +  i)  ==  0)?  x  :  xOffset;  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  yOffset  +  i)  ==  0)?  x  :  xOffset;	      ((    yOffset    +    i)    <    =    0)?    x    :    xOffset;    	non-compiled	[CE]  not  a  statement	5	None	replace
32	[BUG]  [BUGGY]  ((  x  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  x  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  x  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);	      ((    yOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  ((  x  +  i)  <  =  0)?  x  :  xOffset;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  x  +  i)  <  =  0)?  x  :  xOffset;  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  x  +  i)  <  =  0)?  x  :  xOffset;	      ((    yOffset    +    i)    <    =    0)?    x    :    xOffset;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  ((  xOffset  +  i)  <  =  0)?  x  :  xOffset;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  xOffset  +  i)  <  =  0)?  x  :  xOffset;  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  xOffset  +  i)  <  =  0)?  x  :  xOffset;	      ((    yOffset    +    i)    <    =    0)?    x    :    xOffset;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  ((  xOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  xOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  xOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[i];	      ((    yOffset    +    i)>    yOffset)&&(yOffset    >    yOffset))    {    result[xOffset    +    i]    =    2    *    tmp2[i];    	non-compiled	[CE]  not  a  statement	4	None	replace
36	[BUG]  [BUGGY]  ((  tmp2[i  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  tmp2[i  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  tmp2[i  +  i)  <  =  0)?  -FastMath.PI  :  FastMath.PI);	      ((    xOffset    +    i)    <    =    0)?    -FastMath.PI    :    FastMath.PI);    	non-compiled	[CE]  ']'  expected	13	None	replace
37	[BUG]  [BUGGY]  result[resultOffset]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  }  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[resultOffset]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  }  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[resultOffset]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  i))  }	  result[resultOffset    +    i]    =    1    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
38	[BUG]  [BUGGY]  result[xOffset  +  i]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [CE]  'else'  without  'if'  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[xOffset  +  i]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[xOffset  +  i]  =  1  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }	  result[resultOffset    +    i]    =    1    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
39	[BUG]  [BUGGY]  result[i]  =  2  *  atan(tmp1,  0,  tmp2,  0);  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  result[i]  =  2  *  atan(tmp1,  0,  tmp2,  0);  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	result[i]  =  2  *  atan(tmp1,  0,  tmp2,  0);	  result[i]    =    2    *    tmp2[i];    //    2    *    atan(y    /    (r    +    x))    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
40	[BUG]  [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI)/  2  *  resultOffset);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI)/  2  *  resultOffset);  [BUGGY]    }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  tmp2[i]  <  =  0)?  -FastMath.PI  :  FastMath.PI)/  2  *  resultOffset);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  ((  xOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {    [BUGGY]  ((  xOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];  [BUGGY]    result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))    }  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  result[resultOffset]  =  ((tmp2[0]  <=  0)  ?  -FastMath.PI  :  FastMath.PI)  -  2  *  tmp2[0];  //  +/-pi  -  2  *  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1401	1402	1	replace	((  xOffset  +  i)>  tmp2.length)&&(yOffset  >  yOffset))  {  result[xOffset  +  i]  =  2  *  tmp2[0];	      ((    yOffset    +    i)>    yOffset)&&(yOffset    >    yOffset))    {    result[xOffset    +    i]    =    2    *    tmp2[0];    	non-compiled	[CE]  not  a  statement	6	None	replace
