bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1  +  resultOffset];  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[]  q  =  new  double[1  +  resultOffset];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[1  +  resultOffset];	      final    double[]    q    =    new    double[1    +    function];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  <  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(x  <  0)  {	  if(x    >    0)    {    	compilable	  [FE]  AssertionError  	13	4	replace
3	[BUG]  [BUGGY]  if(x  <  0)  {  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  <  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x  <  0)  {	  if(x    >    0)    {    	compilable	  [FE]  AssertionError  	13	4	replace
4	[BUG]  [BUGGY]  if(x  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  <  =  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x  <  =  0)  {	  if(x    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  final  double  x2  =  FastMath.atan(function);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double  x2  =  FastMath.atan(function);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double  x2  =  FastMath.atan(function);	      final    double    x2    =    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
6	[BUG]  [BUGGY]  final  double  x2  =  FastMath.atan(resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double  x2  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double  x2  =  FastMath.atan(resultOffset);	      final    double    x2    =    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
7	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1];  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[1];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1];	      final    double[][]    coeff    =    function[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
8	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(x);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  FastMath.abs(x);	      final    double[][]    coeff    =    function[0]    *    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
9	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  resultOffset);	      final    double[][]    coeff    =    function[0]    *    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
10	[BUG]  [BUGGY]  if(x  >  0)  {  if(x  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  >  0)  {  if(x  >  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    >    0)    {    if(x  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
11	[BUG]  [BUGGY]  if(x  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
12	[BUG]  [BUGGY]  if(x  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  >  1)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(function.length  >  1)  {	  if(function.length    >    0)    {    	compilable	  [FE]  AssertionError  	4	1	replace
14	[BUG]  [BUGGY]  if(function.length  >  1)  {  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  >  1)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length  >  1)  {	  if(function.length    >    0)    {    	compilable	  [FE]  AssertionError  	4	1	replace
15	[BUG]  [BUGGY]  if(function.length  >  0)  {  if(function.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  >  0)  {  if(function.length  >  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    0)    {    if(function.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
16	[BUG]  [BUGGY]  if(function.length  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
17	[BUG]  [BUGGY]  if(function.length  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  ==  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(resultOffset  ==  0)  {	  if(resultOffset    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
19	[BUG]  [BUGGY]  if(resultOffset  ==  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  ==  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  0)  {	  if(resultOffset    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset!=  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(resultOffset!=  0)  {	  if(resultOffset    >    0)    {    	compilable	  [FE]  AssertionError  	2	3	replace
21	[BUG]  [BUGGY]  if(resultOffset!=  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset!=  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=  0)  {	  if(resultOffset    >    0)    {    	compilable	  [FE]  AssertionError  	2	3	replace
22	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  if(resultOffset  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  >  0)  {  if(resultOffset  >  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    >    0)    {    if(resultOffset  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
23	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
24	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(function);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[]  x2  =  FastMath.atan(function);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(function);	      final    double[]    x2    =    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
25	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(function,  x);	      final    double[]    x2    =    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
26	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.atan(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.atan(x,  resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.atan(x,  resultOffset);	      final    double[][]    coeff    =    function[0]    *    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
27	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.atan(x);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  FastMath.atan(x);	      final    double[][]    coeff    =    function[0]    *    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
28	[BUG]  [BUGGY]  final  double  x2  =  FastMath.atan(function2);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double  x2  =  FastMath.atan(function2);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double  x2  =  FastMath.atan(function2);	      final    double    x2    =    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
29	[BUG]  [BUGGY]  if(function.length  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  2;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
30	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  operand[0];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  operand[0];	      final    double[][]    coeff    =    function[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
31	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.abs(x);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.abs(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  FastMath.abs(x);	      final    double[][]    coeff    =    function[0]    *    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
32	[BUG]  [BUGGY]  if(x  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  2;	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
33	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(x);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  FastMath.atan(x);	      final    double[][]    coeff    =    function[0]    *    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  ==  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(function.length  ==  0)  {	  if(function.length    >    0)    {    	compilable	  [FE]  AssertionError  	4	3	replace
35	[BUG]  [BUGGY]  if(function.length  ==  0)  {  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(function.length  ==  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length  ==  0)  {	  if(function.length    >    0)    {    	compilable	  [FE]  AssertionError  	4	3	replace
36	[BUG]  [BUGGY]  if(resultOffset  ==  resultOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  ==  resultOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  resultOffset)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
37	[BUG]  [BUGGY]  if(resultOffset  ==  resultOffset)  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  ==  resultOffset)  {  return  null;  }  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  resultOffset)  {  return  null;  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
38	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  >  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    >    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
39	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1  +  functionOffset];  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[]  q  =  new  double[1  +  functionOffset];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[1  +  functionOffset];	      final    double[]    q    =    new    double[1    +    function];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
40	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[]  x2  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(resultOffset);	      final    double[]    x2    =    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  >  1)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(resultOffset  >  1)  {	  if(resultOffset    >    0)    {    	compilable	  [FE]  AssertionError  	2	3	replace
42	[BUG]  [BUGGY]  if(resultOffset  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  >  1)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  >  1)  {	  if(resultOffset    >    0)    {    	compilable	  [FE]  AssertionError  	2	3	replace
43	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(coeff);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.abs(coeff);	      final    double[][]    coeff    =    function[0]    *    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
44	[BUG]  [BUGGY]  if(x  >  0)  {  If(x  >  0)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(x  >  0)  {  If(x  >  0)  {  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    >    0)    {    If(x  >  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
45	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.  [BUGGY]            final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  resultOffset;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);    [BUGGY]  final  double[][]  coeff  =  function[0]  *  resultOffset;  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  resultOffset;	      final    double[][]    coeff    =    function[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
