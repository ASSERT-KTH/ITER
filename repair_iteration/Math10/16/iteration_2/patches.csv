bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[order];  q[0]  =  1;	  if(function.length    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
2	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1];  q[0]  =  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[1];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[1];  q[0]  =  1;	  if(function.length    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
3	[BUG]  [BUGGY]  if(resultOffset  ==  0)  {  if(resultOffset  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  0)  {  if(resultOffset  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    ==    0)    {    if(resultOffset  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
4	[BUG]  [BUGGY]  if(resultOffset  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    ==    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
5	[BUG]  [BUGGY]  if(resultOffset  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    ==    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
6	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(resultOffset,  x);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(resultOffset,  x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.abs(resultOffset,  x);	  final    double[][]    coeff    =    function[0]    *    FastMath.abs(x,    resultOffset);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
7	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  resultOffset  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  resultOffset  +  1);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  resultOffset  +  1);	  final    double[][]    coeff    =    function[0]    *    FastMath.abs(x,    resultOffset);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
8	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  FastMath.abs(x,  resultOffset);	  final    double[][]    coeff    =    function[0]    /    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
9	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  /  FastMath.abs(x);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  /  FastMath.abs(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  /  FastMath.abs(x);	  final    double[][]    coeff    =    function[0]    /    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
10	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[1];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[1];  q[0]  =  1;  final  double  x2=  x  *  x;	  if(function.length    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    final    double    x2=    x    *    x;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
11	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1  +  order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[1  +  order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[1  +  order];  q[0]  =  1;  final  double  x2=  x  *  x;	  if(function.length    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    final    double    x2=    x    *    x;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
12	[BUG]  [BUGGY]  if(resultOffset  >  1)  {  if(resultOffset  >  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  >  1)  {  if(resultOffset  >  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    >    1)    {    if(resultOffset  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
13	[BUG]  [BUGGY]  if(resultOffset  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    >    1)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
14	[BUG]  [BUGGY]  if(resultOffset  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    >    1)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
15	[BUG]  [BUGGY]  final  double  x2  =  FastMath.atan(function,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double  x2  =  FastMath.atan(function,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double  x2  =  FastMath.atan(function,  resultOffset);	  final    double    x2    =    FastMath.atan(function);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
16	[BUG]  [BUGGY]  if(x  <  0)  {  If(x  >  0)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  0)  {  If(x  >  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x  <  0)  {  If(x  >  0)  {	  if(x    >    0)    {    If(x    >    0)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
17	[BUG]  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  2;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[order];  q[0]  =  2;	  if(function.length    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
18	[BUG]  [BUGGY]  if(x  <  0)  {  if(x  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  0)  {  if(x  <  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    <    0)    {    if(x  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
19	[BUG]  [BUGGY]  if(x  <  0)  {  If(x  <  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  0)  {  If(x  <  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    <    0)    {    If(x  <  0)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
20	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  /  FastMath.atan(x);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  /  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  /  FastMath.atan(x);	  final    double[][]    coeff    =    function[0]    /    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
21	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.atan(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.atan(x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  FastMath.atan(x,  resultOffset);	  final    double[][]    coeff    =    function[0]    /    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
22	[BUG]  [BUGGY]  if(resultOffset!=  0)  {  if(resultOffset!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset!=  0)  {  if(resultOffset!=  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=    0)    {    if(resultOffset!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
23	[BUG]  [BUGGY]  if(resultOffset!=  0)  {  if(resultOffset  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset!=  0)  {  if(resultOffset  >=  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=    0)    {    if(resultOffset  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
24	[BUG]  [BUGGY]  if(resultOffset!=  0)  {  if(resultOffset  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset!=  0)  {  if(resultOffset  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=    0)    {    if(resultOffset  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
25	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[1];  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  operand[1];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  operand[1];	  final    double[][]    coeff    =    operand[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(x  ==  0)  {	  if(x    <    =    0)    {    	compilable	  [FE]  AssertionError  	4	3	replace
27	[BUG]  [BUGGY]  if(x  ==  0)  {  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x  ==  0)  {	  if(x    <    =    0)    {    	compilable	  [FE]  AssertionError  	4	3	replace
28	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  x2  =  FastMath.atan(x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(x,  resultOffset);	  final    double[]    x2    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
29	[BUG]  [BUGGY]  ||  resultOffset  ==  resultOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  ||  resultOffset  ==  resultOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	||  resultOffset  ==  resultOffset)  {  throw  new  IllegalArgumentException( " ");  }	  if(resultOffset    ==    resultOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
30	[BUG]  [BUGGY]  resultOffset  =  resultOffset;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  resultOffset  =  resultOffset;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	resultOffset  =  resultOffset;	  if(resultOffset    ==    resultOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
31	[BUG]  [BUGGY]  final  double[]  q  =  new  double[2];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[2];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[2];  q[0]  =  1;  final  double  x2=  x  *  x;	  if(resultOffset    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    final    double    x2=    x    *    x;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
32	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  resultOffset;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  *  resultOffset;  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  resultOffset;	  final    double[][]    coeff    =    function[0]    *    resultOffset;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
33	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  resultOffset;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  /  resultOffset;  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  resultOffset;	  final    double[][]    coeff    =    function[0]    *    resultOffset;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
34	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.abs(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.abs(coeff);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  FastMath.abs(coeff);	  final    double[][]    coeff    =    function[0]    *    FastMath.abs(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
35	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  FastMath.atan(x,  resultOffset);	  final    double[][]    coeff    =    function[1]    *    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
36	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.	  if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    functionOffset][0];    for(int    i    =    0;    i    <    resultOffset;    ++i)    {    compIndirection[i]    =    FastMath.    	non-compiled	[CE]  <identifier>  expected	45	None	replace
37	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.atan(x);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.atan(x);  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  new  double[1  +  functionOffset][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.atan(x);  }	  if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    functionOffset][0];    for(int    i    =    0;    i    <    resultOffset;    ++i)    {    compIndirection[i]    =    FastMath.    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  ==  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(function.length  ==  1)  {	  if(function.length    ==    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	4	replace
39	[BUG]  [BUGGY]  if(function.length  ==  1)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  ==  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length  ==  1)  {	  if(function.length    ==    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	4	replace
40	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(function,  resultOffset);	  final    double[]    x2    =    FastMath.atan(function);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
41	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(resultOffset,  function);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  x2  =  FastMath.atan(resultOffset,  function);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(resultOffset,  function);	  final    double[]    x2    =    FastMath.atan(function);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
42	[BUG]  [BUGGY]  final  double  x2=  x  *  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double  x2=  x  *  x;	  if(x    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    final    double    x2=    x    *    x;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
43	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  /  2;  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  /  2;	  final    double[][]    coeff    =    function[1];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
44	[BUG]  [BUGGY]  if(function.length  ==  0)  {  if(function.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  ==  0)  {  if(function.length  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    ==    0)    {    if(function.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
45	[BUG]  [BUGGY]  if(function.length  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    ==    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
46	[BUG]  [BUGGY]  if(function.length  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    ==    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
47	[BUG]  [BUGGY]  if(resultOffset!=  resultOffset)  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset!=  resultOffset)  {  return  null;  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=  resultOffset)  {  return  null;  }	  if(resultOffset    ==    resultOffset)    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
48	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.atan(resultOffset,  x);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.atan(resultOffset,  x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.atan(resultOffset,  x);	  final    double[][]    coeff    =    function[0]    *    FastMath.atan(x,    resultOffset);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  <  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(resultOffset  <  1)  {	  if(resultOffset    >    1)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	4	replace
50	[BUG]  [BUGGY]  if(resultOffset  <  1)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  <  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  <  1)  {	  if(resultOffset    >    1)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	4	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(resultOffset  ==  1)  {	  if(resultOffset    >    1)    {    	compilable	  [FE]  AssertionError  	42	3	replace
52	[BUG]  [BUGGY]  if(resultOffset  ==  1)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  1)  {	  if(resultOffset    >    1)    {    	compilable	  [FE]  AssertionError  	42	3	replace
53	[BUG]  [BUGGY]  final  double[]  q  =  new  double[2];  q[0]  =  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[2];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[2];  q[0]  =  1;	  if(x    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
54	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1];  q[0]  =  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[1];  q[0]  =  2;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[1];  q[0]  =  2;	  if(x    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
55	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x,  coeff);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(function,  x,  coeff);	  final    double[]    x2    =    FastMath.atan(function,    x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
56	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(function,  x,  resultOffset);	  final    double[]    x2    =    FastMath.atan(function,    x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
57	[BUG]  [BUGGY]  if(function.length  >  1)  {  if(function.length  >  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  >  1)  {  if(function.length  >  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    1)    {    if(function.length  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
58	[BUG]  [BUGGY]  if(function.length  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    1)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
59	[BUG]  [BUGGY]  if(function.length  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    1)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
60	[BUG]  [BUGGY]  final  double  x2  =  FastMath.atan(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double  x2  =  FastMath.atan(x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double  x2  =  FastMath.atan(x,  resultOffset);	  final    double    x2    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
61	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.abs(x,  resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.abs(x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  FastMath.abs(x,  resultOffset);	  final    double[][]    coeff    =    function[1]    *    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
62	[BUG]  [BUGGY]  if(resultOffset  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  >  1)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    >    1)    {    final  double[]  q  =  new  double[order];  q[0]  =  2;	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
63	[BUG]  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  if(resultOffset    >    0)    {    final    double[]    q    =    new    double[order];    q[0]    =    1;    final    double    x2=    x    *    x;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function[0]  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(function[0]  ==  0)  {	  if(x    <    0)    {    	compilable	  [FE]  AssertionError  	3	3	replace
65	[BUG]  [BUGGY]  if(function[0]  ==  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function[0]  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function[0]  ==  0)  {	  if(x    <    0)    {    	compilable	  [FE]  AssertionError  	3	3	replace
66	[BUG]  [BUGGY]  if(functionOffset!=  0)  {  [CE]  cannot  find  symbol  functionOffset  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(functionOffset!=  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(functionOffset!=  0)  {	  if(resultOffset!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  functionOffset	21	None	replace
67	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  coeff);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(function,  coeff);	  final    double[]    x2    =    FastMath.atan(function,    x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
68	[BUG]  [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[]  x2  =  FastMath.atan(function,  x  +  1);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[]  x2  =  FastMath.atan(function,  x  +  1);	  final    double[]    x2    =    FastMath.atan(function,    x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
69	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(function);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(function);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.abs(function);	  final    double[][]    coeff    =    function[0]    *    FastMath.abs(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
70	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.atan(resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  FastMath.atan(resultOffset);	  final    double[][]    coeff    =    function[0]    /    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
71	[BUG]  [BUGGY]  if(resultOffset  ==  x)  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  x)  {  return  null;  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  x)  {  return  null;  }	  if(resultOffset    ==    resultOffset)    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
72	[BUG]  [BUGGY]  if(resultOffset  ==  0)  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  0)  {  return  null;  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  0)  {  return  null;  }	  if(resultOffset    ==    resultOffset)    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
73	[BUG]  [BUGGY]  if(resultOffset  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(resultOffset    ==    resultOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
74	[BUG]  [BUGGY]  if(resultOffset!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(resultOffset    ==    resultOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
75	[BUG]  [BUGGY]  if(function.length  >  1)  {  final  double[]  q  =  new  double[1  +  function.length];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  >  1)  {  final  double[]  q  =  new  double[1  +  function.length];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    >    1)    {    final  double[]  q  =  new  double[1  +  function.length];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
76	[BUG]  [BUGGY]  if(resultOffset  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset    ==    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  2;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
77	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(coeff);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  FastMath.atan(coeff);	  final    double[][]    coeff    =    function[1]    *    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
78	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(function);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  *  FastMath.atan(function);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  *  FastMath.atan(function);	  final    double[][]    coeff    =    function[1]    *    FastMath.atan(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
79	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(resultOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  FastMath.abs(resultOffset);	  final    double[][]    coeff    =    function[0]    /    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
80	[BUG]  [BUGGY]  if(resultOffset!=  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset!=  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
81	[BUG]  [BUGGY]  if(resultOffset!=  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset!=  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset!=    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
82	[BUG]  [BUGGY]  if(x  <  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  1;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    <    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  1;	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
83	[BUG]  [BUGGY]  if(x  <  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    <    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  2;	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
84	[BUG]  [BUGGY]  if(functionOffset  ==  0)  {  [CE]  cannot  find  symbol  functionOffset  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(functionOffset  ==  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(functionOffset  ==  0)  {	  if(resultOffset    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  functionOffset	19	None	replace
85	[BUG]  [BUGGY]  if(function.length  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  ==  0)  {  final  double[]  q  =  new  double[order];  q[0]  =  2;  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length    ==    0)    {    final  double[]  q  =  new  double[order];  q[0]  =  2;	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  >  1  &&  function.length  >  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(function.length  >  1  &&  function.length  >  0)  {	  if(function.length    >    1)    {    	compilable	  [FE]  AssertionError  	14	1	replace
87	[BUG]  [BUGGY]  if(function.length  >  1  &&  function.length  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(function.length  >  1  &&  function.length  >  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length  >  1  &&  function.length  >  0)  {	  if(function.length    >    1)    {    	compilable	  [FE]  AssertionError  	14	1	replace
88	[BUG]  [BUGGY]  if(resultOffset  ==  x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(resultOffset  ==  x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  ==  x)  {  throw  new  IllegalArgumentException( " ");  }	  if(resultOffset    ==    resultOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(x  <  1)  {	  if(x    >    0)    {    if(x    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	replace
90	[BUG]  [BUGGY]  if(x  <  1)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  1)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x  <  1)  {	  if(x    >    0)    {    if(x    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	replace
91	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[1]  +  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[1]  +  x;  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[1]  +  x;	  final    double[][]    coeff    =    function[1];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
92	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  x][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.atan(x);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  new  double[1  +  x][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.atan(x);  }  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  new  double[1  +  x][0];  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  compIndirection[i]  =  FastMath.atan(x);  }	  if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    functionOffset][0];    for(int    i    =    0;    i    <    resultOffset;    ++i)    {    compIndirection[i]    =    FastMath.    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
93	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  yOffset);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  yOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.abs(x,  yOffset);	  final    double[][]    coeff    =    function[0]    *    FastMath.abs(x,    resultOffset);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
94	[BUG]  [BUGGY]  if(x  <  0)  {  if(x  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  if(x  <  0)  {  if(x  >  0)  {  [BUGGY]              final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x    <    0)    {    if(x  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
95	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  /  FastMath.abs(coeff);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  /  FastMath.abs(coeff);	  final    double[][]    coeff    =    function[0]    /    FastMath.abs(x);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
96	[BUG]  [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(coeff,  x);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);      [BUGGY]  final  double[][]  coeff  =  function[0]  *  FastMath.abs(coeff,  x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	final  double[][]  coeff  =  function[0]  *  FastMath.abs(coeff,  x);	  final    double[][]    coeff    =    function[0]    *    FastMath.abs(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
