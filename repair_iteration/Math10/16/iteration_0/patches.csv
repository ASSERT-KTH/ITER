bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]  if(resultOffset  >  0)  {  [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(resultOffset  >  0)  {	if  (order  >  0)  {  	compilable	  [FE]  AssertionError  	32	3	replace
2	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]  if(resultOffset  >  0)  {  [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(resultOffset  >  0)  {	if  (order  >  0)  {  	compilable	  [FE]  AssertionError  	32	3	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]  if(function.length  >  0)  {  [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(function.length  >  0)  {	if  (order  >  0)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	4	replace
4	[BUG]  [BUGGY]  if(function.length  >  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]  if(function.length  >  0)  {  [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(function.length  >  0)  {	if  (order  >  0)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	4	replace
5	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]    [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	  	if  (order  >  0)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
6	[BUG]  [BUGGY]    final  double[]  x2  =  FastMath.atan(x);  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]    final  double[]  x2  =  FastMath.atan(x);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	    final  double[]  x2  =  FastMath.atan(x);		non-compiled	[CE]  incompatible  types	33	None	add
7	[BUG]  [BUGGY]    final  double  x2  =  FastMath.atan(x);  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]    final  double  x2  =  FastMath.atan(x);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	    final  double  x2  =  FastMath.atan(x);		non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	33	None	add
8	[BUG]  [BUGGY]    final  double[]  q  =  new  double[1  +  function];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]    final  double[]  q  =  new  double[1  +  function];  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	    final  double[]  q  =  new  double[1  +  function];		non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	add
9	[BUG]  [BUGGY]    final  double[][]  coeff  =  function[0]  *  FastMath.atan(x);  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]    final  double[][]  coeff  =  function[0]  *  FastMath.atan(x);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	    final  double[][]  coeff  =  function[0]  *  FastMath.atan(x);		non-compiled	[CE]  incompatible  types	33	None	add
10	[BUG]  [BUGGY]    final  double[][]  coeff  =  function[0];  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]    final  double[][]  coeff  =  function[0];  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	    final  double[][]  coeff  =  function[0];		non-compiled	[CE]  incompatible  types	33	None	add
11	[BUG]  [BUGGY]  if(functionOffset  >  0)  {  [CE]  cannot  find  symbol  functionOffset  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]  if(functionOffset  >  0)  {  [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(functionOffset  >  0)  {	if  (order  >  0)  {  	non-compiled	[CE]  cannot  find  symbol  functionOffset	32	None	replace
12	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]  if(x  >  0)  {  [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	add	if(x  >  0)  {	if  (order  >  0)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	4	replace
13	[BUG]  [BUGGY]  if(x  >  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]  if(x  >  0)  {  [BUGGY]          final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	if(x  >  0)  {	if  (order  >  0)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	4	replace
14	[BUG]  [BUGGY]    final  double[][]  coeff  =  function[0]  *  FastMath.abs(x);  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  [BUGGY]    final  double[][]  coeff  =  function[0]  *  FastMath.abs(x);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1330	1330	1	replace	    final  double[][]  coeff  =  function[0]  *  FastMath.abs(x);		non-compiled	[CE]  incompatible  types	33	None	add
