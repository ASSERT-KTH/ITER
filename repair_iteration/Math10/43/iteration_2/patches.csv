bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  inv  =  Math.min(n,  function);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]                  AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  Math.min(n,  function);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  Math.min(n,  function);	  final    double    inv    =    Math.min(function,    n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	11	None	replace
2	[BUG]  [BUGGY]  final  double  inv  =  Math.min(function,  n  +  1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]                    AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  Math.min(function,  n  +  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  Math.min(function,  n  +  1);	  final    double    inv    =    Math.min(function,    n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	11	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	Double  xk  =  FastMath.pow(inv,  -1);	  double    xk    =    FastMath.pow(inv,    -1);    Double    xk    =    FastMath.pow(inv,    -1);    	compilable	  [FE]  AssertionError  	2	12	replace
4	[BUG]  [BUGGY]  Double  xk  =  FastMath.pow(inv,  -1);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	Double  xk  =  FastMath.pow(inv,  -1);	  double    xk    =    FastMath.pow(inv,    -1);    Double    xk    =    FastMath.pow(inv,    -1);    	compilable	  [FE]  AssertionError  	2	12	replace
5	[BUG]  [BUGGY]  final  double  xk  =  FastMath.pow(inv,  -1);  [CE]  cannot  assign  a  value  to  final  variable  xk  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  xk  =  FastMath.pow(inv,  -1);	  double    xk    =    FastMath.pow(inv,    -1);    double    xk    =    FastMath.pow(inv,    -);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  xk	26	None	replace
6	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  -);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  -);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(inv,  -);	  double    xk    =    FastMath.pow(inv,    -1);    double    xk    =    FastMath.pow(inv,    -);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
7	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n  +  1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n  +  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.pow(function,  -n  +  1);	  final    double    inv    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	30	None	replace
8	[BUG]  [BUGGY]  n  =  FastMath.pow(inv,  n  -  1);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  n  =  FastMath.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	n  =  FastMath.pow(inv,  n  -  1);	  double    xk    =    FastMath.pow(inv,    n    -    1);    double    xk    =    FastMath.pow(inv,    n    -    1);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
9	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  double  xk  =  FastMath.pow(inv,  n  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  double  xk  =  FastMath.pow(inv,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    n    +    1);    double  xk  =  FastMath.pow(inv,  n  +  1);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	23	None	add
10	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  Double  xk  =  FastMath.pow(inv,  n  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  Double  xk  =  FastMath.pow(inv,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    n    +    1);    Double  xk  =  FastMath.pow(inv,  n  +  1);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	23	None	add
11	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  inv  =  FastMath.pow(inv,  n  +  1);  [CE]  cannot  assign  a  value  to  final  variable  inv  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  inv  =  FastMath.pow(inv,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    n    +    1);    inv  =  FastMath.pow(inv,  n  +  1);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inv	23	None	add
12	[BUG]  [BUGGY]  final  double  inv  =  Math.min(function,  inv);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]                AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  Math.min(function,  inv);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  Math.min(function,  inv);	  final    double    inv    =    Math.min(n,    inv);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	10	None	replace
13	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  1);  double  xk  =  FastMath.pow(inv,  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  1);  double  xk  =  FastMath.pow(inv,  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    1);    double  xk  =  FastMath.pow(inv,  1);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	19	None	add
14	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  1);  Double  xk  =  FastMath.pow(inv,  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  1);  Double  xk  =  FastMath.pow(inv,  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    1);    Double  xk  =  FastMath.pow(inv,  1);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	19	None	add
15	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  1);  inv  =  FastMath.pow(inv,  1);  [CE]  cannot  assign  a  value  to  final  variable  inv  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  1);  inv  =  FastMath.pow(inv,  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    1);    inv  =  FastMath.pow(inv,  1);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inv	19	None	add
16	[BUG]  [BUGGY]  final  double  inv  =  FastMath.min(n,  order);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.min(n,  order);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.min(n,  order);	  final    double    inv    =    FastMath.min(order,    n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	27	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	Double  xk  =  FastMath.pow(inv,  n  -  1);	  double    xk    =    FastMath.pow(inv,    n    -    1);    Double    xk    =    FastMath.pow(inv,    n    -    1);    	compilable	  [FE]  AssertionError  	16	12	replace
18	[BUG]  [BUGGY]  Double  xk  =  FastMath.pow(inv,  n  -  1);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	Double  xk  =  FastMath.pow(inv,  n  -  1);	  double    xk    =    FastMath.pow(inv,    n    -    1);    Double    xk    =    FastMath.pow(inv,    n    -    1);    	compilable	  [FE]  AssertionError  	16	12	replace
19	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  n  -  1);  [CE]  cannot  find  symbol  xk  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  xk  =  FastMath.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	xk  =  FastMath.pow(inv,  n  -  1);	  double    xk    =    FastMath.pow(inv,    n    -    1);    inv    =    FastMath.pow(inv,    n    -    1);    	non-compiled	[CE]  cannot  find  symbol  xk	25	None	replace
20	[BUG]  [BUGGY]  inv  =  FastMath.pow(inv,  n  -  1);  [CE]  cannot  assign  a  value  to  final  variable  inv  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  inv  =  FastMath.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	inv  =  FastMath.pow(inv,  n  -  1);	  double    xk    =    FastMath.pow(inv,    n    -    1);    inv    =    FastMath.pow(inv,    n    -    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inv	25	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	double  xk  =  FastMath.pow(inv,  n);	  double    xk    =    FastMath.pow(inv,    1);    	compilable	  [FE]  AssertionError  	20	12	replace
22	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(inv,  n);	  double    xk    =    FastMath.pow(inv,    1);    	compilable	  [FE]  AssertionError  	20	12	replace
23	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  0);  double  xk  =  FastMath.pow(inv,  0);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  0);  double  xk  =  FastMath.pow(inv,  0);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    0);    double  xk  =  FastMath.pow(inv,  0);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	17	None	add
24	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  0);  Double  xk  =  FastMath.pow(inv,  0);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  0);  Double  xk  =  FastMath.pow(inv,  0);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    0);    Double  xk  =  FastMath.pow(inv,  0);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	17	None	add
25	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  0);  double  xk  =  FastMath.pow(inv,  0,  0);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  0);  double  xk  =  FastMath.pow(inv,  0,  0);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double    xk    =    FastMath.pow(inv,    0);    double  xk  =  FastMath.pow(inv,  0,  0);	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	17	None	add
26	[BUG]  [BUGGY]  final  double  inv  =  FastMath.min(n,  n  +  1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.min(n,  n  +  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.min(n,  n  +  1);	  final    double    inv    =    FastMath.min(n,    n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	28	None	replace
27	[BUG]  [BUGGY]  n  =  FastMath.pow(inv,  -n  +  1);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  n  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	n  =  FastMath.pow(inv,  -n  +  1);	  double    xk    =    FastMath.pow(inv,    -n    +    1);    double    xk    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  order);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	double  xk  =  FastMath.pow(inv,  n  -  order);	  double    xk    =    FastMath.pow(inv,    n    -    maxOrder);    	compilable	  [FE]  AssertionError  	29	12	replace
29	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  order);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  order);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(inv,  n  -  order);	  double    xk    =    FastMath.pow(inv,    n    -    maxOrder);    	compilable	  [FE]  AssertionError  	29	12	replace
30	[BUG]  [BUGGY]  n  =  Math.min(inv,  n);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  n  =  Math.min(inv,  n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	n  =  Math.min(inv,  n);	  n    =    Math.min(inv,    resultOffset);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
31	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  maxOrder  +  1);  [CE]  cannot  find  symbol  maxOrder  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  maxOrder  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(inv,  maxOrder  +  1);	  double    xk    =    FastMath.pow(inv,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol  maxOrder	24	None	replace
32	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  -n  -  1);  [CE]  cannot  find  symbol  xk  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  xk  =  FastMath.pow(inv,  -n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	xk  =  FastMath.pow(inv,  -n  -  1);	  double    xk    =    FastMath.pow(inv,    -n    -    1);    inv    =    FastMath.pow(inv,    -n    -    1);    	non-compiled	[CE]  cannot  find  symbol  xk	14	None	replace
33	[BUG]  [BUGGY]  inv  =  FastMath.pow(inv,  -n  -  1);  [CE]  cannot  assign  a  value  to  final  variable  inv  [FE]              AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  inv  =  FastMath.pow(inv,  -n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	inv  =  FastMath.pow(inv,  -n  -  1);	  double    xk    =    FastMath.pow(inv,    -n    -    1);    inv    =    FastMath.pow(inv,    -n    -    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inv	14	None	replace
34	[BUG]  [BUGGY]  final  double  inv  =  FastMath.min(n,  function);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.min(n,  function);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.min(n,  function);	  final    double    inv    =    FastMath.min(function,    n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	21	None	replace
35	[BUG]  [BUGGY]  final  double  inv  =  FastMath.min(function,  n  +  1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]                AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.min(function,  n  +  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.min(function,  n  +  1);	  final    double    inv    =    FastMath.min(function,    n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	21	None	replace
36	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(function,  -1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.pow(function,  -1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.pow(function,  -1);	  final    double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	8	None	replace
37	[BUG]  [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  [CE]  cannot  find  symbol  xk  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	xk  =  FastMath.pow(inv,  -n  +  1);	  double    xk    =    FastMath.pow(inv,    -n    +    1);    inv    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  cannot  find  symbol  xk	5	None	replace
38	[BUG]  [BUGGY]  inv  =  FastMath.pow(inv,  -n  +  1);  [CE]  cannot  assign  a  value  to  final  variable  inv  [FE]              AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  inv  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	inv  =  FastMath.pow(inv,  -n  +  1);	  double    xk    =    FastMath.pow(inv,    -n    +    1);    inv    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inv	5	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(operandOffset,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	double  xk  =  FastMath.pow(operandOffset,  n  +  1);	  double    xk    =    FastMath.pow(inv,    n    +    1);    	compilable	  [FE]  AssertionError  	24	12	replace
40	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(operandOffset,  n  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(operandOffset,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(operandOffset,  n  +  1);	  double    xk    =    FastMath.pow(inv,    n    +    1);    	compilable	  [FE]  AssertionError  	24	12	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  operandOffset);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	double  xk  =  FastMath.pow(inv,  n  -  operandOffset);	  double    xk    =    FastMath.pow(inv,    n    -    maxOrder);    	compilable	  [FE]  AssertionError  	29	12	replace
42	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  operandOffset);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  operandOffset);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(inv,  n  -  operandOffset);	  double    xk    =    FastMath.pow(inv,    n    -    maxOrder);    	compilable	  [FE]  AssertionError  	29	12	replace
43	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(variablesIndirection,  -n  -  1);  inv  =  FastMath.pow(variablesIndirection,  -n  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(variablesIndirection,  -n  -  1);  inv  =  FastMath.pow(variablesIndirection,  -n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(variablesIndirection,  -n  -  1);  inv  =  FastMath.pow(variablesIndirection,  -n  -  1);	  double    xk    =    FastMath.pow(inv,    -n    -    1);    inv    =    FastMath.pow(inv,    -n    -    1);    	non-compiled	[CE]  cannot  find  symbol  	14	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(operandOffset,  inv  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	double  xk  =  FastMath.pow(operandOffset,  inv  -  1);	  double    xk    =    FastMath.pow(inv,    maxOrder    -    1);    	compilable	  [FE]  AssertionError  	9	12	replace
45	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(operandOffset,  inv  -  1);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(operandOffset,  inv  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(operandOffset,  inv  -  1);	  double    xk    =    FastMath.pow(inv,    maxOrder    -    1);    	compilable	  [FE]  AssertionError  	9	12	replace
46	[BUG]  [BUGGY]  n  =  Math.min(n,  inv);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  n  =  Math.min(n,  inv);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	n  =  Math.min(n,  inv);	  n    =    Math.min(resultOffset,    inv);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	Double  xk  =  FastMath.pow(inv,  -n  +  1);	  double    xk    =    FastMath.pow(inv,    -n    +    1);    Double    xk    =    FastMath.pow(inv,    -n    +    1);    	compilable	  [FE]  AssertionError  	4	12	replace
48	[BUG]  [BUGGY]  Double  xk  =  FastMath.pow(inv,  -n  +  1);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	Double  xk  =  FastMath.pow(inv,  -n  +  1);	  double    xk    =    FastMath.pow(inv,    -n    +    1);    Double    xk    =    FastMath.pow(inv,    -n    +    1);    	compilable	  [FE]  AssertionError  	4	12	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  0);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	add	Double  xk  =  FastMath.pow(inv,  0);	  double    xk    =    FastMath.pow(inv,    -1);    Double    xk    =    FastMath.pow(inv,    -1);    	compilable	  [FE]  AssertionError  	2	12	replace
50	[BUG]  [BUGGY]  Double  xk  =  FastMath.pow(inv,  0);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  Double  xk  =  FastMath.pow(inv,  0);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	Double  xk  =  FastMath.pow(inv,  0);	  double    xk    =    FastMath.pow(inv,    -1);    Double    xk    =    FastMath.pow(inv,    -1);    	compilable	  [FE]  AssertionError  	2	12	replace
51	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(inv,  n  +  1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.pow(inv,  n  +  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.pow(inv,  n  +  1);	  final    double    inv    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	30	None	replace
52	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n  -  1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n  -  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	final  double  inv  =  FastMath.pow(function,  -n  -  1);	  final    double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	8	None	replace
53	[BUG]  [BUGGY]  n  =  FastMath.pow(inv,  -1);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  n  =  FastMath.pow(inv,  -1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	n  =  FastMath.pow(inv,  -1);	  double    xk    =    FastMath.pow(inv,    -1);    double    xk    =    FastMath.pow(inv,    -);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
54	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n  -  1);  inv  =  FastMath.pow(function,  -n  -  1);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]            AssertionError      [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];      [BUGGY]  double  xk  =  FastMath.pow(function,  -n  -  1);  inv  =  FastMath.pow(function,  -n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	895	895	1	replace	double  xk  =  FastMath.pow(function,  -n  -  1);  inv  =  FastMath.pow(function,  -n  -  1);	  double    xk    =    FastMath.pow(inv,    -n    -    1);    inv    =    FastMath.pow(inv,    -n    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	14	None	replace
