bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  float  f  =(float)Math.rint(v,  n  +  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  float  f  =(float)Math.rint(v,  n  +  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.rint(v,  n  +  1);	  float    f    =(float)Math.rint(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	38	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  /=  v;	  coeff    /=    x;    	compilable	  [FE]  AssertionError  	23	4	replace
3	[BUG]  [BUGGY]  coeff  /=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  /=  v;	  coeff    /=    x;    	compilable	  [FE]  AssertionError  	23	4	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  n;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  /=  n;	  coeff    /=    x;    	compilable	  [FE]  AssertionError  	23	4	replace
5	[BUG]  [BUGGY]  coeff  /=  n;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  n;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  /=  n;	  coeff    /=    x;    	compilable	  [FE]  AssertionError  	23	4	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x;  coeff  /=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    /=    x;    coeff  /=  x;	  	compilable	  [FE]  AssertionError  	22	4	add
7	[BUG]  [BUGGY]  coeff  /=  x;  coeff  /=  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x;  coeff  /=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    /=    x;    coeff  /=  x;	  	compilable	  [FE]  AssertionError  	22	4	add
8	[BUG]  [BUGGY]  coeff  /=  x;  double  /=  x;  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x;  double  /=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    /=    x;    double  /=  x;	  	non-compiled	[CE]  unexpected  type	22	None	add
9	[BUG]  [BUGGY]  coeff  /=  x;  x  /=  x;  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x;  x  /=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    /=    x;    x  /=  x;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	22	None	add
10	[BUG]  [BUGGY]  double  coeff  *=  v;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  coeff  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  coeff  *=  v;	  coeff    *=    v;    double    coeff    *=    v;    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  n  *=  v;  double  coeff  *=  v;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  n  *=  v;  double  coeff  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	n  *=  v;  double  coeff  *=  v;	  coeff    *=    v;    double    coeff    *=    v;    	non-compiled	[CE]  ';'  expected	13	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	26	4	add
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	26	4	add
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }	  	non-compiled	[CE]  >  expected	26	None	add
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  int  n  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  int  n  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    int  n  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }	  	non-compiled	[CE]  >  expected	26	None	add
16	[BUG]  [BUGGY]  float  f  =(float)Math.log(v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  float  f  =(float)Math.log(v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.log(v);	  float    f    =(float)Math.floor(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	32	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  1;  coeff  *=  x  +  1;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    *=    x    +    1;    coeff  *=  x  +  1;	  	compilable	  [FE]  AssertionError  	44	4	add
18	[BUG]  [BUGGY]  coeff  *=  x  +  1;  coeff  *=  x  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  1;  coeff  *=  x  +  1;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x    +    1;    coeff  *=  x  +  1;	  	compilable	  [FE]  AssertionError  	44	4	add
19	[BUG]  [BUGGY]  coeff  *=  x  +  1;  double  coeff  *=  x  +  1;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  1;  double  coeff  *=  x  +  1;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x    +    1;    double  coeff  *=  x  +  1;	  	non-compiled	[CE]  ';'  expected	44	None	add
20	[BUG]  [BUGGY]  coeff  *=  x  +  1;  double  x  =  x  +  1;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  1;  double  x  =  x  +  1;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x    +    1;    double  x  =  x  +  1;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	44	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        x;        if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	33	4	add
22	[BUG]  [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	33	4	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        x;        if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	33	4	add
24	[BUG]  [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	33	4	add
25	[BUG]  [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  x  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  x  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    x  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	33	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  f;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	6	4	replace
27	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  f;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	6	4	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  v  +  1;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  *=  v  +  1;	  coeff    *=    x    +    1;    	compilable	  [FE]  AssertionError  	45	4	replace
29	[BUG]  [BUGGY]  coeff  *=  v  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  v  +  1;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  *=  v  +  1;	  coeff    *=    x    +    1;    	compilable	  [FE]  AssertionError  	45	4	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  2;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  *=  x  +  2;	  coeff    *=    x    +    1;    	compilable	  [FE]  AssertionError  	45	4	replace
31	[BUG]  [BUGGY]  coeff  *=  x  +  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  2;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  *=  x  +  2;	  coeff    *=    x    +    1;    	compilable	  [FE]  AssertionError  	45	4	replace
32	[BUG]  [BUGGY]  double  f  =(double)Math.rint(n,  v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                  AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  f  =(double)Math.rint(n,  v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.rint(n,  v);	  int    f    =(int)Math.rint(n,    v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	15	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  coeff    *=    x;    if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	34	4	replace
34	[BUG]  [BUGGY]  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  coeff    *=    x;    if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	34	4	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	v  *=  v;	  coeff    *=    v;    v    *=    v;    	compilable	  [FE]  AssertionError  	43	4	replace
36	[BUG]  [BUGGY]  v  *=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	v  *=  v;	  coeff    *=    v;    v    *=    v;    	compilable	  [FE]  AssertionError  	43	4	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  v  *=  coeff;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	v  *=  coeff;	  coeff    *=    v;    v    *=    v;    	compilable	  [FE]  AssertionError  	43	4	replace
38	[BUG]  [BUGGY]  v  *=  coeff;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  v  *=  coeff;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	v  *=  coeff;	  coeff    *=    v;    v    *=    v;    	compilable	  [FE]  AssertionError  	43	4	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    coeff  *=  x;  coeff  *=  x;  coeff  *=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        x;        coeff    *=    x;    coeff  *=  x;  coeff  *=  x;	  	compilable	  [FE]  AssertionError  	1	4	add
40	[BUG]  [BUGGY]  coeff    *=    x;    coeff  *=  x;  coeff  *=  x;  coeff  *=  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    coeff  *=  x;  coeff  *=  x;  coeff  *=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        coeff    *=    x;    coeff  *=  x;  coeff  *=  x;	  	compilable	  [FE]  AssertionError  	1	4	add
41	[BUG]  [BUGGY]  coeff    *=    x;    coeff  *=  x;  Coeff  *=  x;  coeff  *=  x;  [CE]  cannot  find  symbol  Coeff  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    coeff  *=  x;  Coeff  *=  x;  coeff  *=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        coeff    *=    x;    Coeff  *=  x;  coeff  *=  x;	  	non-compiled	[CE]  cannot  find  symbol  Coeff	1	None	add
42	[BUG]  [BUGGY]  coeff    *=    x;    coeff  *=  x;  x  *=  x;  coeff  *=  x;  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    coeff  *=  x;  x  *=  x;  coeff  *=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        coeff    *=    x;    x  *=  x;  coeff  *=  x;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	1	None	add
43	[BUG]  [BUGGY]  double  x  =  x;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  x  =  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  x  =  x;	  coeff    *=    x;    double    x    =    x;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	4	None	replace
44	[BUG]  [BUGGY]  double  x  =  coeff;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  x  =  coeff;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  x  =  coeff;	  coeff    *=    x;    double    x    =    x;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	4	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	16	4	add
46	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	16	4	add
47	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }	  	non-compiled	[CE]  >  expected	16	None	add
48	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }	  	non-compiled	[CE]  '.class'  expected	16	None	add
49	[BUG]  [BUGGY]  double  coeff  *=  x;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  coeff  *=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  coeff  *=  x;	  coeff    *=    x;    double    coeff    *=    x;    	non-compiled	[CE]  ';'  expected	3	None	replace
50	[BUG]  [BUGGY]  double  v  =  Math.abs(n);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  v  =  Math.abs(n);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(n);	  double    v    =    Math.abs(f);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  coeff    *=    v;    if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    	compilable	  [FE]  AssertionError  	12	4	replace
52	[BUG]  [BUGGY]  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  coeff    *=    v;    if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    	compilable	  [FE]  AssertionError  	12	4	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  1;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  i  =  1;  i  <  n;  i++)  {  coeff  *=  f;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	25	4	replace
54	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  i++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  1;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  i  =  1;  i  <  n;  i++)  {  coeff  *=  f;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	25	4	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  v;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  v;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    	compilable	  [FE]  AssertionError  	17	4	replace
56	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  v;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  v;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    	compilable	  [FE]  AssertionError  	17	4	replace
57	[BUG]  [BUGGY]  luate(operand,  n,  v,  yOffset);  [CE]  cannot  find  symbol  yOffset  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  luate(operand,  n,  v,  yOffset);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	luate(operand,  n,  v,  yOffset);	  luate(operand,    n,    x,    yOffset);    	non-compiled	[CE]  cannot  find  symbol  yOffset	39	None	replace
58	[BUG]  [BUGGY]  luate(operand,  n,  x,  v);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  luate(operand,  n,  x,  v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	luate(operand,  n,  x,  v);	  luate(operand,    n,    x,    yOffset);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
59	[BUG]  [BUGGY]  double  f  =(double)Math.log(v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  f  =(double)Math.log(v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.log(v);	  double    f    =(double)Math.floor(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	28	None	replace
60	[BUG]  [BUGGY]  double  f  =(double)Math.rint(n);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  f  =(double)Math.rint(n);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.rint(n);	  double    f    =(double)Math.rint(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	31	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  x;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
62	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  k  =  0;  k  <  n;  k++)  {  coeff  *=  x;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    f;    }    for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	  	compilable	  [FE]  AssertionError  	5	4	add
64	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    f;    }    for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	  	compilable	  [FE]  AssertionError  	5	4	add
65	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    f;    }    int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	  	non-compiled	[CE]  >  expected	5	None	add
66	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    f;    }    For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	  	non-compiled	[CE]  '.class'  expected	5	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    v  *=  v;  coeff  *=  v;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        v;        v    *=    v;    coeff  *=  v;  v  *=  v;	  	compilable	  [FE]  AssertionError  	42	4	add
68	[BUG]  [BUGGY]  coeff    *=    v;    v  *=  v;  coeff  *=  v;  v  *=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    v  *=  v;  coeff  *=  v;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        v    *=    v;    coeff  *=  v;  v  *=  v;	  	compilable	  [FE]  AssertionError  	42	4	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    v  *=  v;  v  *=  v;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        v;        v    *=    v;    v  *=  v;  v  *=  v;	  	compilable	  [FE]  AssertionError  	42	4	add
70	[BUG]  [BUGGY]  coeff    *=    v;    v  *=  v;  v  *=  v;  v  *=  v;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    v  *=  v;  v  *=  v;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        v    *=    v;    v  *=  v;  v  *=  v;	  	compilable	  [FE]  AssertionError  	42	4	add
71	[BUG]  [BUGGY]  coeff    *=    v;    v  *=  v;  double  v  *=  v;  v  *=  v;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    v  *=  v;  double  v  *=  v;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        v    *=    v;    double  v  *=  v;  v  *=  v;	  	non-compiled	[CE]  ';'  expected	42	None	add
72	[BUG]  [BUGGY]  double  f  =(double)Math.rint(v,  n  +  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  f  =(double)Math.rint(v,  n  +  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.rint(v,  n  +  1);	  double    f    =(double)Math.rint(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	14	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  x;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	27	4	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  x;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	27	4	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }	  	compilable	  [FE]  AssertionError  	24	4	add
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }	  	compilable	  [FE]  AssertionError  	24	4	add
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }	  	non-compiled	[CE]  >  expected	24	None	add
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  For(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  For(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    For(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }	  	non-compiled	[CE]  '.class'  expected	24	None	add
79	[BUG]  [BUGGY]  int  f  =  Math.min(coeff,  n  +  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  int  f  =  Math.min(coeff,  n  +  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(coeff,  n  +  1);	  int    f    =    Math.min(v,    n    +    1);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	19	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        v;        if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	11	4	add
81	[BUG]  [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	11	4	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        v;        if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	11	4	add
83	[BUG]  [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	11	4	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        v;        if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	11	4	add
85	[BUG]  [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	11	4	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	7	4	add
87	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	7	4	add
88	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }	  	non-compiled	[CE]  >  expected	7	None	add
89	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    For(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }	  	non-compiled	[CE]  '.class'  expected	7	None	add
90	[BUG]  [BUGGY]  double  v  =  Math.abs(n  *  resultOffset);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  v  =  Math.abs(n  *  resultOffset);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(n  *  resultOffset);	  double    v    =    Math.abs(f    *    resultOffset);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	20	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    coeff  *=  v;  coeff  *=  v;  coeff  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        v;        coeff    *=    v;    coeff  *=  v;  coeff  *=  v;	  	compilable	  [FE]  AssertionError  	9	4	add
92	[BUG]  [BUGGY]  coeff    *=    v;    coeff  *=  v;  coeff  *=  v;  coeff  *=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    coeff  *=  v;  coeff  *=  v;  coeff  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        coeff    *=    v;    coeff  *=  v;  coeff  *=  v;	  	compilable	  [FE]  AssertionError  	9	4	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        v;        coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	9	4	add
94	[BUG]  [BUGGY]  coeff    *=    v;    coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  coeff  *=  v;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	9	4	add
95	[BUG]  [BUGGY]  coeff    *=    v;    coeff  *=  v;  Coeff  *=  v;  coeff  *=  v;  [CE]  cannot  find  symbol  Coeff  [FE]        AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    coeff  *=  v;  Coeff  *=  v;  coeff  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        coeff    *=    v;    Coeff  *=  v;  coeff  *=  v;	  	non-compiled	[CE]  cannot  find  symbol  Coeff	9	None	add
96	[BUG]  [BUGGY]  int  f  =  Math.min(v,  coeff);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  int  f  =  Math.min(v,  coeff);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(v,  coeff);	  int    f    =    Math.min(coeff,    v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	46	None	replace
97	[BUG]  [BUGGY]  int  f  =  Math.min(coeff,  n  -  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  int  f  =  Math.min(coeff,  n  -  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(coeff,  n  -  1);	  int    f    =    Math.min(v,    n    -    1);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	41	None	replace
98	[BUG]  [BUGGY]  Coeff  *=  v;  [CE]  cannot  find  symbol  Coeff  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  Coeff  *=  v;  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	Coeff  *=  v;	  Coeff    *=    f;    	non-compiled	[CE]  cannot  find  symbol  Coeff	35	None	replace
99	[BUG]  [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  double  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  double  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    double  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	non-compiled	[CE]  ';'  expected	33	None	add
100	[BUG]  [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        if((    n    &    0x1)    ==    0)    {    coeff    *=    x;    }    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  1;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  k  =  1;  k  <  q.length;  k++)  {  coeff  *=  x;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
102	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  1;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  k  =  1;  k  <  q.length;  k++)  {  coeff  *=  x;  }	  for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  *=  x;  v  *=  v;	  coeff    *=    v;    v    *=    v;    	compilable	  [FE]  AssertionError  	43	4	replace
104	[BUG]  [BUGGY]  coeff  *=  x;  v  *=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  *=  x;  v  *=  v;	  coeff    *=    v;    v    *=    v;    	compilable	  [FE]  AssertionError  	43	4	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x;  if((  n  &  0x1)  ==  0)  {  coeff  /=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    /=    x;    if((  n  &  0x1)  ==  0)  {  coeff  /=  x;  }	  	compilable	  [FE]  AssertionError  	22	4	add
106	[BUG]  [BUGGY]  coeff  /=  x;  if((  n  &  0x1)  ==  0)  {  coeff  /=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x;  if((  n  &  0x1)  ==  0)  {  coeff  /=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    /=    x;    if((  n  &  0x1)  ==  0)  {  coeff  /=  x;  }	  	compilable	  [FE]  AssertionError  	22	4	add
107	[BUG]  [BUGGY]  coeff    *=    x;    coeff  *=  x;  double  coeff  *=  x;  coeff  *=  x;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    coeff  *=  x;  double  coeff  *=  x;  coeff  *=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        coeff    *=    x;    double  coeff  *=  x;  coeff  *=  x;	  	non-compiled	[CE]  ';'  expected	1	None	add
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff        *=        x;        coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	1	4	add
109	[BUG]  [BUGGY]  coeff    *=    x;    coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  coeff  *=  x;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    x;    coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  coeff  *=  x;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        x;        coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	1	4	add
110	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }	  	non-compiled	[CE]  >  expected	16	None	add
111	[BUG]  [BUGGY]  coeff    *=    v;    coeff  *=  v;  double  coeff  *=  v;  coeff  *=  v;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    coeff  *=  v;  double  coeff  *=  v;  coeff  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        coeff    *=    v;    double  coeff  *=  v;  coeff  *=  v;	  	non-compiled	[CE]  ';'  expected	9	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  f;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	25	4	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  i  =  0;  i  <  2;  i++)  {  coeff  *=  f;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	25	4	replace
114	[BUG]  [BUGGY]  double  v  =  Math.abs(q);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                  AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  v  =  Math.abs(q);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(q);	  double    v    =    Math.abs(x);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	30	None	replace
115	[BUG]  [BUGGY]  int  coeff  =  Math.min(v,  n);  [CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  int  coeff  =  Math.min(v,  n);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  coeff  =  Math.min(v,  n);	  int    f    =    Math.min(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)	18	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  1;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x  +  1;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    *=    x    +    1;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x  +  1;  }	  	compilable	  [FE]  AssertionError  	44	4	add
117	[BUG]  [BUGGY]  coeff  *=  x  +  1;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x  +  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  x  +  1;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x  +  1;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x    +    1;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x  +  1;  }	  	compilable	  [FE]  AssertionError  	44	4	add
118	[BUG]  [BUGGY]  float  f  =(float)Math.floor(v,  n);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  float  f  =(float)Math.floor(v,  n);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.floor(v,  n);	  float    f    =(float)Math.floor(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	32	None	replace
119	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    f;    }    int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	  	non-compiled	[CE]  >  expected	5	None	add
120	[BUG]  [BUGGY]  coeff  /=  q;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  q;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  /=  q;	  coeff    /=    x;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	23	None	replace
121	[BUG]  [BUGGY]  double  coeff  *=  x2;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  coeff  *=  x2;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  coeff  *=  x2;	  coeff    *=    x;    double    coeff    *=    x;    	non-compiled	[CE]  ';'  expected	3	None	replace
122	[BUG]  [BUGGY]  double  v  =  Math.abs(f  -  1);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  v  =  Math.abs(f  -  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(f  -  1);	  double    v    =    Math.abs(f);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	replace
123	[BUG]  [BUGGY]  coeff    *=    v;    v  *=  v;  double  coeff  *=  v;  v  *=  v;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    v  *=  v;  double  coeff  *=  v;  v  *=  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        v    *=    v;    double  coeff  *=  v;  v  *=  v;	  	non-compiled	[CE]  ';'  expected	42	None	add
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  int  n  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  int  n  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    int  n  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }	  	non-compiled	[CE]  >  expected	24	None	add
125	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    int  q  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }	  	non-compiled	[CE]  >  expected	7	None	add
126	[BUG]  [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  double  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  double  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff        *=        v;        if((    n    &    0x1)    ==    0)    {    coeff    *=    v;    }    double  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  	non-compiled	[CE]  ';'  expected	11	None	add
127	[BUG]  [BUGGY]  coeff  *=  v;  double  x  =  v;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  *=  v;  double  x  =  v;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  *=  v;  double  x  =  v;	  coeff    *=    x;    double    x    =    x;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	4	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  i  =  0;  i  <  n  +  1;  i++)  {  coeff  *=  f;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	25	4	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  i++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  i++)  {  coeff  *=  f;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  i  =  0;  i  <  n  +  1;  i++)  {  coeff  *=  f;  }	  for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    f;    }    	compilable	  [FE]  AssertionError  	25	4	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x2;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  /=  x2;	  coeff    /=    x;    	compilable	  [FE]  AssertionError  	23	4	replace
131	[BUG]  [BUGGY]  coeff  /=  x2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x2;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  /=  x2;	  coeff    /=    x;    	compilable	  [FE]  AssertionError  	23	4	replace
132	[BUG]  [BUGGY]  float  f  =(float)Math.rint(v,  n  -  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  float  f  =(float)Math.rint(v,  n  -  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.rint(v,  n  -  1);	  float    f    =(float)Math.rint(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	38	None	replace
133	[BUG]  [BUGGY]  double  v  =(double)Math.floor(v);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  v  =(double)Math.floor(v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =(double)Math.floor(v);	  double    f    =(double)Math.floor(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	28	None	replace
134	[BUG]  [BUGGY]  double  f  =(double)Math.floor(v  -  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  f  =(double)Math.floor(v  -  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.floor(v  -  1);	  double    f    =(double)Math.floor(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	28	None	replace
135	[BUG]  [BUGGY]  int  f  =  Math.min(coeff,  v  *  x);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  int  f  =  Math.min(coeff,  v  *  x);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(coeff,  v  *  x);	  int    f    =    Math.min(coeff,    v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	46	None	replace
136	[BUG]  [BUGGY]  int  v  =  Math.min(coeff,  v);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  int  v  =  Math.min(coeff,  v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  v  =  Math.min(coeff,  v);	  int    f    =    Math.min(coeff,    v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	46	None	replace
137	[BUG]  [BUGGY]  int  coeff  =  Math.min(coeff,  v);  [CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  int  coeff  =  Math.min(coeff,  v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  coeff  =  Math.min(coeff,  v);	  int    f    =    Math.min(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)	18	None	replace
138	[BUG]  [BUGGY]  float  v  =(float)Math.rint(v);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  float  v  =(float)Math.rint(v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  v  =(float)Math.rint(v);	  float    f    =(float)Math.rint(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	37	None	replace
139	[BUG]  [BUGGY]  float  v  =(float)Math.floor(v);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  float  v  =(float)Math.floor(v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  v  =(float)Math.floor(v);	  float    f    =(float)Math.floor(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	32	None	replace
140	[BUG]  [BUGGY]  float  f  =(float)Math.floor(v  -  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  float  f  =(float)Math.floor(v  -  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.floor(v  -  1);	  float    f    =(float)Math.floor(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	32	None	replace
141	[BUG]  [BUGGY]  double  v  =  Math.abs(coeff);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  v  =  Math.abs(coeff);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(coeff);	  double    v    =    Math.abs(f);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  For(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [CE]  '.class'  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  For(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    For(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }	  	non-compiled	[CE]  '.class'  expected	26	None	add
143	[BUG]  [BUGGY]  double  f  =(double)Math.rint(v,  n  -  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  f  =(double)Math.rint(v,  n  -  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.rint(v,  n  -  1);	  double    f    =(double)Math.rint(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	14	None	replace
144	[BUG]  [BUGGY]  coeff  /=  x;  double  coeff  /=  x;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  coeff  /=  x;  double  coeff  /=  x;  [BUGGY]      function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    /=    x;    double  coeff  /=  x;	  	non-compiled	[CE]  ';'  expected	22	None	add
145	[BUG]  [BUGGY]  double  v  =(double)Math.rint(v);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  v  =(double)Math.rint(v);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =(double)Math.rint(v);	  double    f    =(double)Math.rint(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	31	None	replace
146	[BUG]  [BUGGY]  double  f  =(double)Math.rint(v  -  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }      [BUGGY]  double  f  =(double)Math.rint(v  -  1);  [BUGGY]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.rint(v  -  1);	  double    f    =(double)Math.rint(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	31	None	replace
