bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x;  coeff  *=  x;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    *=    x;    coeff  *=  x;	  	compilable	  [FE]  AssertionError  	6	4	add
2	[BUG]  [BUGGY]  coeff  *=  x;  coeff  *=  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x;  coeff  *=  x;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x;    coeff  *=  x;	  	compilable	  [FE]  AssertionError  	6	4	add
3	[BUG]  [BUGGY]  coeff  *=  x;  double  coeff  *=  x;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x;  double  coeff  *=  x;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x;    double  coeff  *=  x;	  	non-compiled	[CE]  ';'  expected	6	None	add
4	[BUG]  [BUGGY]  coeff  *=  x;  double  x  =  x;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x;  double  x  =  x;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x;    double  x  =  x;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	6	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	9	4	replace
6	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	9	4	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	9	4	replace
8	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  x;  }	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	9	4	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  v;  coeff  *=  v;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    *=    v;    coeff  *=  v;	  	compilable	  [FE]  AssertionError  	4	4	add
10	[BUG]  [BUGGY]  coeff  *=  v;  coeff  *=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  v;  coeff  *=  v;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    v;    coeff  *=  v;	  	compilable	  [FE]  AssertionError  	4	4	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	4	4	add
12	[BUG]  [BUGGY]  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  v;  if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    v;    if((  n  &  0x1)  ==  0)  {  coeff  *=  v;  }	  	compilable	  [FE]  AssertionError  	4	4	add
13	[BUG]  [BUGGY]  coeff  *=  v;  double  coeff  *=  v;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  v;  double  coeff  *=  v;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    v;    double  coeff  *=  v;	  	non-compiled	[CE]  ';'  expected	4	None	add
14	[BUG]  [BUGGY]  double  f  =(double)Math.rint(v,  n);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  double  f  =(double)Math.rint(v,  n);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.rint(v,  n);	      int    f    =(int)Math.rint(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	3	None	replace
15	[BUG]  [BUGGY]  int  f  =(int)Math.rint(n,  v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  int  f  =(int)Math.rint(n,  v);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =(int)Math.rint(n,  v);	      int    f    =(int)Math.rint(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	3	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    	compilable	  [FE]  AssertionError  	10	4	replace
17	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  v;  }	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    	compilable	  [FE]  AssertionError  	10	4	replace
18	[BUG]  [BUGGY]  int  f  =  Math.min(coeff,  n);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  int  f  =  Math.min(coeff,  n);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(coeff,  n);	      int    f    =    Math.min(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
19	[BUG]  [BUGGY]  int  f  =  Math.min(v,  n  +  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  int  f  =  Math.min(v,  n  +  1);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(v,  n  +  1);	      int    f    =    Math.min(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
20	[BUG]  [BUGGY]  double  v  =  Math.abs(f  *  resultOffset);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  double  v  =  Math.abs(f  *  resultOffset);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(f  *  resultOffset);	      double    v    =    Math.abs(v    *    resultOffset);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	12	None	replace
21	[BUG]  [BUGGY]  double  v  =  Math.abs(x  *  resultOffset);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  double  v  =  Math.abs(x  *  resultOffset);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(x  *  resultOffset);	      double    v    =    Math.abs(v    *    resultOffset);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	12	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  /=  x;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  /=  x;	  coeff    *=    x;    	compilable	  [FE]  AssertionError  	7	4	replace
23	[BUG]  [BUGGY]  coeff  /=  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  /=  x;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  /=  x;	  coeff    *=    x;    	compilable	  [FE]  AssertionError  	7	4	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }	      if(n    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  f;  }	      if(n    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }	      if(n    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  coeff  *=  x;  }	      if(n    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    coeff    *=    x;    }    	compilable	  [FE]  AssertionError  	8	4	replace
28	[BUG]  [BUGGY]  double  f  =(double)Math.floor(v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  double  f  =(double)Math.floor(v);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.floor(v);	      int    f    =(int)Math.floor(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	2	None	replace
29	[BUG]  [BUGGY]  double  v  =  Math.abs(f);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  double  v  =  Math.abs(f);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(f);	      double    v    =    Math.abs(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	13	None	replace
30	[BUG]  [BUGGY]  double  v  =  Math.abs(x);  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  double  v  =  Math.abs(x);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  v  =  Math.abs(x);	      double    v    =    Math.abs(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	13	None	replace
31	[BUG]  [BUGGY]  double  f  =(double)Math.rint(v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  double  f  =(double)Math.rint(v);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	double  f  =(double)Math.rint(v);	      int    f    =(int)Math.rint(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	replace
32	[BUG]  [BUGGY]  float  f  =(float)Math.floor(v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  float  f  =(float)Math.floor(v);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.floor(v);	      int    f    =(int)Math.floor(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	2	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	6	4	add
34	[BUG]  [BUGGY]  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x;  if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    x;    if((  n  &  0x1)  ==  0)  {  coeff  *=  x;  }	  	compilable	  [FE]  AssertionError  	6	4	add
35	[BUG]  [BUGGY]  Coeff  *=  f;  [CE]  cannot  find  symbol  Coeff  [FE]          AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  Coeff  *=  f;  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	Coeff  *=  f;	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	non-compiled	[CE]  cannot  find  symbol  Coeff	9	None	replace
36	[BUG]  [BUGGY]  Coeff  *=  x;  [CE]  cannot  find  symbol  Coeff  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  Coeff  *=  x;  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	Coeff  *=  x;	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    x;    }    	non-compiled	[CE]  cannot  find  symbol  Coeff	9	None	replace
37	[BUG]  [BUGGY]  float  f  =(float)Math.rint(v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  float  f  =(float)Math.rint(v);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.rint(v);	      int    f    =(int)Math.rint(v);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	replace
38	[BUG]  [BUGGY]  float  f  =(float)Math.rint(v,  n);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  float  f  =(float)Math.rint(v,  n);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	float  f  =(float)Math.rint(v,  n);	      int    f    =(int)Math.rint(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	3	None	replace
39	[BUG]  [BUGGY]  luate(operand,  n,  x,  yOffset);  [CE]  cannot  find  symbol  yOffset  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  luate(operand,  n,  x,  yOffset);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	luate(operand,  n,  x,  yOffset);	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    	non-compiled	[CE]  cannot  find  symbol  yOffset	10	None	replace
40	[BUG]  [BUGGY]  coeff  *=  y;  [CE]  cannot  find  symbol  y  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  y;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  *=  y;	  coeff    *=    v;    	non-compiled	[CE]  cannot  find  symbol  y	5	None	replace
41	[BUG]  [BUGGY]  int  f  =  Math.min(v,  n  -  1);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  int  f  =  Math.min(v,  n  -  1);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(v,  n  -  1);	      int    f    =    Math.min(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  v;  v  *=  v;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff    *=    v;    v  *=  v;	  	compilable	  [FE]  AssertionError  	4	4	add
43	[BUG]  [BUGGY]  coeff  *=  v;  v  *=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  v;  v  *=  v;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff    *=    v;    v  *=  v;	  	compilable	  [FE]  AssertionError  	4	4	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x  +  1;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	add	coeff  *=  x  +  1;	  coeff    *=    x;    	compilable	  [FE]  AssertionError  	7	4	replace
45	[BUG]  [BUGGY]  coeff  *=  x  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  coeff  *=  x  +  1;  [BUGGY]    function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	coeff  *=  x  +  1;	  coeff    *=    x;    	compilable	  [FE]  AssertionError  	7	4	replace
46	[BUG]  [BUGGY]  int  f  =  Math.min(coeff,  v);  [CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  int  f  =  Math.min(coeff,  v);  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	int  f  =  Math.min(coeff,  v);	      int    f    =    Math.min(v,    n);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
47	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }    [BUGGY]  if(n  >  0)  {  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }  [BUGGY]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1361	1361	1	replace	if(n  >  0)  {  for(int  k  =  0;  k  <  q.length;  k++)  {  coeff  *=  f;  }	      if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    k++)    {    coeff    *=    v;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
