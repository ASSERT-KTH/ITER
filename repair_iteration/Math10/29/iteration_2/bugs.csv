bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  1)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(k  >  1)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
2	[BUG]  [BUGGY]  }  else  if(k  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  1)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(k  >  1)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(n  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(n  >  2)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
4	[BUG]  [BUGGY]  }  else  if(n  >  2)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(n  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  >  2)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
5	[BUG]  [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1];    }    	non-compiled	[CE]  ';'  expected	10	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	1	4	add
7	[BUG]  [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	1	4	add
8	[BUG]  [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  If(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  If(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    If(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  2)  {  q[0]  =  q[1];  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(v    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	11	1	add
10	[BUG]  [BUGGY]  }  else  if(v  >  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  2)  {  q[0]  =  q[1];  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	11	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  2)  {  }  else  if(v  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(v    >    2)    {    }  else  if(v  >  2)  {	  	compilable	  [FE]  AssertionError  	11	4	add
12	[BUG]  [BUGGY]  }  else  if(v  >  2)  {  }  else  if(v  >  2)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  2)  {  }  else  if(v  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    2)    {    }  else  if(v  >  2)  {	  	compilable	  [FE]  AssertionError  	11	4	add
13	[BUG]  [BUGGY]  }  else  if(v  >  2)  {  for(int  q[0]  =  q[1];  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  2)  {  for(int  q[0]  =  q[1];  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    2)    {    for(int  q[0]  =  q[1];	  	non-compiled	[CE]  ']'  expected	11	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;	  	compilable	  [FE]  AssertionError  	5	1	add
15	[BUG]  [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;	  	compilable	  [FE]  AssertionError  	5	1	add
16	[BUG]  [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x2);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x2);  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[0]    =    v    *    x2;    q[0]  =  v  *  x2);	  	non-compiled	[CE]  ';'  expected	5	None	add
17	[BUG]  [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x1;  [CE]  cannot  find  symbol  x1  [FE]        AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x1;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[0]    =    v    *    x2;    q[0]  =  v  *  x1;	  	non-compiled	[CE]  cannot  find  symbol  x1	5	None	add
18	[BUG]  [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	2	4	replace
21	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	2	4	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  x2  +  q[k  -  2];	      q[n    -    1]    =    v    *    x2    +    q[n    -    2];    	compilable	  [FE]  AssertionError  	16	4	replace
23	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[k  -  2];	      q[n    -    1]    =    v    *    x2    +    q[n    -    2];    	compilable	  [FE]  AssertionError  	16	4	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(n  <  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(n  <  2)  {	  }    else    if(v    >    2)    {    	compilable	  [FE]  AssertionError  	12	4	replace
25	[BUG]  [BUGGY]  }  else  if(n  <  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(n  <  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  <  2)  {	  }    else    if(v    >    2)    {    	compilable	  [FE]  AssertionError  	12	4	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	3	1	add
27	[BUG]  [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	3	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	3	1	add
29	[BUG]  [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	3	1	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	4	4	replace
31	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	4	4	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	compilable	  [FE]  AssertionError  	17	1	add
33	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	compilable	  [FE]  AssertionError  	17	1	add
34	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[ki  -  1];  [CE]  cannot  find  symbol  ki  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[ki  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[ki  -  1];	  	non-compiled	[CE]  cannot  find  symbol  ki	17	None	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  2)  {  }  else  if(k  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(k    >    2)    {    }  else  if(k  >  2)  {	  	compilable	  [FE]  AssertionError  	7	1	add
36	[BUG]  [BUGGY]  }  else  if(k  >  2)  {  }  else  if(k  >  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  2)  {  }  else  if(k  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    2)    {    }  else  if(k  >  2)  {	  	compilable	  [FE]  AssertionError  	7	1	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  2)  {  q[0]  =  q[1];  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(k    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	7	1	add
38	[BUG]  [BUGGY]  }  else  if(k  >  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  2)  {  q[0]  =  q[1];  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	7	1	add
39	[BUG]  [BUGGY]  }  else  if(k  >  2)  {  else  if(k  >  2)  {  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  2)  {  else  if(k  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    2)    {    else  if(k  >  2)  {	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	15	1	add
41	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	15	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	compilable	  [FE]  AssertionError  	15	1	add
43	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	compilable	  [FE]  AssertionError  	15	1	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	13	1	add
45	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	13	1	add
46	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1].;	  	non-compiled	[CE]  <identifier>  expected	13	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[0]  =  v  *  x;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]  =  v  *  x;	      q[0]    =    v    *    x2;    	compilable	  [FE]  AssertionError  	6	4	replace
48	[BUG]  [BUGGY]  q[0]  =  v  *  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[0]  =  v  *  x;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x;	      q[0]    =    v    *    x2;    	compilable	  [FE]  AssertionError  	6	4	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	4	4	replace
50	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	4	4	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	4	4	replace
52	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	4	4	replace
53	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[x2  +  q[k  -  1];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  q[x2  +  q[k  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[x2  +  q[k  -  1];	      q[n    -    1]    =    v    *    x2    +    q[k    -    1];    	non-compiled	[CE]  ']'  expected	18	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[0]  =  v  *  x2  +  q[1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]  =  v  *  x2  +  q[1];	      q[0]    =    v    *    x2;    	compilable	  [FE]  AssertionError  	6	4	replace
55	[BUG]  [BUGGY]  q[0]  =  v  *  x2  +  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[0]  =  v  *  x2  +  q[1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x2  +  q[1];	      q[0]    =    v    *    x2;    	compilable	  [FE]  AssertionError  	6	4	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  0)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(k  >  0)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
57	[BUG]  [BUGGY]  }  else  if(k  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(k  >  0)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(k  >  0)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  q[n  -  1];	      q[n    -    1]    =    v    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	14	4	replace
59	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[n  -  1];	      q[n    -    1]    =    v    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	14	4	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	2	4	replace
61	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	2	4	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  0)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(v  >  0)  {	  }    else    if(v    >    2)    {    	compilable	  [FE]  AssertionError  	12	1	replace
63	[BUG]  [BUGGY]  }  else  if(v  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  0)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(v  >  0)  {	  }    else    if(v    >    2)    {    	compilable	  [FE]  AssertionError  	12	1	replace
64	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  int  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  int  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    int  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	non-compiled	[CE]  ']'  expected	17	None	add
65	[BUG]  [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x2,;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[0]  =  v  *  x2;  q[0]  =  v  *  x2,;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[0]    =    v    *    x2;    q[0]  =  v  *  x2,;	  	non-compiled	[CE]  ';'  expected	5	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  q[n  -  2];	      q[n    -    1]    =    v    *    x2    +    q[n    -    2];    	compilable	  [FE]  AssertionError  	16	4	replace
67	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[n  -  2];	      q[n    -    1]    =    v    *    x2    +    q[n    -    2];    	compilable	  [FE]  AssertionError  	16	4	replace
68	[BUG]  [BUGGY]  }  else  if(v  >  2)  {  else  if(v  >  2)  {  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  2)  {  else  if(v  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    2)    {    else  if(v  >  2)  {	  	non-compiled	[CE]  'else'  without  'if'	11	None	add
69	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  ']'  expected	9	None	replace
70	[BUG]  [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
71	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  int  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  int  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    int  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	non-compiled	[CE]  ']'  expected	13	None	add
72	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[N  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  cannot  find  symbol  N  [FE]      AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[N  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[N  -  1]  =  v  *  x2  +  q[n  -  1];	  	non-compiled	[CE]  cannot  find  symbol  N	13	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	3	1	add
74	[BUG]  [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	3	1	add
75	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    int  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	non-compiled	[CE]  ']'  expected	15	None	add
76	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1];  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1];  }	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1];    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
77	[BUG]  [BUGGY]  n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(n  >  0)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(n  >  0)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
79	[BUG]  [BUGGY]  }  else  if(n  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(n  >  0)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  >  0)  {	  }    else    if(k    >    2)    {    	compilable	  [FE]  AssertionError  	8	1	replace
80	[BUG]  [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1];    }    	non-compiled	[CE]  ']'  expected	10	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  q[k  -  1];	      q[n    -    1]    =    v    *    x2    +    q[k    -    1];    	compilable	  [FE]  AssertionError  	18	4	replace
82	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[k  -  1];	      q[n    -    1]    =    v    *    x2    +    q[k    -    1];    	compilable	  [FE]  AssertionError  	18	4	replace
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	2	4	replace
84	[BUG]  [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	2	4	replace
85	[BUG]  [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +	      if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
86	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1].;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1].;	  	non-compiled	[CE]  <identifier>  expected	17	None	add
87	[BUG]  [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	      if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]      q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].;  [BUGGY]    }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2].;	  	non-compiled	[CE]  <identifier>  expected	15	None	add
89	[BUG]  [BUGGY]  }  else  if(v  >  2)  {  if(v  >  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];    [BUGGY]  }  else  if(v  >  2)  {  if(v  >  2)  {  [BUGGY]    q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    2)    {    if(v  >  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
