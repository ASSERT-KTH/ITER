bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  }  else  if(v  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(v        >        2)        {        q[0]    =    q[1];    }  else  if(v  >  2)  {  q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	9	1	add
2	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  }  else  if(v  >  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  }  else  if(v  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        q[0]    =    q[1];    }  else  if(v  >  2)  {  q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	9	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(v        >        2)        {        q[0]    =    q[1];    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	9	1	add
4	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  q[0]  =  q[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        q[0]    =    q[1];    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	9	1	add
5	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  else  if(v  >  2)  {  q[0]  =  q[1];  }  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  else  if(v  >  2)  {  q[0]  =  q[1];  }  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        q[0]    =    q[1];    else  if(v  >  2)  {  q[0]  =  q[1];  }	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(n  >  2)  {  q[0]  =  q[1];	  }    else    if(v    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	10	1	replace
7	[BUG]  [BUGGY]  }  else  if(n  >  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  >  2)  {  q[0]  =  q[1];	  }    else    if(v    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	10	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(n  <  2)  {  q[0]  =  q[1];	  }    else    if(v    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	10	4	replace
9	[BUG]  [BUGGY]  }  else  if(n  <  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  <  2)  {  q[0]  =  q[1];	  }    else    if(v    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	10	4	replace
10	[BUG]  [BUGGY]  if(n  >  2)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  2)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
11	[BUG]  [BUGGY]  int  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  int  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	int  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    int    q[n    -    1]    =    v    *    x2    +    q[n    -    1];    	non-compiled	[CE]  ']'  expected	71	None	replace
12	[BUG]  [BUGGY]  n  <  2  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  n  <  2  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	n  <  2  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  2)  {  q[0]  =  v  *  x2  +  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  2)  {  q[0]  =  v  *  x2  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  2)  {  q[0]  =  v  *  x2  +	  n    >    0)    {    q[1]    =    v    *    x2    +    q[n    -    1];    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    	non-compiled	[CE]  not  a  statement	77	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	49	1	add
15	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	49	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	49	1	add
17	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	49	1	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(n  >  1)  {	  }    else    if(n    >    0)    {    	compilable	  [FE]  AssertionError  	79	1	replace
19	[BUG]  [BUGGY]  }  else  if(n  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  >  1)  {	  }    else    if(n    >    0)    {    	compilable	  [FE]  AssertionError  	79	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[0]        =        v        *        x2;        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;	  	compilable	  [FE]  AssertionError  	14	1	add
21	[BUG]  [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[0]        =        v        *        x2;        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;	  	compilable	  [FE]  AssertionError  	14	1	add
22	[BUG]  [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[0]  =  v  *  x1;  [CE]  cannot  find  symbol  x1  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[0]  =  v  *  x1;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[0]        =        v        *        x2;        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x1;	  	non-compiled	[CE]  cannot  find  symbol  x1	14	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  }  else  if(v  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(v        >        2)        {        }    else    if(v    >    2)    {    }  else  if(v  >  2)  {	  	compilable	  [FE]  AssertionError  	11	4	add
24	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  }  else  if(v  >  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  }  else  if(v  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        }    else    if(v    >    2)    {    }  else  if(v  >  2)  {	  	compilable	  [FE]  AssertionError  	11	4	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(v        >        2)        {        }    else    if(v    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	11	4	add
26	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        }    else    if(v    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	11	4	add
27	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  else  if(v  >  2)  {  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  else  if(v  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        }    else    if(v    >    2)    {    else  if(v  >  2)  {	  	non-compiled	[CE]  'else'  without  'if'	11	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	20	1	add
29	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	20	1	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	20	4	add
31	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	20	4	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n    -    1]    =    v    *    q[k    -    1];    q[n  -  1]  =  v  *  q[k  -  1];	  	compilable	  [FE]  AssertionError  	81	1	add
33	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[k  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[k    -    1];    q[n  -  1]  =  v  *  q[k  -  1];	  	compilable	  [FE]  AssertionError  	81	1	add
34	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[K  -  1];  [CE]  cannot  find  symbol  K  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[K  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[k    -    1];    q[n  -  1]  =  v  *  q[K  -  1];	  	non-compiled	[CE]  cannot  find  symbol  K	81	None	add
35	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[ki  -  1];  [CE]  cannot  find  symbol  ki  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[ki  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[k    -    1];    q[n  -  1]  =  v  *  q[ki  -  1];	  	non-compiled	[CE]  cannot  find  symbol  ki	81	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  if(n    <    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	84	4	replace
37	[BUG]  [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  if(n    <    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	84	4	replace
38	[BUG]  [BUGGY]  int  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  int  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	int  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    int    q[n    -    1]    =    v    *    x2    +    q[k    -    1];    	non-compiled	[CE]  ']'  expected	64	None	replace
39	[BUG]  [BUGGY]  q[0]  =  v  *  x1;  [CE]  cannot  find  symbol  x1  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x1;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x1;	  q[0]    =    v    *    x;    	non-compiled	[CE]  cannot  find  symbol  x1	48	None	replace
40	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]	  if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    	non-compiled	[CE]  ';'  expected	5	None	replace
41	[BUG]  [BUGGY]  if(n  >  2)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  2)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	31	4	replace
43	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	31	4	replace
44	[BUG]  [BUGGY]  }  else  if(n  >  2)  {  for(int  q[0]  =  q[1];  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  2)  {  for(int  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  >  2)  {  for(int  q[0]  =  q[1];	  }    else    if(v    >    2)    {    for(int    q[0]    =    q[1];    	non-compiled	[CE]  ']'  expected	13	None	replace
45	[BUG]  [BUGGY]  }  else  if(n  <  2)  {  for(int  q[0]  =  q[1];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  2)  {  for(int  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  <  2)  {  for(int  q[0]  =  q[1];	  }    else    if(v    >    2)    {    for(int    q[0]    =    q[1];    	non-compiled	[CE]  ']'  expected	13	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];	  	compilable	  [FE]  AssertionError  	66	1	add
47	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];	  	compilable	  [FE]  AssertionError  	66	1	add
48	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  q[N  -  1]  =  v  *  q[n  -  2];  [CE]  cannot  find  symbol  N  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  q[N  -  1]  =  v  *  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    2];    q[N  -  1]  =  v  *  q[n  -  2];	  	non-compiled	[CE]  cannot  find  symbol  N	66	None	add
49	[BUG]  [BUGGY]  int  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  int  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	int  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    int    q[n    -    1]    =    v    *    x2    +    q[n    -    2];    	non-compiled	[CE]  ']'  expected	75	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2  +  q[1];  q[0]  =  v  *  x2  +  q[1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]    =    v    *    x2    +    q[1];    q[0]  =  v  *  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	54	1	add
51	[BUG]  [BUGGY]  q[0]  =  v  *  x2  +  q[1];  q[0]  =  v  *  x2  +  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2  +  q[1];  q[0]  =  v  *  x2  +  q[1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]    =    v    *    x2    +    q[1];    q[0]  =  v  *  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	54	1	add
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	44	1	add
53	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	44	1	add
54	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x1  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  cannot  find  symbol  x1  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x1  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x1  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	non-compiled	[CE]  cannot  find  symbol  x1	44	None	add
55	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x1  +  q[n  -  1];  [CE]  cannot  find  symbol  x1  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x1  +  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x1  +  q[n  -  1];	  	non-compiled	[CE]  cannot  find  symbol  x1	44	None	add
56	[BUG]  [BUGGY]  n  <  2  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  n  <  2  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	n  <  2  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    3];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	compilable	  [FE]  AssertionError  	42	1	add
58	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    3];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	compilable	  [FE]  AssertionError  	42	1	add
59	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x1  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [CE]  cannot  find  symbol  x1  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x1  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    3];    q[n  -  1]  =  v  *  x1  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	non-compiled	[CE]  cannot  find  symbol  x1	42	None	add
60	[BUG]  [BUGGY]  q[0]  =  v  *  x2,;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2,;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x2,;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2,;    	non-compiled	[CE]  ';'  expected	65	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  1)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(k    >    1)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	1	1	add
62	[BUG]  [BUGGY]  }  else  if(k  >  1)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  1)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    1)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	1	1	add
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  1)  {  }  else  if(k  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(k    >    1)    {    }  else  if(k  >  1)  {	  	compilable	  [FE]  AssertionError  	1	4	add
64	[BUG]  [BUGGY]  }  else  if(k  >  1)  {  }  else  if(k  >  1)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  1)  {  }  else  if(k  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    1)    {    }  else  if(k  >  1)  {	  	compilable	  [FE]  AssertionError  	1	4	add
65	[BUG]  [BUGGY]  }  else  if(k  >  1)  {  else  if(k  >  1)  {  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  1)  {  else  if(k  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    1)    {    else  if(k  >  1)  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
66	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[	  if(n    >    3)    {    q[1]    =    v    *    x2    +    q[n    -    1];    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    	non-compiled	[CE]  ']'  expected	69	None	replace
67	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[1  +  q[k  -  1];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[1  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[1  +  q[k  -  1];	  q[n    -    1]    =    v    *    q[x2    +    q[k    -    1];    	non-compiled	[CE]  ']'  expected	53	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	73	1	add
69	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	73	1	add
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	73	1	add
71	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	73	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	73	1	add
73	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	73	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
75	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
77	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
79	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
80	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2[n  -  2];  [CE]  array  required,  but  double  found  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2[n  -  2];	  q[n    -    1]    =    v    *    q[n    -    2];    	non-compiled	[CE]  array  required,  but  double  found	67	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[n        -        1]        =        v        *        x2        +        q[k        -        1];        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	compilable	  [FE]  AssertionError  	32	1	add
82	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[k        -        1];        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	compilable	  [FE]  AssertionError  	32	1	add
83	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x1  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [CE]  cannot  find  symbol  x1  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x1  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[k        -        1];        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x1  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	non-compiled	[CE]  cannot  find  symbol  x1	32	None	add
84	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x1  +  q[k  -  1];  [CE]  cannot  find  symbol  x1  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x1  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[k        -        1];        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x1  +  q[k  -  1];	  	non-compiled	[CE]  cannot  find  symbol  x1	32	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n    -    1]    =    v    *    x2    +    q[k    -    2];    q[n  -  1]  =  v  *  x2  +  q[k  -  2];	  	compilable	  [FE]  AssertionError  	22	1	add
86	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    x2    +    q[k    -    2];    q[n  -  1]  =  v  *  x2  +  q[k  -  2];	  	compilable	  [FE]  AssertionError  	22	1	add
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n    -    1]    =    v    *    x2    +    q[k    -    2];    q[n  -  1]  =  v  *  x2  +  q[k  -  3];	  	compilable	  [FE]  AssertionError  	22	1	add
88	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    x2    +    q[k    -    2];    q[n  -  1]  =  v  *  x2  +  q[k  -  3];	  	compilable	  [FE]  AssertionError  	22	1	add
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	60	1	add
90	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	60	1	add
91	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  If(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  If(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    If(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	non-compiled	[CE]  ';'  expected	60	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	26	1	add
93	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	26	1	add
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	26	1	add
95	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	26	1	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	26	1	add
97	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	26	1	add
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(n    >    0)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	78	1	add
99	[BUG]  [BUGGY]  }  else  if(n  >  0)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    0)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	78	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  q[0]  =  q[1];  }  else  if(n  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(n    >    0)    {    q[0]  =  q[1];  }  else  if(n  >  0)  {	  	compilable	  [FE]  AssertionError  	78	1	add
101	[BUG]  [BUGGY]  }  else  if(n  >  0)  {  q[0]  =  q[1];  }  else  if(n  >  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  q[0]  =  q[1];  }  else  if(n  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    0)    {    q[0]  =  q[1];  }  else  if(n  >  0)  {	  	compilable	  [FE]  AssertionError  	78	1	add
102	[BUG]  [BUGGY]  }  else  if(n  >  0)  {  for(int  n  =  0;  n  <  q.length;  ++n)  {  q[0]  =  q[1];  }  [CE]  variable  n  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  for(int  n  =  0;  n  <  q.length;  ++n)  {  q[0]  =  q[1];  }  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    0)    {    for(int  n  =  0;  n  <  q.length;  ++n)  {  q[0]  =  q[1];  }	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  atan(double[],int,double[],int)	78	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	74	4	replace
104	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	74	4	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(v    >    0)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	62	1	add
106	[BUG]  [BUGGY]  }  else  if(v  >  0)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    0)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	62	1	add
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  q[0]  =  q[1];  }  else  if(v  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(v    >    0)    {    q[0]  =  q[1];  }  else  if(v  >  0)  {	  	compilable	  [FE]  AssertionError  	62	1	add
108	[BUG]  [BUGGY]  }  else  if(v  >  0)  {  q[0]  =  q[1];  }  else  if(v  >  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  q[0]  =  q[1];  }  else  if(v  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    0)    {    q[0]  =  q[1];  }  else  if(v  >  0)  {	  	compilable	  [FE]  AssertionError  	62	1	add
109	[BUG]  [BUGGY]  }  else  if(v  >  0)  {  for(int  q[0]  =  q[1];  }  else  if(v  >  0)  {  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  for(int  q[0]  =  q[1];  }  else  if(v  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    0)    {    for(int  q[0]  =  q[1];  }  else  if(v  >  0)  {	  	non-compiled	[CE]  ']'  expected	62	None	add
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
111	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
113	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    3];    	compilable	  [FE]  AssertionError  	43	4	replace
115	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[k  -  3];	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    3];    	compilable	  [FE]  AssertionError  	43	4	replace
116	[BUG]  [BUGGY]  if(n  <  =  order)  {  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  =  order)  {  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  =  order)  {  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    =    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  2)  {  }  else  if(n  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(n    >    2)    {    }  else  if(n  >  2)  {	  	compilable	  [FE]  AssertionError  	3	4	add
118	[BUG]  [BUGGY]  }  else  if(n  >  2)  {  }  else  if(n  >  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  2)  {  }  else  if(n  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    2)    {    }  else  if(n  >  2)  {	  	compilable	  [FE]  AssertionError  	3	4	add
119	[BUG]  [BUGGY]  }  else  if(n  >  2)  {  else  if(n  >  2)  {  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  2)  {  else  if(n  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    2)    {    else  if(n  >  2)  {	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  2)  {  }  else  if(n  <  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(n    <    2)    {    }  else  if(n  <  2)  {	  	compilable	  [FE]  AssertionError  	24	1	add
121	[BUG]  [BUGGY]  }  else  if(n  <  2)  {  }  else  if(n  <  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  2)  {  }  else  if(n  <  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    <    2)    {    }  else  if(n  <  2)  {	  	compilable	  [FE]  AssertionError  	24	1	add
122	[BUG]  [BUGGY]  }  else  if(n  <  2)  {  else  if(n  <  2)  {  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  2)  {  else  if(n  <  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    <    2)    {    else  if(n  <  2)  {	  	non-compiled	[CE]  'else'  without  'if'	24	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x;  q[0]  =  v  *  x;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]    =    v    *    x;    q[0]  =  v  *  x;	  	compilable	  [FE]  AssertionError  	47	1	add
124	[BUG]  [BUGGY]  q[0]  =  v  *  x;  q[0]  =  v  *  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x;  q[0]  =  v  *  x;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]    =    v    *    x;    q[0]  =  v  *  x;	  	compilable	  [FE]  AssertionError  	47	1	add
125	[BUG]  [BUGGY]  q[0]  =  v  *  x;  int  q[0]  =  v  *  x;  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x;  int  q[0]  =  v  *  x;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]    =    v    *    x;    int  q[0]  =  v  *  x;	  	non-compiled	[CE]  ']'  expected	47	None	add
126	[BUG]  [BUGGY]  q[0]  =  v  *  x;  q[0]  =  v  *  x);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x;  q[0]  =  v  *  x);  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]    =    v    *    x;    q[0]  =  v  *  x);	  	non-compiled	[CE]  ';'  expected	47	None	add
127	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[	  if(n    >    0)    {    q[1]    =    v    *    x2    +    q[k    -    1];    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    	non-compiled	[CE]  ']'  expected	80	None	replace
128	[BUG]  [BUGGY]  if(n  <  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  3)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +	  if(n    >    3)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
129	[BUG]  [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    If(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
130	[BUG]  [BUGGY]  }  else  if(v  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  <  =  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(v  <  =  0)  {	  }    else    if(v    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
131	[BUG]  [BUGGY]  n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2  +  q[0];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]  =  v  *  x2  +  q[0];	  q[0]    =    v    *    x2    +    q[1];    	compilable	  [FE]  AssertionError  	55	4	replace
133	[BUG]  [BUGGY]  q[0]  =  v  *  x2  +  q[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2  +  q[0];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x2  +  q[0];	  q[0]    =    v    *    x2    +    q[1];    	compilable	  [FE]  AssertionError  	55	4	replace
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  }  else  if(k  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(k        >        2)        {        q[0]    =    q[1];    }  else  if(k  >  2)  {  q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	37	1	add
135	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  }  else  if(k  >  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  }  else  if(k  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        q[0]    =    q[1];    }  else  if(k  >  2)  {  q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	37	1	add
136	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  else  if(k  >  2)  {  q[0]  =  q[1];  }  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  else  if(k  >  2)  {  q[0]  =  q[1];  }  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        q[0]    =    q[1];    else  if(k  >  2)  {  q[0]  =  q[1];  }	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(k        >        2)        {        q[0]    =    q[1];    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	37	1	add
138	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  q[0]  =  q[1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        q[0]    =    q[1];    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	37	1	add
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	28	1	add
140	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	28	1	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	28	1	add
142	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	28	1	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	28	1	add
144	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	28	1	add
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  f;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]  =  v  *  f;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x1;    	compilable	  [FE]  AssertionError  	17	4	replace
146	[BUG]  [BUGGY]  q[0]  =  v  *  f;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  f;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  f;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x1;    	compilable	  [FE]  AssertionError  	17	4	replace
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(k    >    0)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	56	1	add
148	[BUG]  [BUGGY]  }  else  if(k  >  0)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    0)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	56	1	add
149	[BUG]  [BUGGY]  }  else  if(k  >  0)  {  for(int  k  =  0;  k  <  n;  k++)  {  q[0]  =  q[1];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  for(int  k  =  0;  k  <  n;  k++)  {  q[0]  =  q[1];  }  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    0)    {    for(int  k  =  0;  k  <  n;  k++)  {  q[0]  =  q[1];  }	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	56	None	add
150	[BUG]  [BUGGY]  }  else  if(k  >  0)  {  for(int  k  =  0;  k  <  q.length;  k++)  {  q[0]  =  q[1];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  for(int  k  =  0;  k  <  q.length;  k++)  {  q[0]  =  q[1];  }  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    0)    {    for(int  k  =  0;  k  <  q.length;  k++)  {  q[0]  =  q[1];  }	  	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	56	None	add
151	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +	  if(n    >    0)    {    q[1]    =    v    *    x2    +    q[k    -    1];    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[n  -  1]  =  v  *  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n    -    1]    =    v    *    q[n    -    1];    q[n  -  1]  =  v  *  q[n  -  1];	  	compilable	  [FE]  AssertionError  	58	1	add
153	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[n  -  1]  =  v  *  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[n  -  1]  =  v  *  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    1];    q[n  -  1]  =  v  *  q[n  -  1];	  	compilable	  [FE]  AssertionError  	58	1	add
154	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[N  -  1]  =  v  *  q[n  -  1];  [CE]  cannot  find  symbol  N  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[N  -  1]  =  v  *  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    1];    q[N  -  1]  =  v  *  q[n  -  1];	  	non-compiled	[CE]  cannot  find  symbol  N	58	None	add
155	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[n  -  1]  =  v  *  q[N  -  1];  [CE]  cannot  find  symbol  N  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[n  -  1]  =  v  *  q[N  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    1];    q[n  -  1]  =  v  *  q[N  -  1];	  	non-compiled	[CE]  cannot  find  symbol  N	58	None	add
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	51	1	add
157	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	51	1	add
158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	51	1	add
159	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	51	1	add
160	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +	  if(n    >    0)    {    q[1]    =    v    *    x2    +    q[n    -    1];    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	83	4	add
162	[BUG]  [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	83	4	add
163	[BUG]  [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  If(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  If(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    If(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	non-compiled	[CE]  ';'  expected	83	None	add
164	[BUG]  [BUGGY]  q[0]  =  v  *  x1;  q[0]  =  v  *  x2;  [CE]  cannot  find  symbol  x1  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x1;  q[0]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x1;  q[0]  =  v  *  x2;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2;    	non-compiled	[CE]  cannot  find  symbol  x1	15	None	replace
165	[BUG]  [BUGGY]  q[0]  =  v  *  x1;  q[0]  =  v  *  x2);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x1;  q[0]  =  v  *  x2);  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x1;  q[0]  =  v  *  x2);	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2);    	non-compiled	[CE]  ';'  expected	16	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  }  else  if(k  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(k        >        2)        {        }    else    if(k    >    2)    {    }  else  if(k  >  2)  {	  	compilable	  [FE]  AssertionError  	35	1	add
167	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  }  else  if(k  >  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  }  else  if(k  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        }    else    if(k    >    2)    {    }  else  if(k  >  2)  {	  	compilable	  [FE]  AssertionError  	35	1	add
168	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(k        >        2)        {        }    else    if(k    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	35	1	add
169	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        }    else    if(k    >    2)    {    q[0]  =  q[1];	  	compilable	  [FE]  AssertionError  	35	1	add
170	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  else  if(k  >  2)  {  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  else  if(k  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        }    else    if(k    >    2)    {    else  if(k  >  2)  {	  	non-compiled	[CE]  'else'  without  'if'	35	None	add
171	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	40	1	add
172	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	40	1	add
173	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	compilable	  [FE]  AssertionError  	40	1	add
174	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	compilable	  [FE]  AssertionError  	40	1	add
175	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x1  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [CE]  cannot  find  symbol  x1  [FE]        AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x1  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x1  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	non-compiled	[CE]  cannot  find  symbol  x1	40	None	add
176	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  1].;	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n    -    1]    =    v    *    x2    +    q[n    -    1].;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
177	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  1].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  1].;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[k  -  1].;	          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n    -    1]    =    v    *    x2    +    q[k    -    1].;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
178	[BUG]  [BUGGY]  if(n  <  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +	  if(n    >    1)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  <  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(k  <  2)  {  q[0]  =  q[1];	  }    else    if(k    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	38	1	replace
180	[BUG]  [BUGGY]  }  else  if(k  <  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  <  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(k  <  2)  {  q[0]  =  q[1];	  }    else    if(k    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	38	1	replace
181	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    2].;    	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	51	1	add
183	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  1)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	51	1	add
184	[BUG]  [BUGGY]  q[0]  =  v  *  x;  for(int  q[0]  =  v  *  x;  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x;  for(int  q[0]  =  v  *  x;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]    =    v    *    x;    for(int  q[0]  =  v  *  x;	  	non-compiled	[CE]  ']'  expected	47	None	add
185	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x1  +  q[n  -  1];  q[N  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  cannot  find  symbol  x1  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x1  +  q[n  -  1];  q[N  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x1  +  q[n  -  1];  q[N  -  1]  =  v  *  x2  +  q[n  -  1];	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[N    -    1]    =    v    *    x2    +    q[n    -    1];    	non-compiled	[CE]  cannot  find  symbol  x1	72	None	replace
186	[BUG]  [BUGGY]  q[0]  =  v  *  q2  +  q[1];  [CE]  cannot  find  symbol  q2  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  q2  +  q[1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  q2  +  q[1];	  q[0]    =    v    *    x2    +    q[1];    	non-compiled	[CE]  cannot  find  symbol  q2	55	None	replace
187	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  int  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  int  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    x2    +    q[k    -    2];    int  q[n  -  1]  =  v  *  x2  +  q[k  -  2];	  	non-compiled	[CE]  ']'  expected	22	None	add
188	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1]  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1]	  	non-compiled	[CE]  ';'  expected	44	None	add
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	27	4	replace
190	[BUG]  [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	27	4	replace
191	[BUG]  [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
192	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  +  q[k  -  2];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  +  q[k  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[n  +  q[k  -  2];	  q[n    -    1]    =    v    *    x2    +    q[k    -    2];    	non-compiled	[CE]  ']'  expected	23	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2;  q[0]  =  v  *  q[1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]  =  v  *  x2;  q[0]  =  v  *  q[1];	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2,;    	compilable	  [FE]  AssertionError  	65	4	replace
194	[BUG]  [BUGGY]  q[0]  =  v  *  x2;  q[0]  =  v  *  q[1];  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2;  q[0]  =  v  *  q[1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x2;  q[0]  =  v  *  q[1];	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2,;    	compilable	  [FE]  AssertionError  	65	4	replace
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	21	4	replace
196	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	21	4	replace
197	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[1]  =  v  *  x2;  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	21	4	replace
198	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  1)  {  q[1]  =  v  *  x2;  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	21	4	replace
199	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  int  q[n  -  1]  =  v  *  q[n  -  2];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  int  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    2];    int  q[n  -  1]  =  v  *  q[n  -  2];	  	non-compiled	[CE]  ']'  expected	66	None	add
200	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  for(n  -  1]  =  v  *  q[n  -  2];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  2];  for(n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    2];    for(n  -  1]  =  v  *  q[n  -  2];	  	non-compiled	[CE]  not  a  statement	66	None	add
201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  q[0]  =  q[1];  }  else  if(k  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(k    >    0)    {    q[0]  =  q[1];  }  else  if(k  >  0)  {	  	compilable	  [FE]  AssertionError  	56	1	add
202	[BUG]  [BUGGY]  }  else  if(k  >  0)  {  q[0]  =  q[1];  }  else  if(k  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  q[0]  =  q[1];  }  else  if(k  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    0)    {    q[0]  =  q[1];  }  else  if(k  >  0)  {	  	compilable	  [FE]  AssertionError  	56	1	add
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  }  else  if(k  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(k    >    0)    {    }  else  if(k  >  0)  {	  	compilable	  [FE]  AssertionError  	56	4	add
204	[BUG]  [BUGGY]  }  else  if(k  >  0)  {  }  else  if(k  >  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  }  else  if(k  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    0)    {    }  else  if(k  >  0)  {	  	compilable	  [FE]  AssertionError  	56	4	add
205	[BUG]  [BUGGY]  }  else  if(v  >  0)  {  for(int  q[0]  =  q[1];  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  for(int  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(v  >  0)  {  for(int  q[0]  =  q[1];	  }    else    if(v    >    2)    {    for(int    q[0]    =    q[1];    	non-compiled	[CE]  ']'  expected	13	None	replace
206	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  If(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  If(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    If(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	  	non-compiled	[CE]  ';'  expected	20	None	add
207	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  x  *  v;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]  =  x  *  v;	  q[0]    =    v    *    x;    	compilable	  [FE]  AssertionError  	48	4	replace
208	[BUG]  [BUGGY]  q[0]  =  x  *  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  x  *  v;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  x  *  v;	  q[0]    =    v    *    x;    	compilable	  [FE]  AssertionError  	48	4	replace
209	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2[k  -  1];  [CE]  array  required,  but  double  found  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2[k  -  1];	  q[n    -    1]    =    v    *    q[k    -    1];    	non-compiled	[CE]  array  required,  but  double  found	82	None	replace
210	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3]  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    3];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3]	  	non-compiled	[CE]  ';'  expected	42	None	add
211	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x2)  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  3];  q[n  -  1]  =  v  *  x2)  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    3];    q[n  -  1]  =  v  *  x2)  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	  	non-compiled	[CE]  ';'  expected	42	None	add
212	[BUG]  [BUGGY]  q[0]  =  v  *  x2  +  q[1];  int  q[0]  =  v  *  x2  +  q[1];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2  +  q[1];  int  q[0]  =  v  *  x2  +  q[1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]    =    v    *    x2    +    q[1];    int  q[0]  =  v  *  x2  +  q[1];	  	non-compiled	[CE]  ']'  expected	54	None	add
213	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  }  else  if(v  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  }  else  if(v  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        q[0]    =    q[1];    }  else  if(v  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
214	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  else  if(v  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    q[0]  =  q[1];  else  if(v  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        q[0]    =    q[1];    else  if(v  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
215	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2;  q[1]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[0]  =  v  *  x2;  q[1]  =  v  *  x2;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2);    	compilable	  [FE]  AssertionError  	16	4	replace
216	[BUG]  [BUGGY]  q[0]  =  v  *  x2;  q[1]  =  v  *  x2;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2;  q[1]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x2;  q[1]  =  v  *  x2;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2);    	compilable	  [FE]  AssertionError  	16	4	replace
217	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[1]  =  v  *  x2;  q[1]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[1]  =  v  *  x2;  q[1]  =  v  *  x2;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2);    	compilable	  [FE]  AssertionError  	16	4	replace
218	[BUG]  [BUGGY]  q[1]  =  v  *  x2;  q[1]  =  v  *  x2;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[1]  =  v  *  x2;  q[1]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[1]  =  v  *  x2;  q[1]  =  v  *  x2;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x2);    	compilable	  [FE]  AssertionError  	16	4	replace
219	[BUG]  [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  1)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +	  if(n    >    1)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  -n  *  q[n  -  2];	  q[n    -    1]    =    v    *    q[n    -    2];    	compilable	  [FE]  AssertionError  	67	4	replace
221	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  -n  *  q[n  -  2];	  q[n    -    1]    =    v    *    q[n    -    2];    	compilable	  [FE]  AssertionError  	67	4	replace
222	[BUG]  [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  1)  {  q[1]  =  v  *  x2;  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]	  if(n    >    0)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    	non-compiled	[CE]  ';'  expected	5	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  -n  *  q[n  -  1];	  q[n    -    1]    =    v    *    q[n    -    1];    	compilable	  [FE]  AssertionError  	59	4	replace
224	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  -n  *  q[n  -  1];	  q[n    -    1]    =    v    *    q[n    -    1];    	compilable	  [FE]  AssertionError  	59	4	replace
225	[BUG]  [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[1]  =  v  *  x2  +  q[n  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[	  if(n    >    3)    {    q[1]    =    v    *    x2    +    q[n    -    1];    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    	non-compiled	[CE]  ']'  expected	69	None	replace
226	[BUG]  [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2);  q[0]  =  v  *  x2;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2);  q[0]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[0]        =        v        *        x2;        q[0]    =    v    *    x2;    q[0]  =  v  *  x2);  q[0]  =  v  *  x2;	  	non-compiled	[CE]  ';'  expected	14	None	add
227	[BUG]  [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[0]  =  v  *  x2);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[0]  =  v  *  x2);  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[0]        =        v        *        x2;        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2);	  	non-compiled	[CE]  ';'  expected	14	None	add
228	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  3];	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    3];    	compilable	  [FE]  AssertionError  	43	4	replace
229	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  3];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  3];	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    3];    	compilable	  [FE]  AssertionError  	43	4	replace
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	28	1	add
231	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	28	1	add
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	31	4	replace
233	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	31	4	replace
234	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]	  	non-compiled	[CE]  ';'  expected	40	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	7	4	replace
236	[BUG]  [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	7	4	replace
237	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  }  else  if(v  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(v    >    0)    {    }  else  if(v  >  0)  {	  	compilable	  [FE]  AssertionError  	62	4	add
238	[BUG]  [BUGGY]  }  else  if(v  >  0)  {  }  else  if(v  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  }  else  if(v  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    0)    {    }  else  if(v  >  0)  {	  	compilable	  [FE]  AssertionError  	62	4	add
239	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[1]  =  v  *  x2;  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	61	4	replace
240	[BUG]  [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[1]  =  v  *  x2;  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	61	4	replace
241	[BUG]  [BUGGY]  q[0]  =  v  *  x2;  q[0]  =  v  *  q1;  [CE]  cannot  find  symbol  q1  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2;  q[0]  =  v  *  q1;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]  =  v  *  x2;  q[0]  =  v  *  q1;	          q[0]    =    v    *    x2;    q[0]    =    v    *    x1;    	non-compiled	[CE]  cannot  find  symbol  q1	17	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    =    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	87	4	replace
243	[BUG]  [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    =    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	87	4	replace
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    =    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	87	4	replace
245	[BUG]  [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    =    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	87	4	replace
246	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	49	1	add
247	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	49	1	add
248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	73	1	add
249	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	73	1	add
250	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  int  q[n  -  1]  =  v  *  q[n  -  1];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  int  q[n  -  1]  =  v  *  q[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    1];    int  q[n  -  1]  =  v  *  q[n  -  1];	  	non-compiled	[CE]  ']'  expected	58	None	add
251	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x1  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [CE]  cannot  find  symbol  x1  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x1  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x1  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n    -    1]    =    v    *    x2    +    q[k    -    1];    	non-compiled	[CE]  cannot  find  symbol  x1	33	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(v  >  1)  {	  }    else    if(v    >    0)    {    	compilable	  [FE]  AssertionError  	63	1	replace
253	[BUG]  [BUGGY]  }  else  if(v  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(v  >  1)  {	  }    else    if(v    >    0)    {    	compilable	  [FE]  AssertionError  	63	1	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
255	[BUG]  [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	30	1	add
256	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	50	4	replace
257	[BUG]  [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  0)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	50	4	replace
258	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  0)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	50	4	replace
259	[BUG]  [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >=  0)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	50	4	replace
260	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1]  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[k        -        1];        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1]	  	non-compiled	[CE]  ';'  expected	32	None	add
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  }  else  if(n  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}    else    if(n    >    0)    {    }  else  if(n  >  0)  {	  	compilable	  [FE]  AssertionError  	78	4	add
262	[BUG]  [BUGGY]  }  else  if(n  >  0)  {  }  else  if(n  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  }  else  if(n  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    0)    {    }  else  if(n  >  0)  {	  	compilable	  [FE]  AssertionError  	78	4	add
263	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  }  else  if(k  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  }  else  if(k  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        q[0]    =    q[1];    }  else  if(k  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
264	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  else  if(k  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    q[0]  =  q[1];  else  if(k  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        q[0]    =    q[1];    else  if(k  >  2)  {  q[0]  =  q[1];  }  q[0]  =  q[1];	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
265	[BUG]  [BUGGY]  }  else  if(k  >  1)  {  resultOffset  =  resultOffset  *  resultOffset;  [CE]  final  parameter  resultOffset  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  1)  {  resultOffset  =  resultOffset  *  resultOffset;  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    1)    {    resultOffset  =  resultOffset  *  resultOffset;	  	non-compiled	[CE]  final  parameter  resultOffset  may  not  be  assigned	1	None	add
266	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  <  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(v  <  2)  {  q[0]  =  q[1];	  }    else    if(v    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	10	1	replace
267	[BUG]  [BUGGY]  }  else  if(v  <  2)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  <  2)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(v  <  2)  {  q[0]  =  q[1];	  }    else    if(v    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	10	1	replace
268	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	52	4	replace
269	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	52	4	replace
270	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1].  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1].  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1].	          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n    -    1]    =    v    *    x2    +    q[k    -    1].;    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
271	[BUG]  [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
272	[BUG]  [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
273	[BUG]  [BUGGY]  }  else  if(k  >  0)  {  if(k  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  0)  {  if(k  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    0)    {    if(k  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
274	[BUG]  [BUGGY]  q[0]  =  v  *  x2  +  q[1];  q[0]  =  v  *  x2  +  q[1].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[0]  =  v  *  x2  +  q[1];  q[0]  =  v  *  x2  +  q[1].;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[0]    =    v    *    x2    +    q[1];    q[0]  =  v  *  x2  +  q[1].;	  	non-compiled	[CE]  <identifier>  expected	54	None	add
275	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	26	1	add
276	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	26	1	add
277	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	26	1	add
278	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	26	1	add
279	[BUG]  [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[1]  =  v  *  x2;  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[1]    =    v    *    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
280	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  }  else  if(v  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(v        >        2)        {        }    else    if(v    >    2)    {    }  else  if(v  >  1)  {	  	compilable	  [FE]  AssertionError  	11	4	add
281	[BUG]  [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  }  else  if(v  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(v    >    2)    {    }  else  if(v  >  2)  {  }  else  if(v  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(v        >        2)        {        }    else    if(v    >    2)    {    }  else  if(v  >  1)  {	  	compilable	  [FE]  AssertionError  	11	4	add
282	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n    -    1]    =    v    *    x2    +    q[n    -    1].;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
283	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k	  if(n    >    3)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1];    }    	non-compiled	[CE]  ']'  expected	76	None	replace
284	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	61	4	replace
285	[BUG]  [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[1]  =  v  *  x2;  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    	compilable	  [FE]  AssertionError  	61	4	replace
286	[BUG]  [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  ==  2)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    ==    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[1]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[0]        =        v        *        x2;        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[1]  =  v  *  x2;	  	compilable	  [FE]  AssertionError  	14	4	add
288	[BUG]  [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[1]  =  v  *  x2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[0]  =  v  *  x2;  q[1]  =  v  *  x2;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[0]        =        v        *        x2;        q[0]    =    v    *    x2;    q[0]  =  v  *  x2;  q[1]  =  v  *  x2;	  	compilable	  [FE]  AssertionError  	14	4	add
289	[BUG]  [BUGGY]  }  else  if(n  <  =  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  =  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  <  =  2)  {	  }    else    if(n    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
290	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[k  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                q[n        -        1]        =        v        *        x2        +        q[k        -        1];        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[k  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	compilable	  [FE]  AssertionError  	32	1	add
291	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[k  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[n  -  1]  =  v  *  x2  +  q[k  -  1];  q[k  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                q[n        -        1]        =        v        *        x2        +        q[k        -        1];        q[n    -    1]    =    v    *    x2    +    q[k    -    1];    q[k  -  1]  =  v  *  x2  +  q[k  -  1];  q[n  -  1]  =  v  *  x2  +  q[k  -  1];	  	compilable	  [FE]  AssertionError  	32	1	add
292	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    3];    	compilable	  [FE]  AssertionError  	43	4	replace
293	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  3];	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    3];    	compilable	  [FE]  AssertionError  	43	4	replace
294	[BUG]  [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[	  if(n    >    0)    {    q[1]    =    v    *    x2    +    q[k    -    1];    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    	non-compiled	[CE]  ']'  expected	80	None	replace
295	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[k  -  1].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[k  -  1];  q[n  -  1]  =  v  *  q[k  -  1].;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[k    -    1];    q[n  -  1]  =  v  *  q[k  -  1].;	  	non-compiled	[CE]  <identifier>  expected	81	None	add
296	[BUG]  [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  3)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +	  if(n    >    3)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
297	[BUG]  [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  =  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  1)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    1)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
298	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  1)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  >  1)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	60	1	add
299	[BUG]  [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  1)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  1)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  >  1)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	60	1	add
300	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  }  else  if(k  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}        else        if(k        >        2)        {        }    else    if(k    >    2)    {    }  else  if(k  >  1)  {	  	compilable	  [FE]  AssertionError  	35	4	add
301	[BUG]  [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  }  else  if(k  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }    else    if(k    >    2)    {    }  else  if(k  >  2)  {  }  else  if(k  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}        else        if(k        >        2)        {        }    else    if(k    >    2)    {    }  else  if(k  >  1)  {	  	compilable	  [FE]  AssertionError  	35	4	add
302	[BUG]  [BUGGY]  }  else  if(k  >  1)  {  if(k  >  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  1)  {  if(k  >  1)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(k    >    1)    {    if(k  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
303	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[2  +  q[k  -  1];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[2  +  q[k  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[2  +  q[k  -  1];	  q[n    -    1]    =    v    *    q[x2    +    q[k    -    1];    	non-compiled	[CE]  ']'  expected	53	None	replace
304	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2[n  -  1];  [CE]  array  required,  but  double  found  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2[n  -  1];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2[n  -  1];	  q[n    -    1]    =    v    *    q[n    -    1];    	non-compiled	[CE]  array  required,  but  double  found	59	None	replace
305	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[n  -  1]  =  v  *  q[n  -  1].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[n  -  1];  q[n  -  1]  =  v  *  q[n  -  1].;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    q[n    -    1];    q[n  -  1]  =  v  *  q[n  -  1].;	  	non-compiled	[CE]  <identifier>  expected	58	None	add
306	[BUG]  [BUGGY]  if(n  <  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  <  0)  {  if(n  <  2)  {  q[0]  =  v  *  x2;  }	          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n    <    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	83	4	add
308	[BUG]  [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  <  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n    <    0)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	83	4	add
309	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[N  -  1]  =  v  *  x2  +  q[k  -  2];  [CE]  cannot  find  symbol  N  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[k  -  2];  q[N  -  1]  =  v  *  x2  +  q[k  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n    -    1]    =    v    *    x2    +    q[k    -    2];    q[N  -  1]  =  v  *  x2  +  q[k  -  2];	  	non-compiled	[CE]  cannot  find  symbol  N	22	None	add
310	[BUG]  [BUGGY]  }  else  if(n  <  =  order)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  <  =  order)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(n  <  =  order)  {	  }    else    if(k    >    2)    {    else    if(k    >    2)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[k  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	q[n  -  1]  =  v  *  q[k  -  2];	  q[n    -    1]    =    v    *    x2    +    q[k    -    2];    	compilable	  [FE]  AssertionError  	23	4	replace
312	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[k  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  q[k  -  2];  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  q[k  -  2];	  q[n    -    1]    =    v    *    x2    +    q[k    -    2];    	compilable	  [FE]  AssertionError  	23	4	replace
313	[BUG]  [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  1)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  -  1]  +	  if(n    >    1)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
314	[BUG]  [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  1)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  1)  {  q[1]  =  v  *  x2  +  q[k  -  1];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[0]  =  v  *  x2  +  q[k	  if(n    >    1)    {    q[1]    =    v    *    x2;    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[0]    =    v    *    x2    +    q[k    -    1]    +    	non-compiled	[CE]  ']'  expected	18	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  3)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	}  else  if(k  >  3)  {  q[0]  =  q[1];	  }    else    if(k    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	38	4	replace
316	[BUG]  [BUGGY]  }  else  if(k  >  3)  {  q[0]  =  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(k  >  3)  {  q[0]  =  q[1];  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}  else  if(k  >  3)  {  q[0]  =  q[1];	  }    else    if(k    >    2)    {    q[0]    =    q[1];    	compilable	  [FE]  AssertionError  	38	4	replace
317	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	50	4	replace
318	[BUG]  [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	if(n  >  0)  {  q[0]  =  v  *  x2;  }  else  if(k  >  0)  {  q[0]  =  v  *  x2  +  q[1];  }	  if(n    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    	compilable	  [FE]  AssertionError  	50	4	replace
319	[BUG]  [BUGGY]  }  else  if(n  >  2)  {  if(n  >  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  2)  {  if(n  >  2)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    2)    {    if(n  >  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
320	[BUG]  [BUGGY]  }  else  if(n  >  0)  {  if(n  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(n  >  0)  {  if(n  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(n    >    0)    {    if(n  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
321	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	73	1	add
322	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	73	1	add
323	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	73	4	add
324	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2  +  q[1];  }  else  if(k  >  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2    +    q[1];    }    else    if(k    >    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2  +  q[1];  }	  	compilable	  [FE]  AssertionError  	73	4	add
325	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	28	1	add
326	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	28	1	add
327	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[0]        =        v        *        x2        +        q[1];        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[0]    =    v    *    x2    +    q[1];    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[0]  =  v  *  x2  +  q[1];  }  if(n  <  2)  {  q[0]  =  v  *  x2	  	non-compiled	[CE]  ';'  expected	28	None	add
328	[BUG]  [BUGGY]  }  else  if(v  >  0)  {  if(v  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  }  else  if(v  >  0)  {  if(v  >  0)  {  [BUGGY]      q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	}    else    if(v    >    0)    {    if(v  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
329	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2].;  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  2].;	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    2].;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
330	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
331	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  1)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	add	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  1)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
333	[BUG]  [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  1)  {  q[0]  =  v  *  x2;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];      [BUGGY]          if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  1)  {  q[0]  =  v  *  x2;  }  [BUGGY]      }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1353	1353	1	replace	                if(n        <        2)        {        q[0]        =        v        *        x2;        }        else        if(k        >        2)        {        q[1]        =        v        *        x2;        }        if(n    <    2)    {    q[0]    =    v    *    x2;    }    else    if(k    >    2)    {    q[1]    =    v    *    x2;    }    if(n  <  2)  {  q[0]  =  v  *  x2;  }  else  if(k  >  2)  {  q[1]  =  v  *  x2;  }  if(n  <  1)  {  q[0]  =  v  *  x2;  }	  	compilable	  [FE]  AssertionError  	6	4	add
