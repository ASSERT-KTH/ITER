bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(operand[0],  -n  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(operand[0],  -n  +  1);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(operand[0],  -n  +  1);	      double    xk    =    FastMath.pow(operand[0],    -n);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	7	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  *  operand[0];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  *  operand[0];	  final    double    inv    =    1.0    *    operand[operandOffset];    	compilable	  [FE]  AssertionError  	4	12	replace
3	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  *  operand[0];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  *  operand[0];	  final    double    inv    =    1.0    *    operand[operandOffset];    	compilable	  [FE]  AssertionError  	4	12	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  *  resultOffset;  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  *  resultOffset;	  final    double    inv    =    1.0    *    operand[operandOffset];    	compilable	  [FE]  AssertionError  	4	12	replace
5	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  resultOffset;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  *  resultOffset;  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  *  resultOffset;	  final    double    inv    =    1.0    *    operand[operandOffset];    	compilable	  [FE]  AssertionError  	4	12	replace
6	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(function,  -n);	      final    double    inv    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	10	None	replace
7	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(operand[0],  maxOrder  -  1);  [CE]  cannot  find  symbol  maxOrder  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(operand[0],  maxOrder  -  1);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(operand[0],  maxOrder  -  1);	      double    xk    =    FastMath.pow(operand[0],    n    -    1);    	non-compiled	[CE]  cannot  find  symbol  maxOrder	6	None	replace
8	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n  +  1);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(function,  -n  +  1);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n  +  1);	      double    xk    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	12	None	replace
9	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  0);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  0);	      double    xk    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	12	None	replace
10	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operand[0];  final  double  inv  =  1.0  /  operand[0];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operand[0];  final  double  inv  =  1.0  /  operand[0];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operand[0];    final  double  inv  =  1.0  /  operand[0];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	1	None	add
11	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operand[0];  Final  double  inv  =  1.0  /  operand[0];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operand[0];  Final  double  inv  =  1.0  /  operand[0];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operand[0];    Final  double  inv  =  1.0  /  operand[0];	  	non-compiled	[CE]  not  a  statement	1	None	add
12	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operand[1];  final  double  inv  =  1.0  /  operand[1];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operand[1];  final  double  inv  =  1.0  /  operand[1];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operand[1];    final  double  inv  =  1.0  /  operand[1];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	8	None	add
13	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operand[1];  final  double  inv  =  1.0  /  operand[2];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operand[1];  final  double  inv  =  1.0  /  operand[2];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operand[1];    final  double  inv  =  1.0  /  operand[2];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	8	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.min(n,  n);  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.min(n,  n);	      	compilable	  [FE]  AssertionError  	5	12	replace
15	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  n);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.min(n,  n);  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(n,  n);	      	compilable	  [FE]  AssertionError  	5	12	replace
16	[BUG]  [BUGGY]  double  inv  =  FastMath.min(inv,  -n);  [CE]  variable  inv  might  not  have  been  initialized  [FE]              AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.min(inv,  -n);  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(inv,  -n);	      	non-compiled	[CE]  variable  inv  might  not  have  been  initialized	5	None	replace
17	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[operandOffset];  final  double  inv  =  1.0  *  operand[operandOffset];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  *  operand[operandOffset];  final  double  inv  =  1.0  *  operand[operandOffset];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    operand[operandOffset];    final  double  inv  =  1.0  *  operand[operandOffset];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	3	None	add
18	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[operandOffset];  final  double  inv  =  1.0  *  operand[ondOffset];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  *  operand[operandOffset];  final  double  inv  =  1.0  *  operand[ondOffset];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    operand[operandOffset];    final  double  inv  =  1.0  *  operand[ondOffset];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	3	None	add
19	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  -1,  -n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.pow(operand,  -1,  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  -1,  -n);	      double    inv    =    FastMath.pow(operand,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	11	None	replace
20	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]            AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  0,  n);	      double    inv    =    FastMath.pow(operand,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	11	None	replace
21	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operandOffset[0];  [CE]  array  required,  but  int  found  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operandOffset[0];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  /  operandOffset[0];	  final    double    inv    =    1.0    /    operand[0];    	non-compiled	[CE]  array  required,  but  int  found	2	None	replace
22	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operandOffset[1];  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operandOffset[1];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  /  operandOffset[1];	  final    double    inv    =    1.0    /    operand[1];    	non-compiled	[CE]  array  required,  but  int  found	9	None	replace
23	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[operandOffset];  final  double  inv  =  1.0  *  operand[opOffset];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  *  operand[operandOffset];  final  double  inv  =  1.0  *  operand[opOffset];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    operand[operandOffset];    final  double  inv  =  1.0  *  operand[opOffset];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	3	None	add
24	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  -n);	      double    xk    =    FastMath.pow(operand[0],    -n);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	7	None	replace
25	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  -  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  -  1);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  n  -  1);	      double    xk    =    FastMath.pow(operand[0],    n    -    1);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	6	None	replace
26	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(function,  -n);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.pow(function,  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(function,  -n);	      double    inv    =    FastMath.pow(operand,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	11	None	replace
27	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  -n  +  1);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]            AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.pow(operand,  -n  +  1);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  -n  +  1);	      double    inv    =    FastMath.pow(operand,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	11	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operandOffset;  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  /  operandOffset;	  final    double    inv    =    1.0    /    operand[0];    	compilable	  [FE]  AssertionError  	2	12	replace
29	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operandOffset;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operandOffset;  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  /  operandOffset;	  final    double    inv    =    1.0    /    operand[0];    	compilable	  [FE]  AssertionError  	2	12	replace
30	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  maxOrder);  [CE]  cannot  find  symbol  maxOrder  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  maxOrder);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  maxOrder);	      double    xk    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  cannot  find  symbol  maxOrder	12	None	replace
31	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operand[1];  Final  double  inv  =  1.0  /  operand[1];  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operand[1];  Final  double  inv  =  1.0  /  operand[1];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operand[1];    Final  double  inv  =  1.0  /  operand[1];	  	non-compiled	[CE]  not  a  statement	8	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  FastMath.pow(operandOffset,  -n);	      final    double    inv    =    FastMath.pow(inv,    -n);    	compilable	  [FE]  AssertionError  	10	12	replace
33	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(operandOffset,  -n);	      final    double    inv    =    FastMath.pow(inv,    -n);    	compilable	  [FE]  AssertionError  	10	12	replace
34	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(inv,  -n);  [CE]  variable  inv  might  not  have  been  initialized  [FE]            AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.pow(inv,  -n);  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(inv,  -n);	      	non-compiled	[CE]  variable  inv  might  not  have  been  initialized	5	None	replace
35	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  n);	      double    xk    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	12	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.pow(operandOffset,  -n);	      double    inv    =    FastMath.pow(operand,    -n);    	compilable	  [FE]  AssertionError  	11	12	replace
37	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operandOffset,  -n);	      double    inv    =    FastMath.pow(operand,    -n);    	compilable	  [FE]  AssertionError  	11	12	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.min(order,  n);  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.min(order,  n);	      	compilable	  [FE]  AssertionError  	5	12	replace
39	[BUG]  [BUGGY]  double  inv  =  FastMath.min(order,  n);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  inv  =  FastMath.min(order,  n);  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(order,  n);	      	compilable	  [FE]  AssertionError  	5	12	replace
40	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(operand[0],  -n  -  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]          AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  double  xk  =  FastMath.pow(operand[0],  -n  -  1);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(operand[0],  -n  -  1);	      double    xk    =    FastMath.pow(operand[0],    -n);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	7	None	replace
41	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(inv,  -n  +  1);  [CE]  variable  inv  might  not  have  been  initialized  [FE]        AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  FastMath.pow(inv,  -n  +  1);  [BUGGY]    final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(inv,  -n  +  1);	      final    double    inv    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  variable  inv  might  not  have  been  initialized	10	None	replace
42	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operand[0];  final  double  inv  =  2.0  /  operand[0];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {      [BUGGY]  final  double  inv  =  1.0  /  operand[0];  final  double  inv  =  2.0  /  operand[0];  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operand[0];    final  double  inv  =  2.0  /  operand[0];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	1	None	add
