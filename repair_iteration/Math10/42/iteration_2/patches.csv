bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n  +  1);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(function,  -n  +  1);	  final    double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	6	None	replace
2	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n,  n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(function,  -n,  n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(function,  -n,  n);	  final    double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	6	None	replace
3	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(operand[0],  n  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(operand[0],  n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(operand[0],  n  +  1);	  double    xk    =    FastMath.pow(operand[0],    -n    +    1);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	1	None	replace
4	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  -n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  0,  -n);	  double    inv    =    FastMath.pow(operand,    -1,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	19	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  0);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.min(n,  0);	  double    inv    =    FastMath.min(n,    n);    	compilable	  [FE]  AssertionError  	15	12	replace
6	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  0);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(n,  0);	  double    inv    =    FastMath.min(n,    n);    	compilable	  [FE]  AssertionError  	15	12	replace
7	[BUG]  [BUGGY]  double  inv  =  FastMath.min(function,  n);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(function,  n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(function,  n);	  double    inv    =    FastMath.min(n,    n);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	15	None	replace
8	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n  +  1,  n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function,  -n  +  1,  n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n  +  1,  n);	  double    xk    =    FastMath.pow(function,    -n    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	8	None	replace
9	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  n  +  1);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  n  +  1);	  double    xk    =    FastMath.pow(function,    -n,    n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	35	None	replace
10	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(operandOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(operandOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.pow(operandOffset,    -n);    double  inv  =  FastMath.pow(operandOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	36	None	add
11	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  Double  inv  =  FastMath.pow(operandOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  Double  inv  =  FastMath.pow(operandOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.pow(operandOffset,    -n);    Double  inv  =  FastMath.pow(operandOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	36	None	add
12	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(operationOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]        AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(operationOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.pow(operandOffset,    -n);    double  inv  =  FastMath.pow(operationOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	36	None	add
13	[BUG]  [BUGGY]  double  inv  =  FastMath.min(order,  n);  double  inv  =  FastMath.min(order,  n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(order,  n);  double  inv  =  FastMath.min(order,  n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.min(order,    n);    double  inv  =  FastMath.min(order,  n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	38	None	add
14	[BUG]  [BUGGY]  double  inv  =  FastMath.min(order,  n);  double  inv  =  FastMath.min(order,  0);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(order,  n);  double  inv  =  FastMath.min(order,  0);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.min(order,    n);    double  inv  =  FastMath.min(order,  0);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	38	None	add
15	[BUG]  [BUGGY]  double  inv  =  FastMath.min(order,  n);  Double  inv  =  FastMath.min(order,  n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]        AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(order,  n);  Double  inv  =  FastMath.min(order,  n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.min(order,    n);    Double  inv  =  FastMath.min(order,  n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	38	None	add
16	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  -  1  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  -  1  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  n  -  1  +  1);	  double    xk    =    FastMath.pow(function[0],    n    -    1);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	25	None	replace
17	[BUG]  [BUGGY]  double  inv  =  FastMath.min(function,  -n);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]                  AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(function,  -n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(function,  -n);	  double    inv    =    FastMath.min(inv,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	16	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(order,  -n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.min(order,  -n);	  double    inv    =    FastMath.min(inv,    -n);    	compilable	  [FE]  AssertionError  	16	12	replace
19	[BUG]  [BUGGY]  double  inv  =  FastMath.min(order,  -n);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(order,  -n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(order,  -n);	  double    inv    =    FastMath.min(inv,    -n);    	compilable	  [FE]  AssertionError  	16	12	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operand[1];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  *  operand[1];	  final    double    inv    =    1.0    *    operand[operandOffset];    final    double    inv    =    1.0    *    operand[operandOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	12	replace
21	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operand[1];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  *  operand[1];	  final    double    inv    =    1.0    *    operand[operandOffset];    final    double    inv    =    1.0    *    operand[operandOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	12	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operandOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  *  operandOffset;	  final    double    inv    =    1.0    *    operand[0];    	compilable	  [FE]  AssertionError  	3	12	replace
23	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operandOffset;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operandOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  *  operandOffset;	  final    double    inv    =    1.0    *    operand[0];    	compilable	  [FE]  AssertionError  	3	12	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  function[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  *  function[0];	  final    double    inv    =    1.0    *    operand[0];    	compilable	  [FE]  AssertionError  	3	12	replace
25	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  function[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  function[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  *  function[0];	  final    double    inv    =    1.0    *    operand[0];    	compilable	  [FE]  AssertionError  	3	12	replace
26	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[0];  final  double  inv  =  1.0  *  operand[0];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operand[0];  final  double  inv  =  1.0  *  operand[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    operand[0];    final  double  inv  =  1.0  *  operand[0];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	2	None	add
27	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[0];  Final  double  inv  =  1.0  *  operand[0];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operand[0];  Final  double  inv  =  1.0  *  operand[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    operand[0];    Final  double  inv  =  1.0  *  operand[0];	  	non-compiled	[CE]  not  a  statement	2	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  2.0  /  operand[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  2.0  /  operand[0];	  final    double    inv    =    1.0    /    operand[0];    final    double    inv    =    2.0    /    operand[0];    	compilable	  [FE]  AssertionError  	42	12	replace
29	[BUG]  [BUGGY]  final  double  inv  =  2.0  /  operand[0];  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  2.0  /  operand[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  2.0  /  operand[0];	  final    double    inv    =    1.0    /    operand[0];    final    double    inv    =    2.0    /    operand[0];    	compilable	  [FE]  AssertionError  	42	12	replace
30	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operandOffset;  final  double  inv  =  1.0  /  operandOffset;  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  operandOffset;  final  double  inv  =  1.0  /  operandOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operandOffset;    final  double  inv  =  1.0  /  operandOffset;	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	28	None	add
31	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operandOffset;  Final  double  inv  =  1.0  /  operandOffset;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  operandOffset;  Final  double  inv  =  1.0  /  operandOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    /    operandOffset;    Final  double  inv  =  1.0  /  operandOffset;	  	non-compiled	[CE]  not  a  statement	28	None	add
32	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  1);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  1);	  double    xk    =    FastMath.pow(function,    -n,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	9	None	replace
33	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(function,  -n  +  1);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(function,  -n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(function,  -n  +  1);	  double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	26	None	replace
34	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(function,  -n,  xk);  [CE]  cannot  find  symbol  xk  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(function,  -n,  xk);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(function,  -n,  xk);	  double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  cannot  find  symbol  xk	26	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0;	  final    double    inv    =    1.0    *    resultOffset;    	compilable	  [FE]  AssertionError  	5	12	replace
36	[BUG]  [BUGGY]  final  double  inv  =  1.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0;	  final    double    inv    =    1.0    *    resultOffset;    	compilable	  [FE]  AssertionError  	5	12	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  resultOffset  +  1;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  *  resultOffset  +  1;	  final    double    inv    =    1.0    *    resultOffset;    	compilable	  [FE]  AssertionError  	5	12	replace
38	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  resultOffset  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  resultOffset  +  1;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  *  resultOffset  +  1;	  final    double    inv    =    1.0    *    resultOffset;    	compilable	  [FE]  AssertionError  	5	12	replace
39	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n,  n);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int)  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n,  n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  0,  n,  n);	  double    inv    =    FastMath.pow(operand,    0,    n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int)	20	None	replace
40	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n  +  1);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]                  AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  0,  n  +  1);	  double    inv    =    FastMath.pow(operand,    0,    n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	20	None	replace
41	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operandOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operandOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    FastMath.pow(operandOffset,    -n);    final  double  inv  =  FastMath.pow(operandOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	32	None	add
42	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operandOffset,  -1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operandOffset,  -1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    FastMath.pow(operandOffset,    -n);    final  double  inv  =  FastMath.pow(operandOffset,  -1);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	32	None	add
43	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operationOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]        AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operationOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    FastMath.pow(operandOffset,    -n);    final  double  inv  =  FastMath.pow(operationOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	32	None	add
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operand[n];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  *  operand[n];	  final    double    inv    =    1.0    *    operand[operandOffset];    final    double    inv    =    1.0    *    operand[ondOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	12	replace
45	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[n];  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operand[n];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  *  operand[n];	  final    double    inv    =    1.0    *    operand[operandOffset];    final    double    inv    =    1.0    *    operand[ondOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	12	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  order);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.min(n,  order);	  double    inv    =    FastMath.min(order,    n);    	compilable	  [FE]  AssertionError  	39	12	replace
47	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  order);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  order);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(n,  order);	  double    inv    =    FastMath.min(order,    n);    	compilable	  [FE]  AssertionError  	39	12	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  resultOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  /  resultOffset;	  final    double    inv    =    1.0    /    operandOffset;    	compilable	  [FE]  AssertionError  	29	12	replace
49	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  resultOffset;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  resultOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  /  resultOffset;	  final    double    inv    =    1.0    /    operandOffset;    	compilable	  [FE]  AssertionError  	29	12	replace
50	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  n);  double  inv  =  FastMath.min(n,  n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  n);  double  inv  =  FastMath.min(n,  n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.min(n,    n);    double  inv  =  FastMath.min(n,  n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	14	None	add
51	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  n);  Double  inv  =  FastMath.min(n,  n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  n);  Double  inv  =  FastMath.min(n,  n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.min(n,    n);    Double  inv  =  FastMath.min(n,  n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	14	None	add
52	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  n);  inv  =  FastMath.min(n,  n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]        AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  n);  inv  =  FastMath.min(n,  n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.min(n,    n);    inv  =  FastMath.min(n,  n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	14	None	add
53	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  resultOffset;  final  double  inv  =  1.0  *  resultOffset;  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  resultOffset;  final  double  inv  =  1.0  *  resultOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    resultOffset;    final  double  inv  =  1.0  *  resultOffset;	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	4	None	add
54	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  resultOffset;  Final  double  inv  =  1.0  *  resultOffset;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  resultOffset;  Final  double  inv  =  1.0  *  resultOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    resultOffset;    Final  double  inv  =  1.0  *  resultOffset;	  	non-compiled	[CE]  not  a  statement	4	None	add
55	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n  +  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  -n  +  1);	  double    xk    =    FastMath.pow(function[0],    -n);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	24	None	replace
56	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  -1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function[0],  -1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  -1);	  double    xk    =    FastMath.pow(function[0],    -n);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	24	None	replace
57	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  i);  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  i);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  i);	  double    xk    =    FastMath.pow(function,    -n,    maxOrder);    	non-compiled	[CE]  cannot  find  symbol  i	30	None	replace
58	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  n  +  1);  [CE]  no  suitable  method  found  for  pow(double[],int)  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operand,  n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  n  +  1);	  double    inv    =    FastMath.pow(operand,    -n    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int)	27	None	replace
59	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(operand[0],  null  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(operand[0],  null  -  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(operand[0],  null  -  1);	  double    xk    =    FastMath.pow(operand[0],    maxOrder    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	7	None	replace
60	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(variables[-n],  -n);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(variables[-n],  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(variables[-n],  -n);	  double    inv    =    FastMath.pow(operandOffset,    -n);    	non-compiled	[CE]  cannot  find  symbol  	37	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  -n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.min(n,  -n);	  double    inv    =    FastMath.min(inv,    -n);    	compilable	  [FE]  AssertionError  	16	12	replace
62	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  -n);  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  -n);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(n,  -n);	  double    inv    =    FastMath.min(inv,    -n);    	compilable	  [FE]  AssertionError  	16	12	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  operandOffset  +  1;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  1.0  /  operandOffset  +  1;	  final    double    inv    =    1.0    /    operandOffset;    	compilable	  [FE]  AssertionError  	29	12	replace
64	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operandOffset  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  operandOffset  +  1;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  /  operandOffset  +  1;	  final    double    inv    =    1.0    /    operandOffset;    	compilable	  [FE]  AssertionError  	29	12	replace
65	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  maxOrder  -  1);  [CE]  cannot  find  symbol  maxOrder  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function[0],  maxOrder  -  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  maxOrder  -  1);	  double    xk    =    FastMath.pow(function[0],    n    -    1);    	non-compiled	[CE]  cannot  find  symbol  maxOrder	25	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  10.0  *  operand[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  10.0  *  operand[0];	  final    double    inv    =    1.0    *    operand[0];    	compilable	  [FE]  AssertionError  	3	12	replace
67	[BUG]  [BUGGY]  final  double  inv  =  10.0  *  operand[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  10.0  *  operand[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  10.0  *  operand[0];	  final    double    inv    =    1.0    *    operand[0];    	compilable	  [FE]  AssertionError  	3	12	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	final  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);	  final    double    inv    =    FastMath.pow(inv,    -n    +    1);    	compilable	  [FE]  AssertionError  	41	12	replace
69	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);	  final    double    inv    =    FastMath.pow(inv,    -n    +    1);    	compilable	  [FE]  AssertionError  	41	12	replace
70	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(variables[-n],  -n);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(variables[-n],  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(variables[-n],  -n);	  final    double    inv    =    FastMath.pow(operandOffset,    -n);    	non-compiled	[CE]  cannot  find  symbol  	33	None	replace
71	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(function,  0,  n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(function,  0,  n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(function,  0,  n);	  double    inv    =    FastMath.pow(operand,    0,    n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	20	None	replace
72	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(operationndOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(operationndOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.pow(operandOffset,    -n);    double  inv  =  FastMath.pow(operationndOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	36	None	add
73	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operationndOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(operationndOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    FastMath.pow(operandOffset,    -n);    final  double  inv  =  FastMath.pow(operationndOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	32	None	add
74	[BUG]  [BUGGY]  double  inv  =  FastMath.min(order,  n);  double  inv  =  FastMath.min(order,  1);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(order,  n);  double  inv  =  FastMath.min(order,  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.min(order,    n);    double  inv  =  FastMath.min(order,  1);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	38	None	add
75	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(function,  -1,  -n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(function,  -1,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(function,  -1,  -n);	  double    inv    =    FastMath.pow(operand,    -1,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	19	None	replace
76	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(variables,  -n);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(variables,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  FastMath.pow(variables,  -n);	  final    double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  cannot  find  symbol  	6	None	replace
77	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(functions,  -n,  n);  [CE]  cannot  find  symbol  functions  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(functions,  -n,  n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(functions,  -n,  n);	  double    xk    =    FastMath.pow(function,    -n,    n);    	non-compiled	[CE]  cannot  find  symbol  functions	35	None	replace
78	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(function,  -n,  maxOrder);  [CE]  cannot  find  symbol  maxOrder  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(function,  -n,  maxOrder);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(function,  -n,  maxOrder);	  double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  cannot  find  symbol  maxOrder	26	None	replace
79	[BUG]  [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(  operndOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  FastMath.pow(operandOffset,  -n);  final  double  inv  =  FastMath.pow(  operndOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    FastMath.pow(operandOffset,    -n);    final  double  inv  =  FastMath.pow(  operndOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	32	None	add
80	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  -  1]);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  -  1]);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  n  -  1]);	  double    xk    =    FastMath.pow(function[0],    n    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  n  +  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.min(n,  n  +  1);	  double    inv    =    FastMath.min(n,    n);    	compilable	  [FE]  AssertionError  	15	12	replace
82	[BUG]  [BUGGY]  double  inv  =  FastMath.min(n,  n  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.min(n,  n  +  1);  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.min(n,  n  +  1);	  double    inv    =    FastMath.min(n,    n);    	compilable	  [FE]  AssertionError  	15	12	replace
83	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  0,  n);  [CE]  no  suitable  method  found  for  pow(int,int,int)  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  0,  n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operandOffset,  0,  n);	  double    inv    =    FastMath.pow(operand,    0,    n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(int,int,int)	20	None	replace
84	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n  -  1);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]                  AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operand,  0,  n  -  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operand,  0,  n  -  1);	  double    inv    =    FastMath.pow(operand,    0,    n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	20	None	replace
85	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  functionOffset;  [CE]  cannot  find  symbol  functionOffset  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  functionOffset;  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  /  functionOffset;	  final    double    inv    =    1.0    /    operandOffset;    	non-compiled	[CE]  cannot  find  symbol  functionOffset	29	None	replace
86	[BUG]  [BUGGY]  final  double  inv  =  1.0  *  operand[0];  final  double  inv  =  2.0  *  operand[0];  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  *  operand[0];  final  double  inv  =  2.0  *  operand[0];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final    double    inv    =    1.0    *    operand[0];    final  double  inv  =  2.0  *  operand[0];	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	2	None	add
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	add	double  inv  =  FastMath.pow(operandOffset,  -n  +  1);	  double    inv    =    FastMath.pow(operand,    -n    +    1);    	compilable	  [FE]  AssertionError  	27	12	replace
88	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n  +  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(operandOffset,  -n  +  1);	  double    inv    =    FastMath.pow(operand,    -n    +    1);    	compilable	  [FE]  AssertionError  	27	12	replace
89	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  n  -  1);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]            AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  n  -  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  n  -  1);	  double    xk    =    FastMath.pow(function,    -n,    n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	35	None	replace
90	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(function,  -n,  n);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(function,  -n,  n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  inv  =  FastMath.pow(function,  -n,  n);	  double    inv    =    FastMath.pow(function,    -n);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	26	None	replace
91	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n  -  1);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n  -  1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function[0],  -n  -  1);	  double    xk    =    FastMath.pow(operand[0],    -n    -    1);    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	40	None	replace
92	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  -1);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]              AssertionError      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  xk  =  FastMath.pow(function,  -n,  -1);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double  xk  =  FastMath.pow(function,  -n,  -1);	  double    xk    =    FastMath.pow(function,    -n,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	9	None	replace
93	[BUG]  [BUGGY]  final  double  inv  =  1.0  /  operandOffset[1];  final  double  inv  =  1.0  /  operand[2];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  final  double  inv  =  1.0  /  operandOffset[1];  final  double  inv  =  1.0  /  operand[2];  [BUGGY]      double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	final  double  inv  =  1.0  /  operandOffset[1];  final  double  inv  =  1.0  /  operand[2];	  final    double    inv    =    1.0    /    operand[1];    final    double    inv    =    1.0    /    operand[2];    	non-compiled	[CE]  array  required,  but  int  found	13	None	replace
94	[BUG]  [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(  operndOffset,  -n);  [CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]        final  int  maxOrder  =  FastMath.min(order,  n);  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {        [BUGGY]  double  inv  =  FastMath.pow(operandOffset,  -n);  double  inv  =  FastMath.pow(  operndOffset,  -n);  [BUGGY]      final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	894	894	1	replace	double    inv    =    FastMath.pow(operandOffset,    -n);    double  inv  =  FastMath.pow(  operndOffset,  -n);	  	non-compiled	[CE]  variable  inv  is  already  defined  in  method  pow(double[],int,int,double[],int)	36	None	add
