bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        0.5        *        function[0];        xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  0.5  *  function[0];	  	compilable	  [FE]  AssertionError  	11	1	add
2	[BUG]  [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        0.5        *        function[0];        xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  0.5  *  function[0];	  	compilable	  [FE]  AssertionError  	11	1	add
3	[BUG]  [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  double  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  double  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        0.5        *        function[0];        xk=    0.5    *    function[0];    double  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	11	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  result[0];  xk=  0.5  *  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  0.5  *  result[0];  xk=  0.5  *  result[0];	  xk=    0.5    *    function[0];    xk=    0.5    *    function[0];    	compilable	  [FE]  AssertionError  	12	9	replace
5	[BUG]  [BUGGY]  xk=  0.5  *  result[0];  xk=  0.5  *  result[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  result[0];  xk=  0.5  *  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  0.5  *  result[0];  xk=  0.5  *  result[0];	  xk=    0.5    *    function[0];    xk=    0.5    *    function[0];    	compilable	  [FE]  AssertionError  	12	9	replace
6	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  2)/  1;  [CE]  final  parameter  n  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(resultOffset,  2)/  1;  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(resultOffset,  2)/  1;	  n    =    Math.min(resultOffset,    2)-    1;    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	37	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    result[0];    xk=  1.0  /  result[0];	  	compilable	  [FE]  AssertionError  	27	1	add
8	[BUG]  [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  result[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    result[0];    xk=  1.0  /  result[0];	  	compilable	  [FE]  AssertionError  	27	1	add
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    result[0];    xk=  1.0  /  result[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	9	add
10	[BUG]  [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  result[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    result[0];    xk=  1.0  /  result[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	9	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    result[0];    xk=  1.0  /  function[0];	  	compilable	  [FE]  AssertionError  	27	1	add
12	[BUG]  [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  function[0];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    result[0];    xk=  1.0  /  function[0];	  	compilable	  [FE]  AssertionError  	27	1	add
13	[BUG]  [BUGGY]  n  =  Math.min(result,  n  +  1,  resultOffset);  [CE]  no  suitable  method  found  for  min(double[],int,int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(result,  n  +  1,  resultOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(result,  n  +  1,  resultOffset);	  n    =    Math.min(result,    n    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,int)	29	None	replace
14	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  n  +  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(resultOffset,  n  +  1);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(resultOffset,  n  +  1);	  n    =    Math.min(result,    n    +    1);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	29	None	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[1];  xk=  0.5  *  function[0];  xk=  0.5  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        0.5        *        function[0];        xk=    0.5    *    function[1];    xk=  0.5  *  function[0];  xk=  0.5  *  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
16	[BUG]  [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[1];  xk=  0.5  *  function[0];  xk=  0.5  *  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[1];  xk=  0.5  *  function[0];  xk=  0.5  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        0.5        *        function[0];        xk=    0.5    *    function[1];    xk=  0.5  *  function[0];  xk=  0.5  *  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
17	[BUG]  [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[1];  double  xk=  0.5  *  function[0];  xk=  0.5  *  function[1];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[1];  double  xk=  0.5  *  function[0];  xk=  0.5  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        0.5        *        function[0];        xk=    0.5    *    function[1];    double  xk=  0.5  *  function[0];  xk=  0.5  *  function[1];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	14	None	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  function[0];  xk=  1.0  *  function[1];	  xk=    1.0    *    function[0];    xk=    1.0    *    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	10	replace
19	[BUG]  [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  *  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  function[0];  xk=  1.0  *  function[1];	  xk=    1.0    *    function[0];    xk=    1.0    *    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	10	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  *  result[0];  xk=  1.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  *  result[0];  xk=  1.0  *  function[1];	  xk=    1.0    *    function[0];    xk=    1.0    *    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	10	replace
21	[BUG]  [BUGGY]  xk=  1.0  *  result[0];  xk=  1.0  *  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  *  result[0];  xk=  1.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  *  result[0];  xk=  1.0  *  function[1];	  xk=    1.0    *    function[0];    xk=    1.0    *    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	10	replace
22	[BUG]  [BUGGY]  n  =  Math.min(result,  n  *  2);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(result,  n  *  2);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(result,  n  *  2);	  n    =    Math.min(result,    n    *    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	43	None	replace
23	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  n  *  resultOffset);  [CE]  final  parameter  n  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(resultOffset,  n  *  resultOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(resultOffset,  n  *  resultOffset);	  n    =    Math.min(result,    n    *    resultOffset);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	43	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[1];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  function[1];  xk=  1.0  /  function[1];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	10	replace
25	[BUG]  [BUGGY]  xk=  1.0  /  function[1];  xk=  1.0  /  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[1];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  function[1];  xk=  1.0  /  function[1];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	10	replace
26	[BUG]  [BUGGY]  double  xk=  1.0  *  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  double  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	double  xk=  1.0  *  function[0];	  xk=    1.0    *    function[0];    double    xk=    1.0    *    function[0];    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	20	None	replace
27	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  0,  resultOffset);  [CE]  no  suitable  method  found  for  min(int,int,int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(resultOffset,  0,  resultOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(resultOffset,  0,  resultOffset);	  n    =    Math.min(result,    0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,int,int)	35	None	replace
28	[BUG]  [BUGGY]  n  =  Math.min(result,  0,  resultOffset,  n);  [CE]  no  suitable  method  found  for  min(double[],int,int,int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(result,  0,  resultOffset,  n);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(result,  0,  resultOffset,  n);	  n    =    Math.min(result,    0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,int,int)	35	None	replace
29	[BUG]  [BUGGY]  n  =  Math.max(result,  n  +  1,  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  n  +  1,  resultOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  n  +  1,  resultOffset);	  n    =    Math.max(result,    n    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	10	None	replace
30	[BUG]  [BUGGY]  n  =  Math.max(result,  n  +  1,  nOffset);  [CE]  cannot  find  symbol  nOffset  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  n  +  1,  nOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  n  +  1,  nOffset);	  n    =    Math.max(result,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol  nOffset	10	None	replace
31	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(resultOffset,  1);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(resultOffset,  1);	  n    =    Math.max(resultOffset,    2);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	36	None	replace
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        /        function[0];        xk=    1.0    /    function[1];    xk=  1.0  /  function[0];  xk=  1.0  /  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
33	[BUG]  [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        /        function[0];        xk=    1.0    /    function[1];    xk=  1.0  /  function[0];  xk=  1.0  /  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
34	[BUG]  [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  double  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  double  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        /        function[0];        xk=    1.0    /    function[1];    double  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	4	None	add
35	[BUG]  [BUGGY]  n  =  Math.max(result,  n  *  2);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  n  *  2);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  n  *  2);	  n    =    Math.max(result,    n    *    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	42	None	replace
36	[BUG]  [BUGGY]  n  =  Math.max(result,  n  *  resultOffset,  xk);  [CE]  no  suitable  method  found  for  max(double[],int,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  n  *  resultOffset,  xk);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  n  *  resultOffset,  xk);	  n    =    Math.max(result,    n    *    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,double)	42	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        *        function[0];        xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  1.0  *  function[0];	  	compilable	  [FE]  AssertionError  	18	1	add
38	[BUG]  [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        *        function[0];        xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  1.0  *  function[0];	  	compilable	  [FE]  AssertionError  	18	1	add
39	[BUG]  [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  double  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  double  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        *        function[0];        xk=    1.0    *    function[0];    double  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	18	None	add
40	[BUG]  [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  int  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  int  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        *        function[0];        xk=    1.0    *    function[0];    int  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	18	None	add
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  result[0];  xk=  0.5  *  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    0.5    *    result[0];    xk=  0.5  *  result[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
42	[BUG]  [BUGGY]  xk=  0.5  *  result[0];  xk=  0.5  *  result[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  result[0];  xk=  0.5  *  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    0.5    *    result[0];    xk=  0.5  *  result[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
43	[BUG]  [BUGGY]  xk=  0.5  *  result[0];  double  xk=  0.5  *  result[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  result[0];  double  xk=  0.5  *  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    0.5    *    result[0];    double  xk=  0.5  *  result[0];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	23	None	add
44	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  2);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(resultOffset,  resultOffset  +  2);	  n    =    Math.min(resultOffset,    resultOffset    +    1);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	31	None	replace
45	[BUG]  [BUGGY]  double  xk=  1.0  /  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  double  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	double  xk=  1.0  /  function[0];	  xk=    1.0    /    function[0];    double    xk=    1.0    /    function[0];    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	3	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (2.0  *  function[0]);  xk=  1.0  /  (2.0  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (2.0    *    function[0]);    xk=  1.0  /  (2.0  *  function[0]);	  	compilable	  [FE]  AssertionError  	32	1	add
47	[BUG]  [BUGGY]  xk=  1.0  /  (2.0  *  function[0]);  xk=  1.0  /  (2.0  *  function[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (2.0  *  function[0]);  xk=  1.0  /  (2.0  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (2.0    *    function[0]);    xk=  1.0  /  (2.0  *  function[0]);	  	compilable	  [FE]  AssertionError  	32	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (2.0  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (2.0    *    function[0]);    xk=  1.0  /  (3.0  *  function[0]);	  	compilable	  [FE]  AssertionError  	32	1	add
49	[BUG]  [BUGGY]  xk=  1.0  /  (2.0  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (2.0  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (2.0    *    function[0]);    xk=  1.0  /  (3.0  *  function[0]);	  	compilable	  [FE]  AssertionError  	32	1	add
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[1];  xk=  1.0  *  function[0];  xk=  1.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        *        function[0];        xk=    1.0    *    function[1];    xk=  1.0  *  function[0];  xk=  1.0  *  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	9	add
51	[BUG]  [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[1];  xk=  1.0  *  function[0];  xk=  1.0  *  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[1];  xk=  1.0  *  function[0];  xk=  1.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        *        function[0];        xk=    1.0    *    function[1];    xk=  1.0  *  function[0];  xk=  1.0  *  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	9	add
52	[BUG]  [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[1];  double  xk=  1.0  *  function[0];  xk=  1.0  *  function[1];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[1];  double  xk=  1.0  *  function[0];  xk=  1.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        *        function[0];        xk=    1.0    *    function[1];    double  xk=  1.0  *  function[0];  xk=  1.0  *  function[1];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	21	None	add
53	[BUG]  [BUGGY]  double  xk=  0.5  *  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  double  xk=  0.5  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	double  xk=  0.5  *  function[0];	  xk=    0.5    *    function[0];    double    xk=    0.5    *    function[0];    	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	13	None	replace
54	[BUG]  [BUGGY]  n  =  Math.max(result,  0,  resultOffset,  n);  [CE]  no  suitable  method  found  for  max(double[],int,int,int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  0,  resultOffset,  n);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  0,  resultOffset,  n);	  n    =    Math.max(result,    0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int,int)	34	None	replace
55	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  0,  resultOffset);  [CE]  no  suitable  method  found  for  max(int,int,int)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(resultOffset,  0,  resultOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(resultOffset,  0,  resultOffset);	  n    =    Math.max(result,    0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,int,int)	34	None	replace
56	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  resultOffset  +  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(resultOffset,  resultOffset  +  2);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(resultOffset,  resultOffset  +  2);	  n    =    Math.max(resultOffset,    resultOffset    +    1);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	16	None	replace
57	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[1];  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  (3.0  *  function[1];	  xk=    1.0    /    (3.0    *    function[0];    	non-compiled	[CE]  ')'  expected	46	None	replace
58	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(resultOffset,  1);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(resultOffset,  1);	  n    =    Math.min(resultOffset,    2);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	38	None	replace
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[1]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  (3.0  *  function[1]);	  xk=    1.0    /    (3.0    *    function[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
60	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[1]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  (3.0  *  function[1]);	  xk=    1.0    /    (3.0    *    function[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
61	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset  +  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.abs(resultOffset  +  2);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.abs(resultOffset  +  2);	  n    =    Math.abs(resultOffset    +    1);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	30	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (n    *    FastMath.cbrt(function[0]));    xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));	  	compilable	  [FE]  AssertionError  	6	1	add
63	[BUG]  [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (n    *    FastMath.cbrt(function[0]));    xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));	  	compilable	  [FE]  AssertionError  	6	1	add
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  xk=  1.0  /  (n  *  FastMath.cbrt(function[1]));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (n    *    FastMath.cbrt(function[0]));    xk=  1.0  /  (n  *  FastMath.cbrt(function[1]));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
65	[BUG]  [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  xk=  1.0  /  (n  *  FastMath.cbrt(function[1]));  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  xk=  1.0  /  (n  *  FastMath.cbrt(function[1]));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (n    *    FastMath.cbrt(function[0]));    xk=  1.0  /  (n  *  FastMath.cbrt(function[1]));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /  (3.0  *  function[0]  *  function[0]);	  	compilable	  [FE]  AssertionError  	44	1	add
67	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /  (3.0  *  function[0]  *  function[0]);	  	compilable	  [FE]  AssertionError  	44	1	add
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /(.0  *  function[0]  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /(.0  *  function[0]  *  function[0]);	  	compilable	  [FE]  AssertionError  	44	1	add
69	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /(.0  *  function[0]  *  function[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /(.0  *  function[0]  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /(.0  *  function[0]  *  function[0]);	  	compilable	  [FE]  AssertionError  	44	1	add
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (3.0  *  function[0]);	  	compilable	  [FE]  AssertionError  	25	1	add
71	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (3.0  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (3.0  *  function[0]);	  	compilable	  [FE]  AssertionError  	25	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(operand[0],  1.0  /  n));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(operand[0],  1.0  /  n));	  	compilable	  [FE]  AssertionError  	25	1	add
73	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(operand[0],  1.0  /  n));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(operand[0],  1.0  /  n));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(operand[0],  1.0  /  n));	  	compilable	  [FE]  AssertionError  	25	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  1.0  /  n));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(function[0],  1.0  /  n));	  	compilable	  [FE]  AssertionError  	25	1	add
75	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  1.0  /  n));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  1.0  /  n));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(function[0],  1.0  /  n));	  	compilable	  [FE]  AssertionError  	25	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  *  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  *  result[0];	  xk=    0.5    *    result[0];    	compilable	  [FE]  AssertionError  	24	9	replace
77	[BUG]  [BUGGY]  xk=  1.0  *  result[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  *  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  *  result[0];	  xk=    0.5    *    result[0];    	compilable	  [FE]  AssertionError  	24	9	replace
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  0.5  *  result[1];	  xk=    0.5    *    result[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	10	replace
79	[BUG]  [BUGGY]  xk=  0.5  *  result[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  0.5  *  result[1];	  xk=    0.5    *    result[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	10	replace
80	[BUG]  [BUGGY]  n  =  Math.max(result,  n,  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  n,  resultOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  n,  resultOffset);	  n    =    Math.max(result,    resultOffset,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	9	None	replace
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  result[1];	  xk=    1.0    /    result[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	10	replace
82	[BUG]  [BUGGY]  xk=  1.0  /  result[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  result[1];	  xk=    1.0    /    result[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	10	replace
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  resultOffset;  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  resultOffset;	  xk=    1.0    /    result[0];    	compilable	  [FE]  AssertionError  	28	9	replace
84	[BUG]  [BUGGY]  xk=  1.0  /  resultOffset;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  resultOffset;  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  resultOffset;	  xk=    1.0    /    result[0];    	compilable	  [FE]  AssertionError  	28	9	replace
85	[BUG]  [BUGGY]  n  =  Math.abs(function[1]);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.abs(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.abs(function[1]);	  n    =    Math.abs(function[0]);    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
86	[BUG]  [BUGGY]  n  =  Math.abs(function[2]);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.abs(function[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.abs(function[2]);	  n    =    Math.abs(function[0]);    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
87	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[1]  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  (3.0  *  function[1]  *  function[0]);	  xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	10	replace
88	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[1]  *  function[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[1]  *  function[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  (3.0  *  function[1]  *  function[0]);	  xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	10	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        /        function[0];        xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];	  	compilable	  [FE]  AssertionError  	1	1	add
90	[BUG]  [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        /        function[0];        xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];	  	compilable	  [FE]  AssertionError  	1	1	add
91	[BUG]  [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  double  xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  double  xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        /        function[0];        xk=    1.0    /    function[0];    double  xk=  1.0  /  function[0];  xk=  1.0  /  function[0];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	1	None	add
92	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        /        function[0];        xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	9	add
93	[BUG]  [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        /        function[0];        xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  /  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	9	add
94	[BUG]  [BUGGY]  n  =  Math.max(result,  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  resultOffset);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  resultOffset);	  n    =    Math.max(result0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	41	None	replace
95	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  /  function[2];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  function[0];  xk=  1.0  /  function[2];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
96	[BUG]  [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  /  function[2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  /  function[2];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  function[0];  xk=  1.0  /  function[2];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
97	[BUG]  [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  int  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  int  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        0.5        *        function[0];        xk=    0.5    *    function[0];    int  xk=  0.5  *  function[0];  xk=  0.5  *  function[0];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	11	None	add
98	[BUG]  [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  double  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  double  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (n    *    FastMath.cbrt(function[0]));    double  xk=  1.0  /  (n  *  FastMath.cbrt(function[0]));	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	6	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  function[0];  xk=  1.0  *  function[0];	  xk=    1.0    *    function[0];    xk=    1.0    *    function[0];    	compilable	  [FE]  AssertionError  	19	10	replace
100	[BUG]  [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  *  function[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  function[0];  xk=  1.0  *  function[0];	  xk=    1.0    *    function[0];    xk=    1.0    *    function[0];    	compilable	  [FE]  AssertionError  	19	10	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));	  	compilable	  [FE]  AssertionError  	25	1	add
102	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));	  	compilable	  [FE]  AssertionError  	25	1	add
103	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(operand[0]);  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(operand[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(operand[0]);	  	non-compiled	[CE]  ')'  expected	25	None	add
104	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  1)-  1;  [CE]  final  parameter  n  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.min(resultOffset,  1)-  1;  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.min(resultOffset,  1)-  1;	  n    =    Math.min(resultOffset,    2)-    1;    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	37	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));	  	compilable	  [FE]  AssertionError  	44	1	add
106	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));	  	compilable	  [FE]  AssertionError  	44	1	add
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  0.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        *        function[0];        xk=    1.0    *    function[0];    xk=  0.0  *  function[0];  xk=  1.0  *  function[0];	  	compilable	  [FE]  AssertionError  	18	1	add
108	[BUG]  [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  0.0  *  function[0];  xk=  1.0  *  function[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    *    function[0];    xk=  1.0  *  function[0];  xk=  0.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        *        function[0];        xk=    1.0    *    function[0];    xk=  0.0  *  function[0];  xk=  1.0  *  function[0];	  	compilable	  [FE]  AssertionError  	18	1	add
109	[BUG]  [BUGGY]  n  =  Math.max(result,  resultOffset  +  1);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  resultOffset  +  1);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  resultOffset  +  1);	  n    =    Math.max(resultOffset,    resultOffset    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	16	None	replace
110	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  function[1];  xk=  0.5  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  0.5  *  function[1];  xk=  0.5  *  function[1];	  xk=    0.5    *    function[0];    xk=    0.5    *    function[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	10	replace
111	[BUG]  [BUGGY]  xk=  0.5  *  function[1];  xk=  0.5  *  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  0.5  *  function[1];  xk=  0.5  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  0.5  *  function[1];  xk=  0.5  *  function[1];	  xk=    0.5    *    function[0];    xk=    0.5    *    function[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	10	replace
112	[BUG]  [BUGGY]  xk=  1.0  *  (3.0  *  function[1];  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  *  (3.0  *  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  *  (3.0  *  function[1];	  xk=    1.0    *    (3.0    *    function[0];    	non-compiled	[CE]  ')'  expected	39	None	replace
113	[BUG]  [BUGGY]  xk=  1.0  /  result[0];  double  xk=  1.0  /  result[0];  [CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  double  xk=  1.0  /  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    result[0];    double  xk=  1.0  /  result[0];	  	non-compiled	[CE]  variable  xk  is  already  defined  in  method  rootN(double[],int,int,double[],int)	27	None	add
114	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  result[0];  xk=  1.0  /  function[1];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
115	[BUG]  [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  result[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  result[0];  xk=  1.0  /  function[1];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
116	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  xk=  1.0  *  function[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        /        function[0];        xk=    1.0    /    function[1];    xk=  1.0  *  function[0];  xk=  1.0  /  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
117	[BUG]  [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  xk=  1.0  *  function[0];  xk=  1.0  /  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[1];  xk=  1.0  *  function[0];  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        /        function[0];        xk=    1.0    /    function[1];    xk=  1.0  *  function[0];  xk=  1.0  /  function[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (n  *  FastMath.cbrt(operand[0]));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /  (n  *  FastMath.cbrt(operand[0]));	  	compilable	  [FE]  AssertionError  	44	1	add
119	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (n  *  FastMath.cbrt(operand[0]));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  xk=  1.0  /  (n  *  FastMath.cbrt(operand[0]));  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]    *    function[0]);    xk=  1.0  /  (n  *  FastMath.cbrt(operand[0]));	  	compilable	  [FE]  AssertionError  	44	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        0.5        *        function[0];        xk=    0.5    *    function[0];    xk=  1.0  *  function[0];  xk=  1.0  *  function[0];	  	compilable	  [FE]  AssertionError  	11	1	add
121	[BUG]  [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    0.5    *    function[0];    xk=  0.5  *  function[0];  xk=  1.0  *  function[0];  xk=  1.0  *  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        0.5        *        function[0];        xk=    0.5    *    function[0];    xk=  1.0  *  function[0];  xk=  1.0  *  function[0];	  	compilable	  [FE]  AssertionError  	11	1	add
122	[BUG]  [BUGGY]  n  =  Math.max(result,  0,  resultOffset  +  1);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  0,  resultOffset  +  1);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  0,  resultOffset  +  1);	  n    =    Math.max(result,    0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	34	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  +  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  +  result[0];	  xk=    0.5    *    result[0];    	compilable	  [FE]  AssertionError  	24	10	replace
124	[BUG]  [BUGGY]  xk=  1.0  +  result[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  +  result[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  +  result[0];	  xk=    0.5    *    result[0];    	compilable	  [FE]  AssertionError  	24	10	replace
125	[BUG]  [BUGGY]  n  =  Math.max(result,  1);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(result,  1);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(result,  1);	  n    =    Math.max(resultOffset,    2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	36	None	replace
126	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  function[1];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	10	replace
127	[BUG]  [BUGGY]  xk=  1.0  /  function[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  function[1];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  function[1];	  xk=    1.0    /    function[0];    xk=    1.0    /    function[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	10	replace
128	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  n  +  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  n  =  Math.max(resultOffset,  n  +  1);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	n  =  Math.max(resultOffset,  n  +  1);	  n    =    Math.max(resultOffset,    n);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	17	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  result[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=  1.0  /  (3.0  *  function[0]  *  result[0]);	  xk=    1.0    /    result[0];    	compilable	  [FE]  AssertionError  	28	9	replace
130	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  result[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]  *  result[0]);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=  1.0  /  (3.0  *  function[0]  *  result[0]);	  xk=    1.0    /    result[0];    	compilable	  [FE]  AssertionError  	28	9	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  *  function[0];  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	add	xk=        1.0        /        function[0];        xk=    1.0    /    function[0];    xk=  1.0  *  function[0];  xk=  1.0  /  function[0];	  	compilable	  [FE]  AssertionError  	1	1	add
132	[BUG]  [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  *  function[0];  xk=  1.0  /  function[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=    1.0    /    function[0];    xk=  1.0  /  function[0];  xk=  1.0  *  function[0];  xk=  1.0  /  function[0];  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=        1.0        /        function[0];        xk=    1.0    /    function[0];    xk=  1.0  *  function[0];  xk=  1.0  /  function[0];	  	compilable	  [FE]  AssertionError  	1	1	add
133	[BUG]  [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(operand[0]),  1.0  /  n);  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);      [BUGGY]  xk=  1.0  /  (3.0  *  function[0]);  xk=  1.0  /  (n  *  FastMath.pow(operand[0]),  1.0  /  n);  [BUGGY]      }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  for  (int  i  =  1;  i  <=  order;  ++i)  {  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	951	951	1	replace	xk=    1.0    /    (3.0    *    function[0]);    xk=  1.0  /  (n  *  FastMath.pow(operand[0]),  1.0  /  n);	  	non-compiled	[CE]  ')'  expected	25	None	add
