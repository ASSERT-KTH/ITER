bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  double[]  coeff  =  new  double[order];  [CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[]  coeff  =  new  double[order];  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[]  coeff  =  new  double[order];		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)	35	None	add
2	[BUG]  [BUGGY]    final  double[]  x  =  new  double[order];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[]  x  =  new  double[order];  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[]  x  =  new  double[order];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	35	None	add
3	[BUG]  [BUGGY]    final  double[]  coeff  =  new  double[order];  x[0]  =  1;  [CE]  array  required,  but  double  found  [FE]        AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[]  coeff  =  new  double[order];  x[0]  =  1;  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[]  coeff  =  new  double[order];  x[0]  =  1;		non-compiled	[CE]  array  required,  but  double  found	35	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]  final  double[]  q  =  new  double[1];  [BUGGY]  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	add	final  double[]  q  =  new  double[1];	final  double[]  q  =  new  double[order];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	4	replace
5	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]  final  double[]  q  =  new  double[1];  [BUGGY]  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	final  double[]  q  =  new  double[1];	final  double[]  q  =  new  double[order];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	4	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]  final  double[]  q  =  new  double[2];  [BUGGY]  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	add	final  double[]  q  =  new  double[2];	final  double[]  q  =  new  double[order];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	4	replace
7	[BUG]  [BUGGY]  final  double[]  q  =  new  double[2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]  final  double[]  q  =  new  double[2];  [BUGGY]  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	final  double[]  q  =  new  double[2];	final  double[]  q  =  new  double[order];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	4	replace
8	[BUG]  [BUGGY]    final  double[][]  coeff  =  new  double[order][1];  [CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[][]  coeff  =  new  double[order][1];  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[][]  coeff  =  new  double[order][1];		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)	35	None	add
9	[BUG]  [BUGGY]    final  double[][]  coeff  =  new  double[order][0];  [CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[][]  coeff  =  new  double[order][0];  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[][]  coeff  =  new  double[order][0];		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  atan(double[],int,double[],int)	35	None	add
10	[BUG]  [BUGGY]    final  double[][]  coeff  =  operand[0];  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[][]  coeff  =  operand[0];  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[][]  coeff  =  operand[0];		non-compiled	[CE]  incompatible  types	35	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]  final  double[]  q  =  new  double[order  +  1];  [BUGGY]  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	add	final  double[]  q  =  new  double[order  +  1];	final  double[]  q  =  new  double[order];  	compilable	  [FE]  AssertionError  	34	1	replace
12	[BUG]  [BUGGY]  final  double[]  q  =  new  double[order  +  1];  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]  final  double[]  q  =  new  double[order  +  1];  [BUGGY]  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	final  double[]  q  =  new  double[order  +  1];	final  double[]  q  =  new  double[order];  	compilable	  [FE]  AssertionError  	34	1	replace
13	[BUG]  [BUGGY]    final  double[][]  coeff  =  function[1]  *  x;  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[][]  coeff  =  function[1]  *  x;  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[][]  coeff  =  function[1]  *  x;		non-compiled	[CE]  incompatible  types	35	None	add
14	[BUG]  [BUGGY]    final  double[][]  coeff  =  new  double[order][x];  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {          [BUGGY]    final  double[][]  coeff  =  new  double[order][x];  [BUGGY]  final  double[]  q  =  new  double[order];  q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1338	1338	1	replace	    final  double[][]  coeff  =  new  double[order][x];		non-compiled	[CE]  possible  loss  of  precision	35	None	add
