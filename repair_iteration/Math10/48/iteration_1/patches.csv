bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  n  =  Math.abs(resultOffset  +  1);  [BUGGY]    if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	n  =  Math.abs(resultOffset  +  1);	      n    =    Math.abs(resultOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  int  n  =  Math.min(resultOffset,  n  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  int  n  =  Math.min(resultOffset,  n  +  1);  [BUGGY]    if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	int  n  =  Math.min(resultOffset,  n  +  1);	      int    n    =    Math.min(resultOffset,    n);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  if  (n  ==  1)  {  if  (n  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  if  (n  ==  1)  {  if  (n  ==  1)  {  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	if    (n    ==    1)    {    if  (n  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
4	[BUG]  [BUGGY]  int  n  =  Math.min(resultOffset,  resultOffset  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  int  n  =  Math.min(resultOffset,  resultOffset  +  1);  [BUGGY]    if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	int  n  =  Math.min(resultOffset,  resultOffset  +  1);	      int    n    =    Math.min(resultOffset,    resultOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  1);  [BUGGY]    if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	n  =  Math.min(resultOffset,  resultOffset  +  1);	      n    =    Math.min(resultOffset,    resultOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  int  n  =  Math.min(resultOffset,  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  int  n  =  Math.min(resultOffset,  1);  [BUGGY]    if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	int  n  =  Math.min(resultOffset,  1);	      int    n    =    Math.min(resultOffset,    n);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  if  (n  <  1)  {  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	add	if  (n  <  1)  {	  if    (n    ==    1)    {    	compilable	  [FE]  AssertionError  	5	1	replace
8	[BUG]  [BUGGY]  if  (n  <  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  if  (n  <  1)  {  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	if  (n  <  1)  {	  if    (n    ==    1)    {    	compilable	  [FE]  AssertionError  	5	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  if  (n  ==  0)  {  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	add	if  (n  ==  0)  {	  if    (n    ==    1)    {    	compilable	  [FE]  AssertionError  	5	1	replace
10	[BUG]  [BUGGY]  if  (n  ==  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  if  (n  ==  0)  {  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	if  (n  ==  0)  {	  if    (n    ==    1)    {    	compilable	  [FE]  AssertionError  	5	1	replace
11	[BUG]  [BUGGY]  if  (n  ==  1)  {  if  (n  ==  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  if  (n  ==  1)  {  if  (n  ==  2)  {  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	if    (n    ==    1)    {    if  (n  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset  *  resultOffset);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  n  =  Math.abs(resultOffset  *  resultOffset);  [BUGGY]    if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	n  =  Math.abs(resultOffset  *  resultOffset);	      n    =    Math.abs(resultOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  int  n  =  Math.min(result,  n  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;    [BUGGY]  int  n  =  Math.min(result,  n  +  1);  [BUGGY]    if  (n  ==  2)  {  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	949	949	1	replace	int  n  =  Math.min(result,  n  +  1);	      int    n    =    Math.min(result,    n);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
