bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ray(x,  0,  tmp1,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ray(x,  0,  tmp1,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	ray(x,  0,  tmp1,  xOffset,  tmp2,  0);	  ray(tmp1,    0,    x,    xOffset,    tmp2,    0);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
2	[BUG]  [BUGGY]  ray(tmp1,  0,  x,  yOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ray(tmp1,  0,  x,  yOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	ray(tmp1,  0,  x,  yOffset,  tmp2,  0);	  ray(tmp1,    0,    x,    xOffset,    tmp2,    0);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	add(tmp1,    0,    x,    xOffset,    tmp2,    1);    add(tmp1,  0,  x,  xOffset,  tmp2,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	3	add
4	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    xOffset,    tmp2,    1);    add(tmp1,  0,  x,  xOffset,  tmp2,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	3	add
5	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  remove(tmp1,  0,  x,  xOffset,  tmp2,  1);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  remove(tmp1,  0,  x,  xOffset,  tmp2,  1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    xOffset,    tmp2,    1);    remove(tmp1,  0,  x,  xOffset,  tmp2,  1);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
6	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  add(tmp1,  0,  x,  xOffset,  tmp2,  1));  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  add(tmp1,  0,  x,  xOffset,  tmp2,  1));  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    xOffset,    tmp2,    1);    add(tmp1,  0,  x,  xOffset,  tmp2,  1));	  	non-compiled	[CE]  ';'  expected	34	None	add
7	[BUG]  [BUGGY]  tmp1  =  new  double[getX()  +  1];  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getX()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getX()  +  1];	  tmp1    =    new    double[getX()    ];    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
8	[BUG]  [BUGGY]  int  x  =  Math.min(resultOffset,  xOffset);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  x  =  Math.min(resultOffset,  xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  x  =  Math.min(resultOffset,  xOffset);	          int    x    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	47	None	replace
9	[BUG]  [BUGGY]  int  x  =  Math.min(resultOffset,  x1);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  x  =  Math.min(resultOffset,  x1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  x  =  Math.min(resultOffset,  x1);	          int    x    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	47	None	replace
10	[BUG]  [BUGGY]  bucket(x1,  0,  tmp1,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  x1  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  bucket(x1,  0,  tmp1,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	bucket(x1,  0,  tmp1,  xOffset,  tmp2,  0);	  if(x    <    0)    {    subtract(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol  x1	46	None	replace
11	[BUG]  [BUGGY]  x  =  Math.min(tmp1,  xOffset,  tmp2.length);  [CE]  no  suitable  method  found  for  min(double[],int,int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  Math.min(tmp1,  xOffset,  tmp2.length);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  Math.min(tmp1,  xOffset,  tmp2.length);	  x    =    Math.min(tmp1.length,    xOffset);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,int)	1	None	replace
12	[BUG]  [BUGGY]  x  =  Math.min(tmp2,  xOffset,  tmp1.length);  [CE]  no  suitable  method  found  for  min(double[],int,int)  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  Math.min(tmp2,  xOffset,  tmp1.length);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  Math.min(tmp2,  xOffset,  tmp1.length);	  x    =    Math.min(tmp1.length,    xOffset);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,int)	1	None	replace
13	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  +  2);  [CE]  cannot  find  symbol  r  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  +  2);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  +  2);	  r    =    sqrt(x[xOffset]    +    1);    	non-compiled	[CE]  cannot  find  symbol  r	20	None	replace
14	[BUG]  [BUGGY]          double  r  =  Math.abs(xOffset);  double  r  =  Math.abs(xOffset);  [CE]  variable  r  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          double  r  =  Math.abs(xOffset);  double  r  =  Math.abs(xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                double    r    =    Math.abs(xOffset);    double  r  =  Math.abs(xOffset);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	38	None	add
15	[BUG]  [BUGGY]          double  r  =  Math.abs(xOffset);  Double  r  =  Math.abs(xOffset);  [CE]  variable  r  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          double  r  =  Math.abs(xOffset);  Double  r  =  Math.abs(xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                double    r    =    Math.abs(xOffset);    Double  r  =  Math.abs(xOffset);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	38	None	add
16	[BUG]  [BUGGY]          double  r  =  Math.abs(xOffset);  int  r  =  Math.abs(xOffset);  [CE]  variable  r  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          double  r  =  Math.abs(xOffset);  int  r  =  Math.abs(xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                double    r    =    Math.abs(xOffset);    int  r  =  Math.abs(xOffset);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	38	None	add
17	[BUG]  [BUGGY]  ((  x  <  <  1)||(x  >  0))?  getSize()  :  x);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ((  x  <  <  1)||(x  >  0))?  getSize()  :  x);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	((  x  <  <  1)||(x  >  0))?  getSize()  :  x);	  ((    x    <    <    1)||(x    >    xOffset))?    getSize()    :    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  rootN(x,  y));  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  rootN(x,  y));  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  -  1  +  rootN(x,  y));	  r    =    sqrt(x[xOffset]    -    1    +    y);    	non-compiled	[CE]  cannot  find  symbol  r	40	None	replace
19	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  rootN(x,  y);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  rootN(x,  y);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  -  1  +  rootN(x,  y);	  r    =    sqrt(x[xOffset]    -    1    +    y);    	non-compiled	[CE]  ')'  expected	40	None	replace
20	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(Throwable  t)  {  }	  if(r    <    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);//    r    +    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	3	add
22	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	3	add
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	3	add
24	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	3	add
25	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize();  tmp2  =  new  double[getSize()  +  1];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize();  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize();  tmp2  =  new  double[getSize()  +  1];	  	non-compiled	[CE]  ']'  expected	48	None	add
26	[BUG]  [BUGGY]  x  =  sqrt(x,  y);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  y);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  y);	  x    =    sqrt(x,    xOffset);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
27	[BUG]  [BUGGY]  try  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {	  try    {    [Delete]    catch(Exception    e)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	42	None	replace
28	[BUG]  [BUGGY]  tmp1  =  new  double[getLength()  +  1];  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getLength()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getLength()  +  1];	  tmp1    =    new    double[getLength()    ];    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
29	[BUG]  [BUGGY]  tryReturn(x,  yOffset,  y,  yOffset,  tmp1,  0);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tryReturn(x,  yOffset,  y,  yOffset,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tryReturn(x,  yOffset,  y,  yOffset,  tmp1,  0);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
30	[BUG]  [BUGGY]  tryLeft(x,  yOffset,  y,  yOffset,  tmp1,  0);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tryLeft(x,  yOffset,  y,  yOffset,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tryLeft(x,  yOffset,  y,  yOffset,  tmp1,  0);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
31	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  }	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    If(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    If(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  ((  x  <  <  1)||(x  >  0))?  getSize()  :  0);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ((  x  <  <  1)||(x  >  0))?  getSize()  :  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	((  x  <  <  1)||(x  >  0))?  getSize()  :  0);	          ((    x    <    <    1)||(x    >    xOffset))?    getSize()    :    0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
34	[BUG]  [BUGGY]  r  +=  x  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +=  x  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +=  x  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);	  r    +=    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    	non-compiled	[CE]  ';'  expected	17	None	replace
35	[BUG]  [BUGGY]  r  +=  x  divide(y,  yOffset,  tmp1,  0,  tmp2,  0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +=  x  divide(y,  yOffset,  tmp1,  0,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +=  x  divide(y,  yOffset,  tmp1,  0,  tmp2,  0);	  r    +=    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    	non-compiled	[CE]  ';'  expected	17	None	replace
36	[BUG]  [BUGGY]  double  r  =  Math.abs(x);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  double  r  =  Math.abs(x);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	double  r  =  Math.abs(x);	          double    r    =    Math.abs(xOffset);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	39	None	replace
37	[BUG]  [BUGGY]  double  r  =  Math.abs(y);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  double  r  =  Math.abs(y);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	double  r  =  Math.abs(y);	          double    r    =    Math.abs(xOffset);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	39	None	replace
38	[BUG]  [BUGGY]  tmp1  =  new  double[getOffset()  ];  tmp1  =  new  double[getSize()  ];  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getOffset()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getOffset()  ];  tmp1  =  new  double[getSize()  ];	          tmp1    =    new    double[getSize()    ];    tmp1    =    new    double[getSize()    ];    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
39	[BUG]  [BUGGY]  x  =  sqrt(x,  yOffset,  tmp1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  yOffset,  tmp1);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  yOffset,  tmp1);	  x    =    sqrt(x,    yOffset,    rootN);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
40	[BUG]  [BUGGY]  x  =  sqrt(x,  yOffset,  tmp2);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  yOffset,  tmp2);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  yOffset,  tmp2);	  x    =    sqrt(x,    yOffset,    rootN);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
41	[BUG]  [BUGGY]  x  =  sqrt(x,  xOffset,  y);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  xOffset,  y);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  xOffset,  y);	  x    =    sqrt(x,    yOffset,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
42	[BUG]  [BUGGY]  x  =  sqrt(x,  xOffset,  resultOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  xOffset,  resultOffset);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  xOffset,  resultOffset);	  x    =    sqrt(x,    yOffset,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
43	[BUG]  [BUGGY]  xOffset  =  xOffset;  [CE]  final  parameter  xOffset  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  xOffset  =  xOffset;  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	xOffset  =  xOffset;	  rayUnit    =    rayUnit;    	non-compiled	[CE]  final  parameter  xOffset  may  not  be  assigned	31	None	replace
44	[BUG]  [BUGGY]  xOffset  =  x;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  xOffset  =  x;  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	xOffset  =  x;	  rayUnit    =    rayUnit;    	non-compiled	[CE]  incompatible  types	31	None	replace
45	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(Throwable  t)  {	  if(r    >    0)    {    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
46	[BUG]  [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(Exception  e)  {	  if(r    >    0)    {    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()];	          tmp1    =    new    double[getSize()    +    1];    tmp2    =    new    double[getSize()    +    1];    	compilable	  [FE]  AssertionError  	49	3	replace
48	[BUG]  [BUGGY]  tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()];  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getSize()];  tmp2  =  new  double[getSize()];	          tmp1    =    new    double[getSize()    +    1];    tmp2    =    new    double[getSize()    +    1];    	compilable	  [FE]  AssertionError  	49	3	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	if(x.length        >        0)        {        add(tmp1,        0,        x,        xOffset,        tmp2,        0);        }        if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }	  	compilable	  [FE]  AssertionError  	3	1	add
50	[BUG]  [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(x.length        >        0)        {        add(tmp1,        0,        x,        xOffset,        tmp2,        0);        }        if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }	  	compilable	  [FE]  AssertionError  	3	1	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	if(x.length        >        0)        {        add(tmp1,        0,        x,        xOffset,        tmp2,        0);        }        if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)	  	compilable	  [FE]  AssertionError  	3	1	add
52	[BUG]  [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(x.length        >        0)        {        add(tmp1,        0,        x,        xOffset,        tmp2,        0);        }        if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)	  	compilable	  [FE]  AssertionError  	3	1	add
53	[BUG]  [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(x.length        >        0)        {        add(tmp1,        0,        x,        xOffset,        tmp2,        0);        }        if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x	  	non-compiled	[CE]  ')'  expected	3	None	add
54	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  /  2);  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  /  2);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  /  2);	  r    =    sqrt(x[xOffset]    /    1);    	non-compiled	[CE]  cannot  find  symbol  r	23	None	replace
55	[BUG]  [BUGGY]  y  /(r  +  x)atan(tmp1,  0,  tmp2,  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  y  /(r  +  x)atan(tmp1,  0,  tmp2,  1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	y  /(r  +  x)atan(tmp1,  0,  tmp2,  1);	  y    /(r    +    x)atan(tmp1,    0,    tmp2,    0);    	non-compiled	[CE]  not  a  statement	15	None	replace
56	[BUG]  [BUGGY]  rayon(x  +  r)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  rayon(x  +  r)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	rayon(x  +  r)  {	  rayon(r    +    x)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
57	[BUG]  [BUGGY]  rayon(y  +  x)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  rayon(y  +  x)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	rayon(y  +  x)  {	  rayon(r    +    x)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];	  	compilable	  [FE]  AssertionError  	24	3	add
59	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];	  	compilable	  [FE]  AssertionError  	24	3	add
60	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1.  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1.  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1.  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];	  	non-compiled	[CE]  <identifier>  expected	24	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[0];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[0];  tmp1  =  new  double[getSize()  +  1];	  	compilable	  [FE]  AssertionError  	24	3	add
62	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[0];  tmp1  =  new  double[getSize()  +  1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[0];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[0];  tmp1  =  new  double[getSize()  +  1];	  	compilable	  [FE]  AssertionError  	24	3	add
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        ];        tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];	  	compilable	  [FE]  AssertionError  	12	3	add
64	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        ];        tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];	  	compilable	  [FE]  AssertionError  	12	3	add
65	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1.  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1.  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        ];        tmp1    =    new    double[getSize()    ];    tmp1.  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];	  	non-compiled	[CE]  <identifier>  expected	12	None	add
66	[BUG]  [BUGGY]  add(tmp1,  0,  x,  y,  xOffset,  tmp2,  0);  [CE]  method  add  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  y,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,  0,  x,  y,  xOffset,  tmp2,  0);	  add(tmp1,    0,    x,    xOffset,    tmp2,    0);    	non-compiled	[CE]  method  add  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
67	[BUG]  [BUGGY]  add(x,  0,  x,  tmp2,  0);  [CE]  method  add  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(x,  0,  x,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(x,  0,  x,  tmp2,  0);	  add(tmp1,    0,    x,    xOffset,    tmp2,    0);    	non-compiled	[CE]  method  add  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
68	[BUG]  [BUGGY]  tmp1  =  new  double[getOffset()  ];  tmp1.  =  new  double[getSize()  ];  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getOffset()  ];  tmp1.  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getOffset()  ];  tmp1.  =  new  double[getSize()  ];	          tmp1    =    new    double[getSize()    ];    tmp1.    =    new    double[getSize()    ];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
69	[BUG]  [BUGGY]  x  =  sqrt(x,  y,  x[xOffset]);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  y,  x[xOffset]);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  y,  x[xOffset]);	  x    =    sqrt(x,    y[xOffset]);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
70	[BUG]  [BUGGY]  x  =  sqrt(x,  y,  xOffset[xOffset]);  [CE]  array  required,  but  int  found  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  y,  xOffset[xOffset]);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  y,  xOffset[xOffset]);	  x    =    sqrt(x,    y[xOffset]);    	non-compiled	[CE]  array  required,  but  int  found	21	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	add(tmp1,    0,    x,    xOffset,    tmp2,    0);    add(tmp1,  0,  x,  xOffset,  tmp2,  0);	  	compilable	  [FE]  AssertionError  	6	1	add
72	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    xOffset,    tmp2,    0);    add(tmp1,  0,  x,  xOffset,  tmp2,  0);	  	compilable	  [FE]  AssertionError  	6	1	add
73	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  remove(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  remove(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    xOffset,    tmp2,    0);    remove(tmp1,  0,  x,  xOffset,  tmp2,  0);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	add(tmp1,    0,    x,    yOffset,    tmp2,    0);    add(tmp1,  0,  x,  yOffset,  tmp2,  0);	  	compilable	  [FE]  AssertionError  	8	1	add
75	[BUG]  [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    yOffset,    tmp2,    0);    add(tmp1,  0,  x,  yOffset,  tmp2,  0);	  	compilable	  [FE]  AssertionError  	8	1	add
76	[BUG]  [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  remove(tmp1,  0,  x,  yOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  remove(tmp1,  0,  x,  yOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    yOffset,    tmp2,    0);    remove(tmp1,  0,  x,  yOffset,  tmp2,  0);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
77	[BUG]  [BUGGY]  int  r  =  Math.min(resultOffset,  x,  yOffset);  [CE]  no  suitable  method  found  for  min(int,double[],int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  r  =  Math.min(resultOffset,  x,  yOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  r  =  Math.min(resultOffset,  x,  yOffset);	  int    r    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[],int)	32	None	replace
78	[BUG]  [BUGGY]  int  r  =  Math.min(y,  resultOffset,  x);  [CE]  no  suitable  method  found  for  min(double[],int,double[])  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  r  =  Math.min(y,  resultOffset,  x);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  r  =  Math.min(y,  resultOffset,  x);	  int    r    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,double[])	32	None	replace
79	[BUG]  [BUGGY]  x  =  sqrt(xOffset,  y1);  [CE]  cannot  find  symbol  y1  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(xOffset,  y1);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(xOffset,  y1);	  x    =    sqrt(xOffset,    rootN);    	non-compiled	[CE]  cannot  find  symbol  y1	28	None	replace
80	[BUG]  [BUGGY]  tmp1  =  new  double[getOffset()  +  1];  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getOffset()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getOffset()  +  1];	  tmp1    =    new    double[getOffset()    ];    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
81	[BUG]  [BUGGY]  ray(x  +  r)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ray(x  +  r)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	ray(x  +  r)  {	  ray(r    +    x)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
82	[BUG]  [BUGGY]  r  +=  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  [CE]  cannot  find  symbol  r  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +=  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +=  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);	  r    +    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    	non-compiled	[CE]  cannot  find  symbol  r	50	None	replace
83	[BUG]  [BUGGY]  r  +=  x  divide(y,  yOffset,  x,  tmp1,  0,  tmp1,  0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +=  x  divide(y,  yOffset,  x,  tmp1,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +=  x  divide(y,  yOffset,  x,  tmp1,  0,  tmp1,  0);	  r    +=    x    divide(y,    yOffset,    tmp1,    0,    tmp1,    0);    	non-compiled	[CE]  ';'  expected	18	None	replace
84	[BUG]  [BUGGY]  ((  x  <  <  1)||(x  >=  xOffset))?  getSize()  :  0);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ((  x  <  <  1)||(x  >=  xOffset))?  getSize()  :  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	((  x  <  <  1)||(x  >=  xOffset))?  getSize()  :  0);	          ((    x    <    <    1)||(x    >    xOffset))?    getSize()    :    0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  ((  x  <  <  1)||(x  >  xOffset))?  getSize()  :  x  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ((  x  <  <  1)||(x  >  xOffset))?  getSize()  :  x  +  1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	((  x  <  <  1)||(x  >  xOffset))?  getSize()  :  x  +  1);	  ((    x    <    <    1)||(x    >    xOffset))?    getSize()    :    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  rayon(x  +  x)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  rayon(x  +  x)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	rayon(x  +  x)  {	  rayon(r    +    x)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
87	[BUG]  [BUGGY]  add(x,  0,  tmp1,  0);  [CE]  method  add  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(x,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(x,  0,  tmp1,  0);	  add(tmp1,    0,    x,    yOffset,    tmp2,    0);    	non-compiled	[CE]  method  add  in  class  DSCompiler  cannot  be  applied  to  given  types;	9	None	replace
88	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  rootN);  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  rootN);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  -  1  +  rootN);	  r    =    sqrt(x[xOffset]    -    1    +    y);    	non-compiled	[CE]  cannot  find  symbol  r	40	None	replace
89	[BUG]  [BUGGY]  r  =  sqrt(y[xOffset]  -  1  +  x);  [CE]  cannot  find  symbol  r  [FE]                  AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(y[xOffset]  -  1  +  x);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(y[xOffset]  -  1  +  x);	  r    =    sqrt(x[xOffset]    -    1    +    y);    	non-compiled	[CE]  cannot  find  symbol  r	40	None	replace
90	[BUG]  [BUGGY]  int  r  =  Math.min(x,  resultOffset);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  r  =  Math.min(x,  resultOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  r  =  Math.min(x,  resultOffset);	  int    r    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	32	None	replace
91	[BUG]  [BUGGY]  tryDerivativesIndirection(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tryDerivativesIndirection(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tryDerivativesIndirection(tmp1,  0,  x,  xOffset,  tmp2,  0);	  if(x    <    0)    {    subtract(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
92	[BUG]  [BUGGY]  rayUnits(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  rayUnits(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	rayUnits(tmp1,  0,  x,  xOffset,  tmp2,  0);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1)    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
93	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  e)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(NumberFormatException  e)  {  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(NumberFormatException  e)  {  }	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1)    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
94	[BUG]  [BUGGY]  RayRay(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  RayRay(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	RayRay(tmp1,  0,  x,  xOffset,  tmp2,  0);	  ray(tmp1,    0,    x,    xOffset,    tmp2,    0);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
95	[BUG]  [BUGGY]  x  =  sqrt(x,  y,  tmp[xOffset]);  [CE]  cannot  find  symbol  tmp  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  y,  tmp[xOffset]);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  y,  tmp[xOffset]);	  x    =    sqrt(x,    y[xOffset]);    	non-compiled	[CE]  cannot  find  symbol  tmp	21	None	replace
96	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  [Delete]  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	[Delete]	  if(r    <    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);//    r    +    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
97	[BUG]  [BUGGY]  x  =  sqrt(x,  resultOffset,  yOffset);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  resultOffset,  yOffset);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  resultOffset,  yOffset);	  x    =    sqrt(x,    yOffset,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
98	[BUG]  [BUGGY]  r  +=  x  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +=  x  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +=  x  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);	  r    +=    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    	non-compiled	[CE]  ';'  expected	17	None	replace
99	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1,  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1,  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1,  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  1];	  	non-compiled	[CE]  not  a  statement	24	None	add
100	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	add(tmp1,    0,    x,    xOffset,    tmp2,    0);    add(tmp1,  0,  x,  xOffset,  tmp2,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	add
101	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  add(tmp1,  0,  x,  xOffset,  tmp2,  1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    xOffset,    tmp2,    0);    add(tmp1,  0,  x,  xOffset,  tmp2,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	add
102	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1,  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1,  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        ];        tmp1    =    new    double[getSize()    ];    tmp1,  =  new  double[getSize()  ];  tmp1  =  new  double[getSize()  ];	  	non-compiled	[CE]  not  a  statement	12	None	add
103	[BUG]  [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  add(tmp1)  0,  x,  yOffset,  tmp2,  0);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  add(tmp1)  0,  x,  yOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    yOffset,    tmp2,    0);    add(tmp1)  0,  x,  yOffset,  tmp2,  0);	  	non-compiled	[CE]  ';'  expected	8	None	add
104	[BUG]  [BUGGY]  x  =  x;  [CE]  final  parameter  x  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  x;  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  x;	  rayUnit    =    rayUnit;    	non-compiled	[CE]  final  parameter  x  may  not  be  assigned	31	None	replace
105	[BUG]  [BUGGY]  x  =  xOffset;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  xOffset;  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  xOffset;	  rayUnit    =    rayUnit;    	non-compiled	[CE]  incompatible  types	31	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  double  r  =  Math.abs(yOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	double  r  =  Math.abs(yOffset);	          double    r    =    Math.abs(xOffset);    	compilable	  [FE]  AssertionError  	39	3	replace
107	[BUG]  [BUGGY]  double  r  =  Math.abs(yOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  double  r  =  Math.abs(yOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	double  r  =  Math.abs(yOffset);	          double    r    =    Math.abs(xOffset);    	compilable	  [FE]  AssertionError  	39	3	replace
108	[BUG]  [BUGGY]  x  =  Math.min(xOffset,  tmp1.length);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  Math.min(xOffset,  tmp1.length);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  Math.min(xOffset,  tmp1.length);	  x    =    Math.min(tmp1.length,    xOffset);    	non-compiled	[CE]  incompatible  types	1	None	replace
109	[BUG]  [BUGGY]  x  =  Math.min(tmp1,  xOffset,  xOffset);  [CE]  no  suitable  method  found  for  min(double[],int,int)  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  Math.min(tmp1,  xOffset,  xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  Math.min(tmp1,  xOffset,  xOffset);	  x    =    Math.min(tmp1.length,    xOffset);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int,int)	1	None	replace
110	[BUG]  [BUGGY]  tmp1  =  new  double[getX()  ];  tmp1  =  new  double[getSize()  ];  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getX()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getX()  ];  tmp1  =  new  double[getSize()  ];	          tmp1    =    new    double[getSize()    ];    tmp1    =    new    double[getSize()    ];    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
111	[BUG]  [BUGGY]  int  x  =  Math.min(yOffset,  resultOffset);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  x  =  Math.min(yOffset,  resultOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  x  =  Math.min(yOffset,  resultOffset);	          int    x    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	47	None	replace
112	[BUG]  [BUGGY]  x  =  sqrt(xOffset,  y  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(xOffset,  y  +  1);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(xOffset,  y  +  1);	  x    =    sqrt(xOffset,    y);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
113	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1.  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1.  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1.  =  new  double[getSize()  +  1];  tmp2  =  new  double[getSize()  +  1];	  	non-compiled	[CE]  <identifier>  expected	48	None	add
114	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  2];  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  2];  tmp2  =  new  double[getSize()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	3	add
115	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  2];  tmp2  =  new  double[getSize()  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp2  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  2];  tmp2  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp2    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  2];  tmp2  =  new  double[getSize()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	3	add
116	[BUG]  [BUGGY]  rayUnits(tmp1,  0,  x,  yOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  rayUnits(tmp1,  0,  x,  yOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	rayUnits(tmp1,  0,  x,  yOffset,  tmp2,  0);	  if(r    >    0)    {    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
117	[BUG]  [BUGGY]  ray(y,  yOffset,  tmp1,  0,  x);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ray(y,  yOffset,  tmp1,  0,  x);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	ray(y,  yOffset,  tmp1,  0,  x);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
118	[BUG]  [BUGGY]  rayUnits(x,  yOffset,  tmp1,  0,  x);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  rayUnits(x,  yOffset,  tmp1,  0,  x);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	rayUnits(x,  yOffset,  tmp1,  0,  x);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
119	[BUG]  [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	if(x.length        >        0)        {        add(tmp1,        0,        x,        xOffset,        tmp2,        0);        }        if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  if(x.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
120	[BUG]  [BUGGY]  ray(y  +  x)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ray(y  +  x)  {  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	ray(y  +  x)  {	  ray(r    +    x)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
121	[BUG]  [BUGGY]  r  +  x  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +  x  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +  x  divide(x,  yOffset,  tmp1,  0,  tmp1,  0);	  r    +    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    	non-compiled	[CE]  not  a  statement	50	None	replace
122	[BUG]  [BUGGY]  r  +  x  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +  x  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +  x  divide(x,  yOffset,  tmp2,  0,  tmp1,  0);	  r    +    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    	non-compiled	[CE]  not  a  statement	50	None	replace
123	[BUG]  [BUGGY]  r  +=  x  divide(x,  xOffset,  tmp1,  0,  tmp1,  0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  +=  x  divide(x,  xOffset,  tmp1,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  +=  x  divide(x,  xOffset,  tmp1,  0,  tmp1,  0);	  r    +=    x    divide(y,    yOffset,    tmp1,    0,    tmp1,    0);    	non-compiled	[CE]  ';'  expected	18	None	replace
124	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  x);  [CE]  cannot  find  symbol  r  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  x);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  -  1  +  x);	  r    =    sqrt(x[xOffset]    -    1    +    y);    	non-compiled	[CE]  cannot  find  symbol  r	40	None	replace
125	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  x,  y);  [CE]  cannot  find  symbol  r  [FE]                  AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  -  1  +  x,  y);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  -  1  +  x,  y);	  r    =    sqrt(x[xOffset]    -    1    +    y);    	non-compiled	[CE]  cannot  find  symbol  r	40	None	replace
126	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);  }	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    If(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
127	[BUG]  [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(java.util.ArrayIndexOutOfBoundsException  e)  {  }	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    If(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
128	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getLength()  ];  tmp1  =  new  double[getSize()  ];  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getLength()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        ];        tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getLength()  ];  tmp1  =  new  double[getSize()  ];	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
129	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getMean()  ];  tmp1  =  new  double[getSize()  ];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getSize()  ];  tmp1  =  new  double[getMean()  ];  tmp1  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        ];        tmp1    =    new    double[getSize()    ];    tmp1  =  new  double[getMean()  ];  tmp1  =  new  double[getSize()  ];	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
130	[BUG]  [BUGGY]  tryMean(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tryMean(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tryMean(tmp1,  0,  x,  xOffset,  tmp2,  0);	  if(x    <    0)    {    subtract(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
131	[BUG]  [BUGGY]  tryLeft(1);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tryLeft(1);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tryLeft(1);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1)    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
132	[BUG]  [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  add(tmp1,  0,  x,  YOffset,  tmp2,  0);  [CE]  cannot  find  symbol  YOffset  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  yOffset,  tmp2,  0);  add(tmp1,  0,  x,  YOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,    0,    x,    yOffset,    tmp2,    0);    add(tmp1,  0,  x,  YOffset,  tmp2,  0);	  	non-compiled	[CE]  cannot  find  symbol  YOffset	8	None	add
133	[BUG]  [BUGGY]  int  r  =  Math.min(resultOffset,  x,  xOffset);  [CE]  no  suitable  method  found  for  min(int,double[],int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  r  =  Math.min(resultOffset,  x,  xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  r  =  Math.min(resultOffset,  x,  xOffset);	  int    r    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,double[],int)	32	None	replace
134	[BUG]  [BUGGY]  int  r  =  Math.min(result,  xOffset);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  r  =  Math.min(result,  xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  r  =  Math.min(result,  xOffset);	  int    r    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	32	None	replace
135	[BUG]  [BUGGY]  y  /(r  *  x)atan(tmp1,  0,  tmp2,  0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  y  /(r  *  x)atan(tmp1,  0,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	y  /(r  *  x)atan(tmp1,  0,  tmp2,  0);	  y    /(r    +    x)atan(tmp1,    0,    tmp2,    0);    	non-compiled	[CE]  not  a  statement	15	None	replace
136	[BUG]  [BUGGY]  x  =  sqrt(xOffset,  yOffset);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(xOffset,  yOffset);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(xOffset,  yOffset);	  x    =    sqrt(xOffset,    rootN);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
137	[BUG]  [BUGGY]  tryLeadingStatements(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tryLeadingStatements(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tryLeadingStatements(tmp1,  0,  x,  xOffset,  tmp2,  0);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
138	[BUG]  [BUGGY]  tryLeadingStatements(tmp1,  0,  x,  xOffset,  tmp2);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tryLeadingStatements(tmp1,  0,  x,  xOffset,  tmp2);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tryLeadingStatements(tmp1,  0,  x,  xOffset,  tmp2);	  if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    if(x.length    >    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
139	[BUG]  [BUGGY]  ((  x  <  <  3)||(x  >  xOffset))?  getSize()  :  x);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ((  x  <  <  3)||(x  >  xOffset))?  getSize()  :  x);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	((  x  <  <  3)||(x  >  xOffset))?  getSize()  :  x);	  ((    x    <    <    1)||(x    >    xOffset))?    getSize()    :    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
140	[BUG]  [BUGGY]  tmp1  =  new  double[getX()  ];  tmp1.  =  new  double[getSize()  ];  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  tmp1  =  new  double[getX()  ];  tmp1.  =  new  double[getSize()  ];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	tmp1  =  new  double[getX()  ];  tmp1.  =  new  double[getSize()  ];	          tmp1    =    new    double[getSize()    ];    tmp1.    =    new    double[getSize()    ];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
141	[BUG]  [BUGGY]  x  =  Math.min(tmp1.length,  xOffset,  xOffset);  [CE]  no  suitable  method  found  for  min(int,int,int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  Math.min(tmp1.length,  xOffset,  xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  Math.min(tmp1.length,  xOffset,  xOffset);	  x    =    Math.min(tmp1.length,    xOffset);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,int,int)	1	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  2];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  2];  tmp1  =  new  double[getSize()  +  1];	  	compilable	  [FE]  AssertionError  	24	3	add
143	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  2];  tmp1  =  new  double[getSize()  +  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  2];  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  2];  tmp1  =  new  double[getSize()  +  1];	  	compilable	  [FE]  AssertionError  	24	3	add
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  3];  tmp1  =  new  double[getSize()  +  3];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  3];  tmp1  =  new  double[getSize()  +  3];	  	compilable	  [FE]  AssertionError  	24	3	add
145	[BUG]  [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  3];  tmp1  =  new  double[getSize()  +  3];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]          tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  1];  tmp1  =  new  double[getSize()  +  3];  tmp1  =  new  double[getSize()  +  3];  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	                tmp1        =        new        double[getSize()        +        1];        tmp1    =    new    double[getSize()    +    1];    tmp1  =  new  double[getSize()  +  3];  tmp1  =  new  double[getSize()  +  3];	  	compilable	  [FE]  AssertionError  	24	3	add
146	[BUG]  [BUGGY]  x  =  sqrt(x,  yOffset,  tmp2[xOffset]);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(x,  yOffset,  tmp2[xOffset]);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(x,  yOffset,  tmp2[xOffset]);	  x    =    sqrt(x,    y[xOffset]);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	add	add(tmp1,  0,  x,  xOffset,  tmp1,  0);	  add(tmp1,    0,    x,    xOffset,    tmp2,    0);    	compilable	  [FE]  AssertionError  	7	3	replace
148	[BUG]  [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp1,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  add(tmp1,  0,  x,  xOffset,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	add(tmp1,  0,  x,  xOffset,  tmp1,  0);	  add(tmp1,    0,    x,    xOffset,    tmp2,    0);    	compilable	  [FE]  AssertionError  	7	3	replace
149	[BUG]  [BUGGY]  int  x  =  Math.min(result,  xOffset);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  int  x  =  Math.min(result,  xOffset);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	int  x  =  Math.min(result,  xOffset);	          int    x    =    Math.min(resultOffset,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	47	None	replace
150	[BUG]  [BUGGY]  ((  x  <  <  3)||(x  >  xOffset))?  getSize()  :  0);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  ((  x  <  <  3)||(x  >  xOffset))?  getSize()  :  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	((  x  <  <  3)||(x  >  xOffset))?  getSize()  :  0);	          ((    x    <    <    1)||(x    >    xOffset))?    getSize()    :    0);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
151	[BUG]  [BUGGY]  r  =  sqrt(x[xOffset]  +  0);  [CE]  cannot  find  symbol  r  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  r  =  sqrt(x[xOffset]  +  0);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	r  =  sqrt(x[xOffset]  +  0);	  r    =    sqrt(x[xOffset]    +    1);    	non-compiled	[CE]  cannot  find  symbol  r	20	None	replace
152	[BUG]  [BUGGY]  x  =  sqrt(xOffset,  x);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  x  =  sqrt(xOffset,  x);  [BUGGY]      add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x    divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      atan(tmp1,  0,  tmp2,  0);            //  atan(y  /  (r  +  x))  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	x  =  sqrt(xOffset,  x);	  x    =    sqrt(xOffset,    y);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
153	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  tmp1  =  r  +  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(Throwable  tmp1  =  r  +  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(Throwable  tmp1  =  r  +  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  }	  if(r    <    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);//    r    +    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
154	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  tmp1  =  r  +  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {        [BUGGY]  try  {  [Delete]  catch(Throwable  tmp1  =  r  +  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  [BUGGY]      divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1397	1399	1	replace	try  {  [Delete]  catch(Throwable  tmp1  =  r  +  x)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);	  if(r    <    0)    {    add(tmp1,    0,    x,    xOffset,    tmp2,    0);//    r    +    x    divide(y,    yOffset,    tmp2,    0,    tmp1,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
