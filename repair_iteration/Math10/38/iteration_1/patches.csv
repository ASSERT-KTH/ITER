bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  resultOffset);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int)  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  0,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  resultOffset);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    0,    result);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int)	9	None	replace
2	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  0,  resultOffset);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(lhs,  lhsOffset,  0,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  0,  resultOffset);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    0,    result);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  0,  lhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhsOffset,  result,  0,  lhsOffset,  reciprocal);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  0,  lhsOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    result,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	16	None	replace
4	[BUG]  [BUGGY]  Pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhsOffset,  0,  result,  resultOffset);	      Pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
5	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  0,  result,  resultOffset);	      Pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  rhsOffset,  0,  result,  resultOffset);	      pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	4	8	replace
7	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  0,  result,  resultOffset);	      pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	4	8	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  0,  result,  resultOffset);	      pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	4	8	replace
9	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  result,  resultOffset);	      pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	4	8	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	3	1	add
11	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	3	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	3	1	add
13	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	3	1	add
14	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    Pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
15	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
16	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  lhsOffset);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  lhsOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  0,  result,  lhsOffset);	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
17	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	11	None	replace
18	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  lhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  lhsOffset,  reciprocal);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  0,  result,  lhsOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	11	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i]);  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i]);  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i]);  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i]);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  rhs[i]);  }  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  rhs[i]);  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  rhs[i]);  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i]);    }    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	12	None	replace
21	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  rhsOffset,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  -1,  rhsOffset,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  -1,  rhsOffset,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)	8	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  -1,  result,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	8	8	replace
23	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  -1,  result,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	8	8	replace
24	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  -1,  result,  0,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	10	None	replace
25	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  -1,  result,  0,  0);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(lhs,  lhsOffset,  -1,  result,  0,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  -1,  result,  0,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
26	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  resultOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  resultOffset);	  multiply(lhs,    rhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	6	None	replace
27	[BUG]  [BUGGY]  multiply(lhs,  rhs,  lhsOffset,  0,  result,  resultOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhs,  lhsOffset,  0,  result,  resultOffset,  reciprocal);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  lhsOffset,  0,  result,  resultOffset,  reciprocal);	  multiply(lhs,    rhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	6	None	replace
28	[BUG]  [BUGGY]  multiply(lhs,  rhs,  resultOffset,  0,  lhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhs,  resultOffset,  0,  lhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  resultOffset,  0,  lhsOffset);	  multiply(lhs,    rhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
29	[BUG]  [BUGGY]  multiply(lhs,  rhs,  result,  0,  lhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhs,  result,  0,  lhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  result,  0,  lhsOffset);	  multiply(lhs,    rhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  result);  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  result);  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  result);  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	1	8	add
33	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	1	8	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	1	1	add
35	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	1	1	add
36	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	1	None	add
37	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  rhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhsOffset,  result,  rhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  rhsOffset);	  multiply(lhs,    rhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	15	None	replace
38	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  resultOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  resultOffset,  reciprocal);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  0,  result,  resultOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	15	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  rhsOffset,  0,  result,  0);	      pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	2	8	replace
40	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  0,  result,  0);	      pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	2	8	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  rhsOffset,  0,  reciprocal,  0);	      pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	2	8	replace
42	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  0,  reciprocal,  0);	      pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	2	8	replace
43	[BUG]  [BUGGY]  if(lhs.length!=  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  if(lhs.length!=  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length!=  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    	non-compiled	[CE]  ')'  expected	14	None	replace
44	[BUG]  [BUGGY]  if(lhs.length!=  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]              AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  if(lhs.length!=  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  >>  '  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length!=  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  >>  '	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    	non-compiled	[CE]  illegal  line  end  in  character  literal	14	None	replace
45	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  -1,  resultOffset,  0);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(lhs,  lhsOffset,  -1,  resultOffset,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  -1,  resultOffset,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
46	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  lhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  rhsOffset,  result,  lhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  lhsOffset);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	11	None	replace
47	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  Pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  0,  result,  resultOffset);  Pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    Pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
48	[BUG]  [BUGGY]  luate(lhs,  rhs,  resultOffset);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  luate(lhs,  rhs,  resultOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	luate(lhs,  rhs,  resultOffset);	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
49	[BUG]  [BUGGY]  luate(lhs,  rhs,  resultOffset));  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  luate(lhs,  rhs,  resultOffset));  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	luate(lhs,  rhs,  resultOffset));	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(rhs,  lhsOffset,  0,  result,  rhsOffset);	      pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	4	8	replace
51	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,  lhsOffset,  0,  result,  rhsOffset);	      pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	4	8	replace
52	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[])  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  0,  result);	  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[])	1	None	add
53	[BUG]  [BUGGY]  Pow(result,  lhsOffset,  0,  result,  rhsOffset);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  Pow(result,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(result,  lhsOffset,  0,  result,  rhsOffset);	      Pow(rhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
54	[BUG]  [BUGGY]  multiplier(lhs,  rhsOffset,  result,  0,  lhsOffset);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiplier(lhs,  rhsOffset,  result,  0,  lhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiplier(lhs,  rhsOffset,  result,  0,  lhsOffset);	  multiply(lhs,    rhsOffset,    result,    0,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
55	[BUG]  [BUGGY]  if(lhs.length  ==  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  if(lhs.length  ==  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length  ==  0)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    	non-compiled	[CE]  ')'  expected	14	None	replace
56	[BUG]  [BUGGY]  if(lhs.length!=  3)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  if(lhs.length!=  3)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length!=  3)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    	non-compiled	[CE]  ')'  expected	14	None	replace
57	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset);	  multiply(lhs,    rhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	15	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	1	1	add
59	[BUG]  [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]      pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	1	1	add
60	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[])  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  0,  result);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  result);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    0,    result);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[])	9	None	replace
61	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	10	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i].doubleValue());  }  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i].doubleValue());  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i].doubleValue());  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i]);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
63	[BUG]  [BUGGY]  if(relativeOrder  ==  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  if(relativeOrder  ==  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(relativeOrder  ==  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
64	[BUG]  [BUGGY]  if(relativeOrder  ==  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  if(relativeOrder  ==  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(relativeOrder  ==  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }	      if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  0,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  0,  resultOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  0,  resultOffset);	  multiply(lhs,    rhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
66	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  rhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  rhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  rhsOffset);	  multiply(lhs,    rhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	7	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	8	8	replace
68	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]    multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	      double[]    reciprocal    =    new    double[getSize()    ];    pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	8	8	replace
69	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal);	  multiply(lhs,    rhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	6	None	replace
70	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	11	None	replace
71	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  lhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);    [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  lhsOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  0,  lhsOffset);	  multiply(lhs,    rhsOffset,    result,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	16	None	replace
