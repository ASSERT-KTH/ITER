bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  0,  result,  0);	  pow(lhs,    rhsOffset,    0,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	42	8	replace
2	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  result,  0);	  pow(lhs,    rhsOffset,    0,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	42	8	replace
3	[BUG]  [BUGGY]  Pow(lhs,  rhsOffset,  -1,  resultOffset,  0);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhsOffset,  -1,  resultOffset,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhsOffset,  -1,  resultOffset,  0);	  Pow(lhs,    lhsOffset,    -1,    resultOffset,    0);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
4	[BUG]  [BUGGY]  Pow(lhs,  rhs,  -1,  resultOffset,  0);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhs,  -1,  resultOffset,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhs,  -1,  resultOffset,  0);	  Pow(lhs,    lhsOffset,    -1,    resultOffset,    0);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
5	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal.length);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal.length);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal.length);	  multiply(lhs,    lhsOffset,    rhs,    resultOffset,    0,    rhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	66	None	replace
6	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	18	None	replace
7	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  0,  result,  resultOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  0,  result,  resultOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  0,  result,  resultOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	18	None	replace
8	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  -1,  reciprocal,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  -1,  reciprocal,  0,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  -1,  reciprocal,  0,  0);	  pow(lhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	61	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  lhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  0,  result,  lhsOffset);	  pow(lhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	compilable	  [FE]  AssertionError  	61	8	replace
10	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  lhsOffset);  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  lhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  result,  lhsOffset);	  pow(lhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	compilable	  [FE]  AssertionError  	61	8	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  -1,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  rhsOffset,  -1,  result,  0);	  pow(lhs,    lhsOffset,    -1,    result,    0);    	compilable	  [FE]  AssertionError  	23	8	replace
12	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  -1,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  -1,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  -1,  result,  0);	  pow(lhs,    lhsOffset,    -1,    result,    0);    	compilable	  [FE]  AssertionError  	23	8	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    rhsOffset,    0,    reciprocal,    0);    pow(lhs,  rhsOffset,  0,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	41	8	add
14	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    reciprocal,    0);    pow(lhs,  rhsOffset,  0,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	41	8	add
15	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  Pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  Pow(lhs,  rhsOffset,  0,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    reciprocal,    0);    Pow(lhs,  rhsOffset,  0,  reciprocal,  0);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
16	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pom(lhs,  rhsOffset,  0,  reciprocal,  0);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pom(lhs,  rhsOffset,  0,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    reciprocal,    0);    pom(lhs,  rhsOffset,  0,  reciprocal,  0);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  pow(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    rhsOffset,    0,    result,    0);    pow(lhs,  rhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	39	1	add
18	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  pow(lhs,  rhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  pow(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    0);    pow(lhs,  rhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	39	1	add
19	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  Pow(lhs,  rhsOffset,  0,  result,  0);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  Pow(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    0);    Pow(lhs,  rhsOffset,  0,  result,  0);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
20	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  pom(lhs,  rhsOffset,  0,  result,  0);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  pom(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    0);    pom(lhs,  rhsOffset,  0,  result,  0);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
21	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  0,  resultOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhsOffset,  result,  0,  resultOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  0,  resultOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    result,    0,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	3	None	replace
22	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  resultOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  resultOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  0,  resultOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    result,    0,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	3	None	replace
23	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  -1,  result,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  -1,  result,  0,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  -1,  result,  0,  0);	  pow(lhs,    lhsOffset,    -1,    result,    0,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	24	None	replace
24	[BUG]  [BUGGY]  Pow(lhs,  rhs,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhs,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhs,  0,  result,  resultOffset);	  Pow(lhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  reciprocal,  0,  result,  resultOffset);  }  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  reciprocal,  0,  result,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  reciprocal,  0,  result,  resultOffset);  }	  for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiply(lhs[i],    rhs[i],    rhs[i]);    }    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	20	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);	  if(lhs.length    ==    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    }    	compilable	  [FE]  AssertionError  	55	8	replace
27	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);	  if(lhs.length    ==    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    }    	compilable	  [FE]  AssertionError  	55	8	replace
28	[BUG]  [BUGGY]  luate(lhs,  rhs,  rhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  luate(lhs,  rhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	luate(lhs,  rhs,  rhsOffset,  0,  result,  resultOffset);	  if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    0,    result,    resultOffset);    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
29	[BUG]  [BUGGY]  Pow(lhs,  rhsOffset,  0,  result,  rhsOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhsOffset,  0,  result,  rhsOffset);	  Pow(result,    lhsOffset,    0,    result,    rhsOffset);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
30	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  rhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  rhsOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  rhsOffset);	  multiply(lhs,    lhsOffset,    rhs,    resultOffset,    0,    reciprocal,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	26	None	replace
31	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  0);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  0);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  reciprocal,  0);	  multiply(lhs,    lhsOffset,    rhs,    resultOffset,    0,    reciprocal,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	26	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(rhs,    lhsOffset,    0,    result,    rhsOffset);    pow(rhs,  lhsOffset,  0,  result,  rhsOffset);	  	compilable	  [FE]  AssertionError  	50	1	add
33	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,    lhsOffset,    0,    result,    rhsOffset);    pow(rhs,  lhsOffset,  0,  result,  rhsOffset);	  	compilable	  [FE]  AssertionError  	50	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(rhs,    lhsOffset,    0,    result,    rhsOffset);    pow(lhs,  lhsOffset,  0,  result,  rhsOffset);	  	compilable	  [FE]  AssertionError  	50	1	add
35	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,    lhsOffset,    0,    result,    rhsOffset);    pow(lhs,  lhsOffset,  0,  result,  rhsOffset);	  	compilable	  [FE]  AssertionError  	50	1	add
36	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  Pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  Pow(rhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,    lhsOffset,    0,    result,    rhsOffset);    Pow(rhs,  lhsOffset,  0,  result,  rhsOffset);	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
37	[BUG]  [BUGGY]  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  >>  '  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  >>  '	  if(lhs.length!=    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    >>    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	44	None	replace
38	[BUG]  [BUGGY]  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  '  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  '  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  '	  if(lhs.length!=    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    >>    '    	non-compiled	[CE]  ')'  expected	44	None	replace
39	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  rhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhsOffset,  result,  rhsOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  rhsOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    result,    rhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	37	None	replace
40	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhsOffset,  result,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  resultOffset);	  multiply(lhs,    rhsOffset,    result,    rhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	37	None	replace
41	[BUG]  [BUGGY]  luate(lhs,  rhs,  resultOffset,  1));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  luate(lhs,  rhs,  resultOffset,  1));  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	luate(lhs,  rhs,  resultOffset,  1));	  luate(lhs,    rhs,    resultOffset));    	non-compiled	[CE]  ';'  expected	49	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  rhsOffset,  0,  reciprocal,  resultOffset);	  pow(lhs,    rhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	7	8	replace
43	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  0,  reciprocal,  resultOffset);	  pow(lhs,    rhsOffset,    0,    result,    resultOffset);    	compilable	  [FE]  AssertionError  	7	8	replace
44	[BUG]  [BUGGY]  luate(lhs,  rhs,  resultOffset,  reciprocal);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  luate(lhs,  rhs,  resultOffset,  reciprocal);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	luate(lhs,  rhs,  resultOffset,  reciprocal);	  luate(lhs,    rhs,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
45	[BUG]  [BUGGY]  luate(lhs,  rhs,  resultOffset,  null);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  luate(lhs,  rhs,  resultOffset,  null);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	luate(lhs,  rhs,  resultOffset,  null);	  luate(lhs,    rhs,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	34	8	add
47	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	34	8	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	34	1	add
49	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	34	1	add
50	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	34	None	add
51	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  null);  [CE]  no  suitable  method  found  for  pow(double[],int,int,<null>)  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  null);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  null);	          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,<null>)	35	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    0,    result,    0);    pow(lhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	58	1	add
53	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    0,    result,    0);    pow(lhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	58	1	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    0,    result,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	58	8	add
55	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    0,    result,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	58	8	add
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    0,    result,    0);    pow(rhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	58	1	add
57	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(rhs,    lhsOffset,    0,    result,    0);    pow(rhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	58	1	add
58	[BUG]  [BUGGY]  multiply(lhs,  rhs,  resultOffset,  0,  reciprocal.length);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhs,  resultOffset,  0,  reciprocal.length);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  resultOffset,  0,  reciprocal.length);	  multiply(lhs,    rhs,    resultOffset,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	28	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  rhsOffset,  -1,  reciprocal,  0);	  pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	68	8	replace
60	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  -1,  reciprocal,  0);	  pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    	compilable	  [FE]  AssertionError  	68	8	replace
61	[BUG]  [BUGGY]  pow(lhs,  rhs,  -1,  reciprocal,  0);  [CE]  no  suitable  method  found  for  pow(double[],double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhs,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhs,  -1,  reciprocal,  0);	  pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],double[],int,double[],int)	68	None	replace
62	[BUG]  [BUGGY]  pow(lhs,  rhs,  0,  result,  resultOffset);  [CE]  no  suitable  method  found  for  pow(double[],double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhs,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhs,  0,  result,  resultOffset);	  pow(lhs,    lhsOffset,    0,    result,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],double[],int,double[],int)	9	None	replace
63	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset,  reciprocal);	  multiply(lhs,    lhsOffset,    rhs,    result,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	70	None	replace
64	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset,  multiplier);  [CE]  cannot  find  symbol  multiplier  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset,  multiplier);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  lhsOffset,  multiplier);	  multiply(lhs,    lhsOffset,    rhs,    result,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol  multiplier	70	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    rhsOffset,    0,    result,    resultOffset);    pow(lhs,  rhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	6	1	add
66	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    resultOffset);    pow(lhs,  rhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	6	1	add
67	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  Pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  Pow(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    resultOffset);    Pow(lhs,  rhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
68	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  poke(lhs,  rhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  poke(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    resultOffset);    poke(lhs,  rhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
69	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  rhsOffset,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  rhsOffset,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  rhsOffset,  0);	  pow(lhs,    lhsOffset,    -1,    rhsOffset,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)	21	None	replace
70	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  -1,  lhsOffset,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  -1,  lhsOffset,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  -1,  lhsOffset,  0);	  pow(lhs,    lhsOffset,    -1,    rhsOffset,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)	21	None	replace
71	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  reciprocal.length);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  reciprocal.length);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  0,  reciprocal.length);	  multiply(lhs,    lhsOffset,    rhs,    result,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	71	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	12	1	add
73	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	12	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	12	1	add
75	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	12	1	add
76	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(rhs,    lhsOffset,    0,    result,    resultOffset);    Pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(lhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	10	1	add
78	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(lhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	10	1	add
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(lhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	10	1	add
80	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(lhs,    lhsOffset,    0,    result,    resultOffset);    pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	10	1	add
81	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(lhs,    lhsOffset,    0,    result,    resultOffset);    Pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  pow(lhs,  lhsOffset,  -1,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    lhsOffset,    -1,    result,    0);    pow(lhs,  lhsOffset,  -1,  result,  0);	  	compilable	  [FE]  AssertionError  	22	1	add
83	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  pow(lhs,  lhsOffset,  -1,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  pow(lhs,  lhsOffset,  -1,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    result,    0);    pow(lhs,  lhsOffset,  -1,  result,  0);	  	compilable	  [FE]  AssertionError  	22	1	add
84	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  Pow(lhs,  lhsOffset,  -1,  result,  0);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  Pow(lhs,  lhsOffset,  -1,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    result,    0);    Pow(lhs,  lhsOffset,  -1,  result,  0);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    lhsOffset,    -1,    result,    0);    pow(lhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	22	1	add
86	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    result,    0);    pow(lhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	22	1	add
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  rhs[i].doubleValue());  }  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  rhs[i].doubleValue());  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  rhs[i].doubleValue());  }	  for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i].doubleValue());    }    	non-compiled	[CE]  double  cannot  be  dereferenced	62	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhsOffset.length;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhsOffset.length;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhsOffset.length;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }	  for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }	  for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	8	1	add
91	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	compilable	  [FE]  AssertionError  	8	1	add
92	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  Pow(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    0,    result,    resultOffset);    Pow(lhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
93	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  poke(lhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  poke(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    0,    result,    resultOffset);    poke(lhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
94	[BUG]  [BUGGY]  multiply(lhs,  rhs,  lhsOffset,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhs,  lhsOffset,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  lhsOffset,  resultOffset);	  multiply(lhs,    lhsOffset,    rhs,    resultOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	57	None	replace
95	[BUG]  [BUGGY]  Pow(lhs,  rhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhs,  lhsOffset,  0,  result,  resultOffset);	  Pow(lhs,    lhsOffset,    reciprocal,    0,    result,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	32	8	add
97	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	32	8	add
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	32	1	add
99	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	32	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  rhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  rhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	32	8	add
101	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  rhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  rhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  rhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	32	8	add
102	[BUG]  [BUGGY]  multiply(lhs,  rhs,  result,  0,  lhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhs,  result,  0,  lhsOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  result,  0,  lhsOffset,  reciprocal);	  multiply(lhs,    rhs,    result,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	29	None	replace
103	[BUG]  [BUGGY]  multiply(lhs,  rhs,  result,  0,  lhsOffset,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhs,  result,  0,  lhsOffset,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  result,  0,  lhsOffset,  resultOffset);	  multiply(lhs,    rhs,    result,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	29	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiply(lhs,  lhsOffset,  rhs,  resultOffset);  }  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiply(lhs,  lhsOffset,  rhs,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiply(lhs,  lhsOffset,  rhs,  resultOffset);  }	  if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    resultOffset);    }    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	63	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  rhsOffset,  0,  result,  rhsOffset);	  pow(rhs,    lhsOffset,    0,    result,    rhsOffset);    	compilable	  [FE]  AssertionError  	51	8	replace
106	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  rhsOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  0,  result,  rhsOffset);	  pow(rhs,    lhsOffset,    0,    result,    rhsOffset);    	compilable	  [FE]  AssertionError  	51	8	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  reciprocal[i]);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  reciprocal[i]);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  reciprocal[i]);  }	  for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i]);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
108	[BUG]  [BUGGY]  multiplier(lhs,  rhsOffset,  result,  0,  lhsOffset  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiplier(lhs,  rhsOffset,  result,  0,  lhsOffset  +  1);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiplier(lhs,  rhsOffset,  result,  0,  lhsOffset  +  1);	  multiplier(lhs,    rhsOffset,    result,    0,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
109	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  resultOffset);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int)  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  0,  resultOffset);	  pow(lhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int)	1	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	67	8	add
111	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	compilable	  [FE]  AssertionError  	67	8	add
112	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  Pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  Pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    Pow(lhs,  lhsOffset,  -1,  reciprocal,  0);	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
113	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]        AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	67	None	add
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal,  0);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal,  0);	  multiply(lhs,    rhsOffset,    result,    lhsOffset,    reciprocal);    	compilable	  [FE]  AssertionError  	17	8	replace
115	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal,  0);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal,  0);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  result,  lhsOffset,  reciprocal,  0);	  multiply(lhs,    rhsOffset,    result,    lhsOffset,    reciprocal);    	compilable	  [FE]  AssertionError  	17	8	replace
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  0,  result,  rhsOffset);	  pow(lhs,    lhsOffset,    0,    result);    	compilable	  [FE]  AssertionError  	60	8	replace
117	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  result,  rhsOffset);	  pow(lhs,    lhsOffset,    0,    result);    	compilable	  [FE]  AssertionError  	60	8	replace
118	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  0,  result);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[])  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,  lhsOffset,  0,  result);	  pow(lhs,    lhsOffset,    0,    result);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[])	60	None	replace
119	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  0);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  0,  result,  0);	  Pow(lhs,    lhsOffset,    -1,    result,    0,    0);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
120	[BUG]  [BUGGY]  Pow(lhs,  rhsOffset,  -1,  result,  0,  0);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhsOffset,  -1,  result,  0,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhsOffset,  -1,  result,  0,  0);	  Pow(lhs,    lhsOffset,    -1,    result,    0,    0);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
121	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  result);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,double[])  [FE]        AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  result);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  result);	          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,    lhsOffset,    0,    result);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,double[])	52	None	replace
122	[BUG]  [BUGGY]  Pow(lhs,  rhs,  0,  resultOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhs,  0,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhs,  0,  resultOffset);	  Pow(lhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
123	[BUG]  [BUGGY]  Pow(rhs,  lhsOffset,  0,  resultOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(rhs,  lhsOffset,  0,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(rhs,  lhsOffset,  0,  resultOffset);	  Pow(lhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
124	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  0,  result,  rhsOffset);	  Pow(lhs,    lhsOffset,    0,    result,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
125	[BUG]  [BUGGY]  Pow(lhs,  rhsOffset,  0,  result,  lhsOffset);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhsOffset,  0,  result,  lhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhsOffset,  0,  result,  lhsOffset);	  Pow(lhs,    lhsOffset,    0,    result,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhsOffset  +  1;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhsOffset  +  1;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhsOffset  +  1;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }	  for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    resultOffset);    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pow(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    rhsOffset,    0,    reciprocal,    0);    pow(lhs,  rhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	41	8	add
128	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pow(lhs,  rhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  reciprocal,  0);  pow(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    reciprocal,    0);    pow(lhs,  rhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	41	8	add
129	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  reciprocal,  0,  result);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  lhsOffset,  reciprocal,  0,  result);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  reciprocal,  0,  result);	  if(lhs.length!=    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    >>    '    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
130	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  reciprocal,  0,  result);  [CE]  no  suitable  method  found  for  pow(double[],int,double[],int,double[])  [FE]                    AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  reciprocal,  0,  result);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  reciprocal,  0,  result);	  if(lhs.length!=    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    >>    '    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,double[],int,double[])	44	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  0,  reciprocal,  0);	          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	compilable	  [FE]  AssertionError  	36	8	replace
132	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  reciprocal,  0);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  reciprocal,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  reciprocal,  0);	          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,    lhsOffset,    -1,    reciprocal,    0,    0);    	compilable	  [FE]  AssertionError  	36	8	replace
133	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  rhsOffset);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0,  rhsOffset);	  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	67	None	add
134	[BUG]  [BUGGY]  Pow(result,  lhsOffset,  -1,  rhs,  0,  0);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(result,  lhsOffset,  -1,  rhs,  0,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(result,  lhsOffset,  -1,  rhs,  0,  0);	  Pow(lhs,    lhsOffset,    -1,    result,    0,    0);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
135	[BUG]  [BUGGY]  Pow(rhs,  lhsOffset,  0,  result,  lhsOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(rhs,  lhsOffset,  0,  result,  lhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(rhs,  lhsOffset,  0,  result,  lhsOffset);	  Pow(lhs,    lhsOffset,    0,    result,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
136	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  rhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  rhsOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  0,  rhsOffset);	  multiply(lhs,    lhsOffset,    rhs,    result,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	71	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(rhs,  lhsOffset,  0,  result,  0);	  pow(lhs,    rhsOffset,    0,    result,    0);    	compilable	  [FE]  AssertionError  	40	8	replace
138	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,  lhsOffset,  0,  result,  0);	  pow(lhs,    rhsOffset,    0,    result,    0);    	compilable	  [FE]  AssertionError  	40	8	replace
139	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  0,  resultOffset);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int)  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  0,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,  lhsOffset,  0,  resultOffset);	  pow(lhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int)	1	None	replace
140	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  pokew(lhs,  rhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  resultOffset);  pokew(lhs,  rhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    resultOffset);    pokew(lhs,  rhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multipli(lhs[i],  rhs[i],  rhs[i]);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multipli(lhs[i],  rhs[i],  rhs[i]);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multipli(lhs[i],  rhs[i],  rhs[i]);  }	  for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiply(lhs[i],    rhs[i],    rhs[i]);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
142	[BUG]  [BUGGY]  multiply(lhs,  rhs,  result,  0,  resultOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhs,  result,  0,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  result,  0,  resultOffset);	  multiply(lhs,    rhs,    result,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	29	None	replace
143	[BUG]  [BUGGY]  Pow(rhs,  lhsOffset,  -1,  resultOffset,  0);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(rhs,  lhsOffset,  -1,  resultOffset,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(rhs,  lhsOffset,  -1,  resultOffset,  0);	  Pow(lhs,    lhsOffset,    -1,    resultOffset,    0);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
144	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  lhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  0,  lhsOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  0,  lhsOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    result,    0,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	3	None	replace
145	[BUG]  [BUGGY]  pow(rhs,  lhsOffset,  -1,  lhsOffset,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(rhs,  lhsOffset,  -1,  lhsOffset,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(rhs,  lhsOffset,  -1,  lhsOffset,  0);	  pow(lhs,    lhsOffset,    -1,    rhsOffset,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,int,int)	21	None	replace
146	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[])  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  rhsOffset,  0,  result);	  pow(lhs,    lhsOffset,    0,    result);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[])	60	None	replace
147	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  -1,  reciprocal,  0,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  -1,  reciprocal,  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	32	None	add
148	[BUG]  [BUGGY]  Pow(rhs,  lhsOffset,  0,  result);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(rhs,  lhsOffset,  0,  result);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(rhs,  lhsOffset,  0,  result);	  if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    0,    result,    resultOffset);    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
149	[BUG]  [BUGGY]  Pow(resultOffset,  lhsOffset,  0,  lhsOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(resultOffset,  lhsOffset,  0,  lhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(resultOffset,  lhsOffset,  0,  lhsOffset);	  Pow(lhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
150	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  Pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    0,    result,    resultOffset);    pow(lhs,  lhsOffset,  0,  result,  resultOffset);  Pow(rhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        0,        result,        resultOffset);        pow(lhs,    lhsOffset,    0,    result,    resultOffset);    Pow(rhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
151	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pokew(lhs,  lhsOffset,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  resultOffset);  pokew(lhs,  lhsOffset,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    0,    result,    resultOffset);    pokew(lhs,  lhsOffset,  0,  result,  resultOffset);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
152	[BUG]  [BUGGY]  multiply(lhs,  rhs,  resultOffset,  0,  lhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhs,  resultOffset,  0,  lhsOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhs,  resultOffset,  0,  lhsOffset,  reciprocal);	  multiply(lhs,    rhs,    lhsOffset,    0,    result,    resultOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	27	None	replace
153	[BUG]  [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  pokew(lhs,  rhsOffset,  0,  result,  0);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  rhsOffset,  0,  result,  0);  pokew(lhs,  rhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    rhsOffset,    0,    result,    0);    pokew(lhs,  rhsOffset,  0,  result,  0);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
154	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  resultOffset,  0);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  resultOffset,  0);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  0,  result,  resultOffset,  0);	  multiply(lhs,    rhsOffset,    0,    result,    resultOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	38	None	replace
155	[BUG]  [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  lhsOffset,  0);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  rhsOffset,  0,  result,  lhsOffset,  0);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  rhsOffset,  0,  result,  lhsOffset,  0);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	18	None	replace
156	[BUG]  [BUGGY]  multiplier(rhs,  lhsOffset,  result,  0,  lhsOffset);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiplier(rhs,  lhsOffset,  result,  0,  lhsOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiplier(rhs,  lhsOffset,  result,  0,  lhsOffset);	  multiplier(lhs,    rhsOffset,    result,    0,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
157	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  0,  resultOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  0,  resultOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  0,  resultOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    result,    0,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	3	None	replace
158	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  Pow(lhs,  lhsOffset,  0,  result,  0);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  result,  0);  Pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    result,    0);    Pow(lhs,  lhsOffset,  0,  result,  0);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
159	[BUG]  [BUGGY]  multiplier(lhs,  lhsOffset,  rhs,  result,  lhsOffset);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiplier(lhs,  lhsOffset,  rhs,  result,  lhsOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiplier(lhs,  lhsOffset,  rhs,  result,  lhsOffset);	  multiply(lhs,    lhsOffset,    rhs,    result,    lhsOffset);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
160	[BUG]  [BUGGY]  Pow(lhs,  lhsOffset,  rhs,  0,  result,  resultOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  lhsOffset,  rhs,  0,  result,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  lhsOffset,  rhs,  0,  result,  resultOffset);	  Pow(lhs,    lhsOffset,    reciprocal,    0,    result,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
161	[BUG]  [BUGGY]  if(lhs.length!=  1)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  if(lhs.length!=  1)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length!=  1)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }	  if(lhs.length!=    3)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    }    	non-compiled	[CE]  ')'  expected	56	None	replace
162	[BUG]  [BUGGY]  if(lhs.length!=  2)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  if(lhs.length!=  2)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length!=  2)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }	  if(lhs.length!=    3)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    }    	non-compiled	[CE]  ')'  expected	56	None	replace
163	[BUG]  [BUGGY]  if(relativeOrder!=  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  if(relativeOrder!=  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(relativeOrder!=  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  rhs,  resultOffset);  }	  if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    resultOffset);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
164	[BUG]  [BUGGY]  if(relativeOrder!=  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  if(relativeOrder!=  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(relativeOrder!=  null)  {  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }	  if(relativeOrder    ==    null)    {    for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    0,    result,    resultOffset);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhsOffset;  ++i)  {  multiplie(lhs,  lhsOffset,  0,  result,  resultOffset);  }	  for(int    i    =    0;    i    <    lhsOffset;    ++i)    {    multiplie(lhs,    lhsOffset,    rhs,    result);    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  1,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,  lhsOffset,  1,  result,  0);	          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,    lhsOffset,    0,    result);    	compilable	  [FE]  AssertionError  	52	8	replace
167	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  1,  result,  0);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  1,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  1,  result,  0);	          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,    lhsOffset,    0,    result);    	compilable	  [FE]  AssertionError  	52	8	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  0,  rhs[i]);  }  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  0,  rhs[i]);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiply(lhs[i],  rhs[i],  0,  rhs[i]);  }	  for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiply(lhs[i],    rhs[i],    rhs[i]);    }    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	20	None	replace
169	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  mutualal);  [CE]  cannot  find  symbol  mutualal  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  mutualal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  mutualal);	  multiply(lhs,    lhsOffset,    rhs,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol  mutualal	57	None	replace
170	[BUG]  [BUGGY]  if(lhs.length!=  2)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  0,  result,  resultOffset);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  if(lhs.length!=  2)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  0,  result,  resultOffset);  }  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length!=  2)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  0,  result,  resultOffset);  }	  if(lhs.length    ==    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
171	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  0,  result,  rhsOffset,  reciprocal);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  0,  result,  rhsOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  0,  result,  rhsOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    0,    result,    lhsOffset,    reciprocal);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	18	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  0,  result,  rhsOffset);	  	compilable	  [FE]  AssertionError  	67	8	add
173	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  0,  result,  rhsOffset);	  	compilable	  [FE]  AssertionError  	67	8	add
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	67	8	add
175	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(lhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	67	8	add
176	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  offset,  reciprocal);  [CE]  cannot  find  symbol  offset  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  result,  offset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  result,  offset,  reciprocal);	  multiply(lhs,    rhs,    lhsOffset,    0,    result,    resultOffset,    reciprocal);    	non-compiled	[CE]  cannot  find  symbol  offset	27	None	replace
177	[BUG]  [BUGGY]  if(lhs.length!=  1)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  '  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  if(lhs.length!=  1)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  '  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	if(lhs.length!=  1)  {  for(int  i  =  0;  i  <  lhs.length;  ++i)  {  multiplie(lhs[i],  rhs[i],  rhs[i],  rhs[i]  }  '	  if(lhs.length!=    0)    {    for(int    i    =    0;    i    <    lhs.length;    ++i)    {    multiplie(lhs[i],    rhs[i],    rhs[i],    rhs[i]    >>    '    	non-compiled	[CE]  ')'  expected	44	None	replace
178	[BUG]  [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  lhsOffset);  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  lhsOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiply(lhs,  lhsOffset,  rhs,  resultOffset,  0,  lhsOffset);	  multiply(lhs,    rhs,    resultOffset,    0,    lhsOffset);    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	28	None	replace
179	[BUG]  [BUGGY]  multiplier(lhs,  lhsOffset,  rhs,  resultOffset,  reciprocal);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  multiplier(lhs,  lhsOffset,  rhs,  resultOffset,  reciprocal);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	multiplier(lhs,  lhsOffset,  rhs,  resultOffset,  reciprocal);	  multiply(lhs,    rhsOffset,    result,    lhsOffset,    reciprocal);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
180	[BUG]  [BUGGY]  Pow(lhs,  rhsOffset,  0,  resultOffset);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  Pow(lhs,  rhsOffset,  0,  resultOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	Pow(lhs,  rhsOffset,  0,  resultOffset);	  Pow(lhs,    lhsOffset,    0,    resultOffset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	add	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	32	8	add
182	[BUG]  [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]          pow(rhs,    lhsOffset,    -1,    reciprocal,    0);    pow(lhs,  lhsOffset,  -1,  reciprocal,  0);  pow(rhs,  lhsOffset,  0,  result,  0);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	                pow(rhs,        lhsOffset,        -1,        reciprocal,        0);        pow(lhs,    lhsOffset,    -1,    reciprocal,    0);    pow(rhs,  lhsOffset,  0,  result,  0);	  	compilable	  [FE]  AssertionError  	32	8	add
183	[BUG]  [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  0,  rhsOffset);  [CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)  [FE]                AssertionError      [CONTEXT]      public  void  divide(final  double[]  lhs,  final  int  lhsOffset,  final  double[]  rhs,  final  int  rhsOffset,  final  double[]  result,  final  int  resultOffset)  {  final  double[]  reciprocal  =  new  double[getSize()];  pow(rhs,  lhsOffset,  -1,  reciprocal,  0);      [BUGGY]  pow(lhs,  lhsOffset,  0,  result,  0,  rhsOffset);  [BUGGY]      multiply(lhs,  lhsOffset,  reciprocal,  0,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  divide  [RETURN_TYPE]  void  final  double[]  lhs  final  int  lhsOffset  final  double[]  rhs  final  int  rhsOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  lhs  reciprocal  result  rhs  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  o  offset1  offset2  offset3  offset4  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.35355339059327373	798	798	1	replace	pow(lhs,  lhsOffset,  0,  result,  0,  rhsOffset);	  pow(lhs,    lhsOffset,    -1,    result,    0,    0);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int,double[],int,int)	24	None	replace
