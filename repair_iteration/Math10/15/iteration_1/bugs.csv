bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]  =  FastMath.atan(resultOffset);	function[0]  =  FastMath.atan(x);  	compilable	  [FE]  AssertionError  	30	4	replace
2	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]  =  FastMath.atan(resultOffset);	function[0]  =  FastMath.atan(x);  	compilable	  [FE]  AssertionError  	30	4	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]  function[1]  =  FastMath.atan(x);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]  =  FastMath.atan(x);	function[0]  =  FastMath.atan(x);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	4	replace
4	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]  function[1]  =  FastMath.atan(x);  [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]  =  FastMath.atan(x);	function[0]  =  FastMath.atan(x);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	4	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	  	function[0]  =  FastMath.atan(x);  	compilable	  [FE]  AssertionError  	30	4	replace
6	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    [BUGGY]  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	  	function[0]  =  FastMath.atan(x);  	compilable	  [FE]  AssertionError  	30	4	replace
7	[BUG]  [BUGGY]    final  double[][]  x  =  operand[opOffset];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  double[][]  x  =  operand[opOffset];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  double[][]  x  =  operand[opOffset];		non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	31	None	add
8	[BUG]  [BUGGY]    final  int[][]  dRows  =  operand.getRows();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  int[][]  dRows  =  operand.getRows();  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  int[][]  dRows  =  operand.getRows();		non-compiled	[CE]  cannot  find  symbol	31	None	add
9	[BUG]  [BUGGY]    final  int[][]  dRows  =  operand.length;  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  int[][]  dRows  =  operand.length;  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  int[][]  dRows  =  operand.length;		non-compiled	[CE]  incompatible  types	31	None	add
10	[BUG]  [BUGGY]    final  double[][]  coeff  =  operand[xOffset][0];  [CE]  cannot  find  symbol  xOffset  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  double[][]  coeff  =  operand[xOffset][0];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  double[][]  coeff  =  operand[xOffset][0];		non-compiled	[CE]  cannot  find  symbol  xOffset	31	None	add
11	[BUG]  [BUGGY]    final  double[][]  coeff  =  operand[optOffset][x];  [CE]  cannot  find  symbol  optOffset  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  double[][]  coeff  =  operand[optOffset][x];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  double[][]  coeff  =  operand[optOffset][x];		non-compiled	[CE]  cannot  find  symbol  optOffset	31	None	add
12	[BUG]  [BUGGY]    final  double[][]  coeff  =  operand[optOffset];  [CE]  cannot  find  symbol  optOffset  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  double[][]  coeff  =  operand[optOffset];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  double[][]  coeff  =  operand[optOffset];		non-compiled	[CE]  cannot  find  symbol  optOffset	31	None	add
13	[BUG]  [BUGGY]    int[][]  coeff  =  operand.getCoeff();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    int[][]  coeff  =  operand.getCoeff();  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    int[][]  coeff  =  operand.getCoeff();		non-compiled	[CE]  cannot  find  symbol	31	None	add
14	[BUG]  [BUGGY]    final  double[][]  coeff  =  new  double[1  +  x];  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  double[][]  coeff  =  new  double[1  +  x];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  double[][]  coeff  =  new  double[1  +  x];		non-compiled	[CE]  possible  loss  of  precision	31	None	add
15	[BUG]  [BUGGY]    final  double[][]  coeff  =  new  double[1  +  x][0];  [CE]  possible  loss  of  precision  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  [BUGGY]    final  double[][]  coeff  =  new  double[1  +  x][0];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	    final  double[][]  coeff  =  new  double[1  +  x][0];		non-compiled	[CE]  possible  loss  of  precision	31	None	add
