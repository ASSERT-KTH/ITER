bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      final  double[]  q  =  new  double[1  +  operandOffset];  [CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]      final  double[]  q  =  new  double[1  +  operandOffset];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	        final  double[]  q  =  new  double[1  +  operandOffset];	  	non-compiled	[CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	add
2	[BUG]  [BUGGY]      final  double[]  q  =  new  double[1  +  x];  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]      final  double[]  q  =  new  double[1  +  x];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	        final  double[]  q  =  new  double[1  +  x];	  	non-compiled	[CE]  possible  loss  of  precision	5	None	add
3	[BUG]  [BUGGY]      final  int[][]  dRows  =  function.get(x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]      final  int[][]  dRows  =  function.get(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	        final  int[][]  dRows  =  function.get(x);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
4	[BUG]  [BUGGY]  final  int[][]  coeff  =  new  int[1  +  x][0];  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  int[][]  coeff  =  new  int[1  +  x][0];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  coeff  =  new  int[1  +  x][0];	      final    double[][]    coeff    =    new    double[1    +    x][0];    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
5	[BUG]  [BUGGY]  final  int[][]  dRows  =  operand.length,  resultOffset);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  int[][]  dRows  =  operand.length,  resultOffset);  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operand.length,  resultOffset);	      final    int[][]    dRows    =    operand.length;    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	1	1	add
7	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	1	1	add
8	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  Function[0]  =  FastMath.atan(resultOffset);  [CE]  cannot  find  symbol  Function  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  Function[0]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]    =    FastMath.atan(resultOffset);    Function[0]  =  FastMath.atan(resultOffset);	  	non-compiled	[CE]  cannot  find  symbol  Function	1	None	add
9	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  final  double[0]  =  FastMath.atan(resultOffset);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  final  double[0]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]    =    FastMath.atan(resultOffset);    final  double[0]  =  FastMath.atan(resultOffset);	  	non-compiled	[CE]  ']'  expected	1	None	add
10	[BUG]  [BUGGY]  final  double[][]  x  =  operand[resultOffset];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  x  =  operand[resultOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  operand[resultOffset];	      final    double[][]    x    =    operand[opOffset];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	7	None	replace
11	[BUG]  [BUGGY]  final  double[][]  x  =  operand[1];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  x  =  operand[1];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  operand[1];	      final    double[][]    x    =    operand[opOffset];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	7	None	replace
12	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[resultOffset][x];  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  coeff  =  operand[resultOffset][x];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[resultOffset][x];	      final    double[][]    coeff    =    operand[optOffset][x];    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
13	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[opOffset][x];  [CE]  cannot  find  symbol  opOffset  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  coeff  =  operand[opOffset][x];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[opOffset][x];	      final    double[][]    coeff    =    operand[optOffset][x];    	non-compiled	[CE]  cannot  find  symbol  opOffset	11	None	replace
14	[BUG]  [BUGGY]  int[][]  coeff  =  operandOffset.getCoeff();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  int[][]  coeff  =  operandOffset.getCoeff();  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	int[][]  coeff  =  operandOffset.getCoeff();	      int[][]    coeff    =    operand.getCoeff();    	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]  =  FastMath.atan(resultOffset);	  function[1]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
16	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]  =  FastMath.atan(resultOffset);	  function[1]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
18	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
20	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
22	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
23	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[resultOffset];  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  coeff  =  operand[resultOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[resultOffset];	      final    double[][]    coeff    =    operand[optOffset];    	non-compiled	[CE]  incompatible  types	12	None	replace
24	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[opOffset];  [CE]  cannot  find  symbol  opOffset  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  coeff  =  operand[opOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[opOffset];	      final    double[][]    coeff    =    operand[optOffset];    	non-compiled	[CE]  cannot  find  symbol  opOffset	12	None	replace
25	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[resultOffset][0];  [CE]  array  required,  but  double  found  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  coeff  =  operand[resultOffset][0];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[resultOffset][0];	      final    double[][]    coeff    =    operand[xOffset][0];    	non-compiled	[CE]  array  required,  but  double  found	10	None	replace
26	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[opOffset][0];  [CE]  cannot  find  symbol  opOffset  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  coeff  =  operand[opOffset][0];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[opOffset][0];	      final    double[][]    coeff    =    operand[xOffset][0];    	non-compiled	[CE]  cannot  find  symbol  opOffset	10	None	replace
27	[BUG]  [BUGGY]  final  int[][]  dRows  =  operand.getColumns();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  int[][]  dRows  =  operand.getColumns();  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operand.getColumns();	      final    int[][]    dRows    =    operand.getRows();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
28	[BUG]  [BUGGY]  final  int[][]  coeff  =  new  int[1  +  x];  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  int[][]  coeff  =  new  int[1  +  x];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  coeff  =  new  int[1  +  x];	      final    double[][]    coeff    =    new    double[1    +    x];    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
29	[BUG]  [BUGGY]  final  double[][]  x  =  operand[0];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  x  =  operand[0];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  operand[0];	      final    double[][]    x    =    operand[opOffset];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	7	None	replace
30	[BUG]  [BUGGY]  final  double[][]  dRow  =  operand[xOffset][0];  [CE]  cannot  find  symbol  xOffset  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  dRow  =  operand[xOffset][0];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRow  =  operand[xOffset][0];	      	non-compiled	[CE]  cannot  find  symbol  xOffset	6	None	replace
31	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[optOffset][0];  [CE]  cannot  find  symbol  optOffset  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  coeff  =  operand[optOffset][0];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[optOffset][0];	      final    double[][]    coeff    =    operand[xOffset][0];    	non-compiled	[CE]  cannot  find  symbol  optOffset	10	None	replace
32	[BUG]  [BUGGY]  final  int[][]  dRows  =  operandOffset.getRows();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  int[][]  dRows  =  operandOffset.getRows();  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operandOffset.getRows();	      final    int[][]    dRows    =    operand.getRows();    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
33	[BUG]  [BUGGY]      final  double[][]  dRows  =  operand[xOffset][0];  [CE]  cannot  find  symbol  xOffset  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]      final  double[][]  dRows  =  operand[xOffset][0];  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	        final  double[][]  dRows  =  operand[xOffset][0];	  	non-compiled	[CE]  cannot  find  symbol  xOffset	5	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	1	1	add
35	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	1	1	add
36	[BUG]  [BUGGY]  final  int[][]  dRows  =  operandOffset.length;  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  int[][]  dRows  =  operandOffset.length;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operandOffset.length;	      final    int[][]    dRows    =    operand.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
37	[BUG]  [BUGGY]  final  double[][]  dRow  =  function.getDestination();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  final  double[][]  dRow  =  function.getDestination();  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRow  =  function.getDestination();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
38	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]    =    FastMath.atan(resultOffset);    if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
39	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]    =    FastMath.atan(resultOffset);    if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }	  	non-compiled	[CE]  incompatible  types	1	None	add
40	[BUG]  [BUGGY]      int[][]  dRow  =  function.getDestination();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];    [BUGGY]      int[][]  dRow  =  function.getDestination();  [BUGGY]    if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	        int[][]  dRow  =  function.getDestination();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
