bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]        =        FastMath.atan(resultOffset);        result[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	34	1	add
2	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        result[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	34	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]        =        FastMath.atan(resultOffset);        result[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	34	1	add
4	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        result[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	34	1	add
5	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  Function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [CE]  cannot  find  symbol  Function  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  Function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        result[0]    =    FastMath.atan(resultOffset);    Function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);	  	non-compiled	[CE]  cannot  find  symbol  Function	34	None	add
6	[BUG]  [BUGGY]  final  int[][]  dRows  =  operandOffset,  resultOffset.length;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[][]  dRows  =  operandOffset,  resultOffset.length;  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operandOffset,  resultOffset.length;	  final    int[][]    dRows    =    operandOffset.length;    	non-compiled	[CE]  ';'  expected	36	None	replace
7	[BUG]  [BUGGY]  final  int[]  q  =  new  int[1  +  x];  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[]  q  =  new  int[1  +  x];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[]  q  =  new  int[1  +  x];	          final    double[]    q    =    new    double[1    +    x];    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
8	[BUG]  [BUGGY]  final  int[][]  dRows  =  operand.length,  resultOffset  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[][]  dRows  =  operand.length,  resultOffset  +  1);  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operand.length,  resultOffset  +  1);	  final    int[][]    dRows    =    operand.length,    resultOffset);    	non-compiled	[CE]  ';'  expected	5	None	replace
9	[BUG]  [BUGGY]  final  int[][]  dRows  =  resultOffset.length,  operand.length);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[][]  dRows  =  resultOffset.length,  operand.length);  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  resultOffset.length,  operand.length);	  final    int[][]    dRows    =    operand.length,    resultOffset);    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  int[][]  coeff  =  operandOffset,  resultOffset.getCoeff();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  int[][]  coeff  =  operandOffset,  resultOffset.getCoeff();  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	int[][]  coeff  =  operandOffset,  resultOffset.getCoeff();	  int[][]    coeff    =    operandOffset.getCoeff();    	non-compiled	[CE]  ';'  expected	14	None	replace
11	[BUG]  [BUGGY]  final  double[]  x  =  FastMath.atan(resultOffset);  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[]  x  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[]  x  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    final    double[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	9	None	replace
12	[BUG]  [BUGGY]  final  double[]  q  =  FastMath.atan(resultOffset);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[]  q  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[]  q  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    final    double[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  incompatible  types	9	None	replace
13	[BUG]  [BUGGY]  int[][]  dRow  =  function.getDestination(x);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  int[][]  dRow  =  function.getDestination(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	int[][]  dRow  =  function.getDestination(x);	          int[][]    dRow    =    function.getDestination();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
15	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
17	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
19	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
20	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[resultOffset  +  1];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  operand[resultOffset  +  1];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[resultOffset  +  1];	  final    double[][]    coeff    =    operand[resultOffset];    	non-compiled	[CE]  incompatible  types	23	None	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]    =    FastMath.atan(resultOffset);    function[1]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
22	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(resultOffset);    function[1]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]    =    FastMath.atan(resultOffset);    function[2]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
24	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(resultOffset);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(resultOffset);    function[2]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
25	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
26	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
27	[BUG]  [BUGGY]  final  double[][]  dRow  =  operand[resultOffset][0];  [CE]  array  required,  but  double  found  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  dRow  =  operand[resultOffset][0];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRow  =  operand[resultOffset][0];	  final    double[][]    dRow    =    operand[xOffset][0];    	non-compiled	[CE]  array  required,  but  double  found	30	None	replace
28	[BUG]  [BUGGY]  final  double[][]  dRow  =  operand[opOffset][0];  [CE]  cannot  find  symbol  opOffset  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  dRow  =  operand[opOffset][0];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRow  =  operand[opOffset][0];	  final    double[][]    dRow    =    operand[xOffset][0];    	non-compiled	[CE]  cannot  find  symbol  opOffset	30	None	replace
29	[BUG]  [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(x);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(x);	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  incompatible  types	39	None	replace
30	[BUG]  [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(x);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(x);	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  incompatible  types	39	None	replace
31	[BUG]  [BUGGY]  if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  }  else  {  function[1]  =  FastMath.atan(x);  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  }  else  {  function[1]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  }  else  {  function[1]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[1]    =    FastMath.atan(x);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
32	[BUG]  [BUGGY]  x  =  FastMath.atan(resultOffset);  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  x  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	x  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	7	None	replace
33	[BUG]  [BUGGY]  final  int[][]  dRows  =  operandOffset.getColumns();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[][]  dRows  =  operandOffset.getColumns();  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operandOffset.getColumns();	  final    int[][]    dRows    =    operandOffset.getRows();    	non-compiled	[CE]  int  cannot  be  dereferenced	32	None	replace
34	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[x][0];  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  operand[x][0];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[x][0];	  final    double[][]    coeff    =    operand[resultOffset][0];    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
35	[BUG]  [BUGGY]  final  double[][]  x  =  function[1];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  x  =  function[1];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  function[1];	  final    double[][]    x    =    operand[1];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
36	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[x];  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  operand[x];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[x];	  final    double[][]    coeff    =    operand[opOffset];    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
37	[BUG]  [BUGGY]  final  double[][]  result  =  operand[resultOffset];  [CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  result  =  operand[resultOffset];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  result  =  operand[resultOffset];	  final    double[][]    x    =    operand[resultOffset];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
39	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
40	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
41	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
42	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
43	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
44	[BUG]  [BUGGY]  final  int[][]  dRows  =  function.remove(x);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[][]  dRows  =  function.remove(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  function.remove(x);	          final    int[][]    dRows    =    function.get(x);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
45	[BUG]  [BUGGY]  final  int[][]  coeff  =  operand[resultOffset][x];  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[][]  coeff  =  operand[resultOffset][x];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  coeff  =  operand[resultOffset][x];	  final    double[][]    coeff    =    operand[resultOffset][x];    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
46	[BUG]  [BUGGY]  final  double[][]  function  =  function.getDestination();  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  function  =  function.getDestination();  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  function  =  function.getDestination();	  final    double[][]    dRow    =    function.getDestination();    	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	37	None	replace
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
48	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
50	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
52	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
53	[BUG]  [BUGGY]  final  double[][]  dRows  =  operand[resultOffset][0];  [CE]  array  required,  but  double  found  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  dRows  =  operand[resultOffset][0];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRows  =  operand[resultOffset][0];	          final    double[][]    dRows    =    operand[xOffset][0];    	non-compiled	[CE]  array  required,  but  double  found	33	None	replace
54	[BUG]  [BUGGY]  final  double[][]  dRows  =  operand[opOffset][0];  [CE]  cannot  find  symbol  opOffset  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  dRows  =  operand[opOffset][0];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRows  =  operand[opOffset][0];	          final    double[][]    dRows    =    operand[xOffset][0];    	non-compiled	[CE]  cannot  find  symbol  opOffset	33	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	6	1	add
56	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  AssertionError  	6	1	add
57	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  final  double[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  final  double[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    final  double[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);	  	non-compiled	[CE]  ']'  expected	6	None	add
58	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	add
59	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	add
60	[BUG]  [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(x);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	resultOffset  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(x);	  function[0]    =    FastMath.atan(resultOffset);    result[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
61	[BUG]  [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(resultOffset);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	resultOffset  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    result[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
62	[BUG]  [BUGGY]  final  double[][]  x  =  function[0];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  x  =  function[0];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  function[0];	  final    double[][]    x    =    operand[0];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	replace
63	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(x,  resultOffset);  [CE]  no  suitable  method  found  for  atan(double,int)  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]  =  FastMath.atan(x,  resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]  =  FastMath.atan(x,  resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    Function[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  atan(double,int)	8	None	replace
64	[BUG]  [BUGGY]  final  double[][]  q  =  FastMath.atan(resultOffset);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  q  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  q  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    if    (coeff    >    0)    {    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  incompatible  types	38	None	replace
65	[BUG]  [BUGGY]  final  double[][]  x  =  FastMath.atan(resultOffset);  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  x  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    if    (coeff    >    0)    {    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	38	None	replace
66	[BUG]  [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	resultOffset  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    result[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
67	[BUG]  [BUGGY]  final  double[][]  x  =  operand[1]  +  resultOffset;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  x  =  operand[1]  +  resultOffset;  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  operand[1]  +  resultOffset;	  final    double[][]    x    =    operand[1];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
68	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  Function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [CE]  cannot  find  symbol  Function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  Function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    Function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);	  	non-compiled	[CE]  cannot  find  symbol  Function	19	None	add
69	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(y);  [CE]  cannot  find  symbol  y  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(y);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(y);	  	non-compiled	[CE]  cannot  find  symbol  y	19	None	add
70	[BUG]  [BUGGY]  final  double[0]  =  FastMath.atan(resultOffset);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[0]  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    final    double[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  ']'  expected	9	None	replace
71	[BUG]  [BUGGY]  final  double[]  =  FastMath.atan(resultOffset);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[]  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    final    double[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
72	[BUG]  [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  incompatible  types	39	None	replace
73	[BUG]  [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[1]  =	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
74	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1  +  resultOffset];  [CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[]  q  =  new  double[1  +  resultOffset];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[]  q  =  new  double[1  +  resultOffset];	          final    double[]    q    =    new    double[1    +    operandOffset];    	non-compiled	[CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	replace
75	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1  +  functionOffset];  [CE]  cannot  find  symbol  functionOffset  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[]  q  =  new  double[1  +  functionOffset];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[]  q  =  new  double[1  +  functionOffset];	          final    double[]    q    =    new    double[1    +    operandOffset];    	non-compiled	[CE]  cannot  find  symbol  functionOffset	1	None	replace
76	[BUG]  [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    if    (coeff    >    0)    {    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
77	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1  +  function];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[]  q  =  new  double[1  +  function];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[]  q  =  new  double[1  +  function];	          final    double[]    q    =    new    double[1    +    x];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
78	[BUG]  [BUGGY]  final  double[][]  x  =  operand[0]  +  resultOffset;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  x  =  operand[0]  +  resultOffset;  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  operand[0]  +  resultOffset;	  final    double[][]    x    =    operand[0];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	replace
79	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  Function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [CE]  cannot  find  symbol  Function  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  Function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    Function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);	  	non-compiled	[CE]  cannot  find  symbol  Function	6	None	add
80	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  x  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  x  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    x  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	6	None	add
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(x);	  function[1]    =    FastMath.atan(x);    function[2]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	4	replace
82	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]  =  FastMath.atan(resultOffset);  function[2]  =  FastMath.atan(x);	  function[1]    =    FastMath.atan(x);    function[2]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	4	replace
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[1]    =    FastMath.atan(x);    	compilable	  [FE]  AssertionError  	18	4	replace
84	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[1]    =    FastMath.atan(x);    	compilable	  [FE]  AssertionError  	18	4	replace
85	[BUG]  [BUGGY]  final  double[][]  dRow  =  operand[optOffset][0];  [CE]  cannot  find  symbol  optOffset  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  dRow  =  operand[optOffset][0];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRow  =  operand[optOffset][0];	  final    double[][]    dRow    =    operand[xOffset][0];    	non-compiled	[CE]  cannot  find  symbol  optOffset	30	None	replace
86	[BUG]  [BUGGY]  final  double[][]  dRow  =  function.getReturnValue();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  dRow  =  function.getReturnValue();  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRow  =  function.getReturnValue();	  final    double[][]    dRow    =    function.getDestination();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[0]    =    FastMath.atan(x);    	compilable	  [FE]  AssertionError  	22	4	replace
88	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(resultOffset  >  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[0]    =    FastMath.atan(x);    	compilable	  [FE]  AssertionError  	22	4	replace
89	[BUG]  [BUGGY]  final  double[][]  dRows  =  operand[optOffset][0];  [CE]  cannot  find  symbol  optOffset  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  dRows  =  operand[optOffset][0];  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  dRows  =  operand[optOffset][0];	          final    double[][]    dRows    =    operand[xOffset][0];    	non-compiled	[CE]  cannot  find  symbol  optOffset	33	None	replace
90	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(resultOffset);  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(resultOffset);    resultOffset  =  FastMath.atan(resultOffset);	  	non-compiled	[CE]  possible  loss  of  precision	15	None	add
91	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(functionOffset);  [CE]  cannot  find  symbol  functionOffset  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  resultOffset  =  FastMath.atan(functionOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(resultOffset);    resultOffset  =  FastMath.atan(functionOffset);	  	non-compiled	[CE]  cannot  find  symbol  functionOffset	15	None	add
92	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(y);  [CE]  cannot  find  symbol  y  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(y);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(y);	  	non-compiled	[CE]  cannot  find  symbol  y	21	None	add
93	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(y);  function[0]  =  FastMath.atan(x);  [CE]  cannot  find  symbol  y  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(y);  function[0]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(y);  function[0]  =  FastMath.atan(x);	  	non-compiled	[CE]  cannot  find  symbol  y	21	None	add
94	[BUG]  [BUGGY]  final  double[][]  coeff  =  operand[1][0];  [CE]  array  required,  but  double  found  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  operand[1][0];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  operand[1][0];	  final    double[][]    coeff    =    operand[resultOffset][0];    	non-compiled	[CE]  array  required,  but  double  found	25	None	replace
95	[BUG]  [BUGGY]  int[][]  destRow  =  function.getDestination();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  int[][]  destRow  =  function.getDestination();  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	int[][]  destRow  =  function.getDestination();	          int[][]    dRow    =    function.getDestination();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
96	[BUG]  [BUGGY]  if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  function[2]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[2]    =    FastMath.atan(x);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
97	[BUG]  [BUGGY]  final  int[][]  dRows  =  operandOffset,  resultOffset.getRows();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  int[][]  dRows  =  operandOffset,  resultOffset.getRows();  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  int[][]  dRows  =  operandOffset,  resultOffset.getRows();	  final    int[][]    dRows    =    operandOffset.getRows();    	non-compiled	[CE]  ';'  expected	32	None	replace
98	[BUG]  [BUGGY]  final  double[][]  x  =  result[0];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  x  =  result[0];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  result[0];	  final    double[][]    x    =    operand[0];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	replace
99	[BUG]  [BUGGY]  final  double[][]  x  =  operand[resultOffset  +  1];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  x  =  operand[resultOffset  +  1];  [BUGGY]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  x  =  operand[resultOffset  +  1];	  final    double[][]    x    =    operand[resultOffset];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	replace
100	[BUG]  [BUGGY]  if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  <  =  0)  {  function[1]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[0]    =    FastMath.atan(x);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }	  function[0]    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    	compilable	  [FE]  AssertionError  	7	4	replace
102	[BUG]  [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }	  function[0]    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    	compilable	  [FE]  AssertionError  	7	4	replace
103	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	if(x  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[1]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	4	replace
104	[BUG]  [BUGGY]  if(x  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  function[1]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  }	  function[1]    =    FastMath.atan(x);    function[1]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	4	replace
105	[BUG]  [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  resultOffset  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	resultOffset  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    result[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  }	  function[0]    =    FastMath.atan(resultOffset);    result[0]    =    FastMath.atan(resultOffset);    	compilable	  [FE]  AssertionError  	35	4	replace
107	[BUG]  [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  result[0]  =  FastMath.atan(resultOffset);  }	  function[0]    =    FastMath.atan(resultOffset);    result[0]    =    FastMath.atan(resultOffset);    	compilable	  [FE]  AssertionError  	35	4	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    if(resultOffset  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }	  	compilable	  [FE]  AssertionError  	6	1	add
109	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        function[0]    =    FastMath.atan(resultOffset);    if(resultOffset  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  }	  	compilable	  [FE]  AssertionError  	6	1	add
110	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
111	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[0]    =    FastMath.atan(x);    function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	add
112	[BUG]  [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  v  =  FastMath.atan(resultOffset);  if(v  >  0)  {  result[1]  =  FastMath.atan(v);  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]  =  FastMath.atan(resultOffset);  if(resultOffset  >  0)  {  final  double[][]  v  =  FastMath.atan(resultOffset);  if(v  >  0)  {  result[1]  =  FastMath.atan(v);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]    =    FastMath.atan(resultOffset);    if(resultOffset  >  0)  {  final  double[][]  v  =  FastMath.atan(resultOffset);  if(v  >  0)  {  result[1]  =  FastMath.atan(v);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
113	[BUG]  [BUGGY]  final  double[][]  destRow  =  function.getDestination();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  destRow  =  function.getDestination();  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  destRow  =  function.getDestination();	  final    double[][]    dRow    =    function.getDestination();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
114	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[0]        =        FastMath.atan(resultOffset);        result[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	4	add
115	[BUG]  [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[0]    =    FastMath.atan(resultOffset);    result[0]  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[0]        =        FastMath.atan(resultOffset);        result[0]    =    FastMath.atan(resultOffset);    function[0]  =  FastMath.atan(resultOffset);  result[1]  =  FastMath.atan(resultOffset);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	4	add
116	[BUG]  [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastMath.atan(resultOffset);	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  incompatible  types	39	None	replace
117	[BUG]  [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastM  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastM  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  function[0]  =  FastM	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  ';'  expected	39	None	replace
118	[BUG]  [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  final  double[0]  =  FastMath.atan(resultOffset);  }  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  final  double[0]  =  FastMath.atan(resultOffset);  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  function[0]  =  FastMath.atan(resultOffset);  final  double[0]  =  FastMath.atan(resultOffset);  }	  function[0]    =    FastMath.atan(resultOffset);    final    double[0]    =    FastMath.atan(resultOffset);    	non-compiled	[CE]  ']'  expected	9	None	replace
119	[BUG]  [BUGGY]  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  1;  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  1;  }	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    if    (coeff    >    0)    {    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
120	[BUG]  [BUGGY]  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  0;  }  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	if(x  >  0)  {  final  double[][]  coeff  =  FastMath.atan(resultOffset);  if  (coeff  >  0)  {  function[0]  =  0;  }	  function[0]    =    FastMath.atan(resultOffset);    if(resultOffset    >    0)    {    final    double[][]    coeff    =    FastMath.atan(resultOffset);    if    (coeff    >    0)    {    function[0]    =    FastMath.atan(resultOffset);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
121	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	add	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
122	[BUG]  [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];      [BUGGY]  function[1]    =    FastMath.atan(x);    function[2]  =  FastMath.atan(x);  function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);  [BUGGY]      if  (order  >  0)  {        final  double[]  q  =  new  double[order];  q[0]  =  1;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1329	1329	1	replace	function[1]        =        FastMath.atan(x);        function[2]    =    FastMath.atan(x);    function[0]  =  FastMath.atan(x);  function[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
