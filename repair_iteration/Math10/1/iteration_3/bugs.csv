bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  tmp1  =  new  int[resultOffset];  [CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int[]  tmp1  =  new  int[resultOffset];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int[]  tmp1  =  new  int[resultOffset];	  double[]    tmp1    =    new    double[resultOffset];    double[]    tmp1    =    new    double[resultOffset];    	non-compiled	[CE]  method  multiply  in  class  DSCompiler  cannot  be  applied  to  given  types;	1	None	replace
2	[BUG]  [BUGGY]  int  x  =  Math.min(result,  resultOffset  +  1);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int  x  =  Math.min(result,  resultOffset  +  1);  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int  x  =  Math.min(result,  resultOffset  +  1);	  int    x    =    Math.min(resultOffset,    resultOffset);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	18	None	replace
3	[BUG]  [BUGGY]  int  x  =  Math.min(result,  resultOffset);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int  x  =  Math.min(result,  resultOffset);  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int  x  =  Math.min(result,  resultOffset);	  int    x    =    Math.min(resultOffset,    resultOffset);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	18	None	replace
4	[BUG]  [BUGGY]  double[]  x  =  new  double[getX()  +  1];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  x  =  new  double[getX()  +  1];  [BUGGY]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  x  =  new  double[getX()  +  1];	  double[]    x    =    new    double[getX()    ];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	6	None	replace
5	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[resultOffset()  +  1];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[resultOffset()  +  1];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  tmp1  =  new  double[resultOffset()  +  1];	  double[]    tmp1    =    new    double[resultOffset()];    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
6	[BUG]  [BUGGY]  double[]  x  =  new  double[getOffset()  +  1];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  x  =  new  double[getOffset()  +  1];  [BUGGY]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  x  =  new  double[getOffset()  +  1];	  double[]    x    =    new    double[getOffset()    ];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	7	None	replace
7	[BUG]  [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  ];  final  double[]  tmp1  =  new  double[getSize()  ];  [CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  ];  final  double[]  tmp1  =  new  double[getSize()  ];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final    double[]    tmp1    =    new    double[getSize()    ];    final  double[]  tmp1  =  new  double[getSize()  ];	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	10	None	add
8	[BUG]  [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  ];  final  double[]  tmp2  =  new  double[getSize()  ];  [CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  ];  final  double[]  tmp2  =  new  double[getSize()  ];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final    double[]    tmp1    =    new    double[getSize()    ];    final  double[]  tmp2  =  new  double[getSize()  ];	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	10	None	add
9	[BUG]  [BUGGY]  int  xOffset  =  getSize();  [CE]  variable  xOffset  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int  xOffset  =  getSize();  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int  xOffset  =  getSize();	  double[]    tmp1    =    new    double[resultOffset];    int    xOffset    =    getSize();    	non-compiled	[CE]  variable  xOffset  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	17	None	replace
10	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[getSize()];  int  xOffset  =  getSize();  [CE]  variable  xOffset  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[getSize()];  int  xOffset  =  getSize();  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  tmp1  =  new  double[getSize()];  int  xOffset  =  getSize();	  double[]    tmp1    =    new    double[resultOffset];    int    xOffset    =    getSize();    	non-compiled	[CE]  variable  xOffset  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	17	None	replace
11	[BUG]  [BUGGY]  double[][]  x  =  new  double[getX()  +  1];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[][]  x  =  new  double[getX()  +  1];  [BUGGY]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[][]  x  =  new  double[getX()  +  1];	  double[][]    x    =    new    double[getX()    ];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	8	None	replace
12	[BUG]  [BUGGY]  final  double[]  tmp1  =  resultOffset.get(result);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  resultOffset.get(result);  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final  double[]  tmp1  =  resultOffset.get(result);	  final    double[]    tmp1    =    result.get(resultOffset);    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
13	[BUG]  [BUGGY]  double[][]  x  =  new  double[getOffset()  +  1];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[][]  x  =  new  double[getOffset()  +  1];  [BUGGY]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[][]  x  =  new  double[getOffset()  +  1];	  double[][]    x    =    new    double[getOffset()    ];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	9	None	replace
14	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  double[]  tmp1  =  new  double[resultOffset  +  1];  [CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  double[]  tmp1  =  new  double[resultOffset  +  1];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]    tmp1    =    new    double[resultOffset    +    1];    double[]  tmp1  =  new  double[resultOffset  +  1];	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	13	None	add
15	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  Double[]  tmp1  =  new  double[resultOffset  +  1];  [CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  Double[]  tmp1  =  new  double[resultOffset  +  1];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]    tmp1    =    new    double[resultOffset    +    1];    Double[]  tmp1  =  new  double[resultOffset  +  1];	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	13	None	add
16	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  final  double[]  tmp1  =  new  double[resultOffset  +  1];  [CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  final  double[]  tmp1  =  new  double[resultOffset  +  1];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]    tmp1    =    new    double[resultOffset    +    1];    final  double[]  tmp1  =  new  double[resultOffset  +  1];	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	13	None	add
17	[BUG]  [BUGGY]  int[][]  x  =  new  int[getOffset()  +  1];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int[][]  x  =  new  int[getOffset()  +  1];  [BUGGY]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int[][]  x  =  new  int[getOffset()  +  1];	  int[][]    x    =    new    int[getOffset()    ];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	5	None	replace
18	[BUG]  [BUGGY]  final  double[]  tmp1  =  new  double[getOffset()  ];  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[getOffset()  ];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final  double[]  tmp1  =  new  double[getOffset()  ];	  final    double[]    tmp1    =    new    double[getSize()    ];    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[resultOffset  ];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	final  double[]  tmp1  =  new  double[resultOffset  ];	  final    double[]    tmp1    =    new    double[getSize()    ];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
20	[BUG]  [BUGGY]  final  double[]  tmp1  =  new  double[resultOffset  ];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[resultOffset  ];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final  double[]  tmp1  =  new  double[resultOffset  ];	  final    double[]    tmp1    =    new    double[getSize()    ];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  2];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	double[]  tmp1  =  new  double[resultOffset  +  2];	  double[]    tmp1    =    new    double[resultOffset    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
22	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  2];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]  tmp1  =  new  double[resultOffset  +  2];	  double[]    tmp1    =    new    double[resultOffset    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
23	[BUG]  [BUGGY]  Double[]  tmp1  =  new  double[resultOffset];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  Double[]  tmp1  =  new  double[resultOffset];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	Double[]  tmp1  =  new  double[resultOffset];	  double[]    tmp1    =    new    double[resultOffset];    Double[]    tmp1    =    new    double[resultOffset];    	non-compiled	[CE]  incompatible  types	2	None	replace
24	[BUG]  [BUGGY]  int[][]  x  =  new  int[getX()  +  1];  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int[][]  x  =  new  int[getX()  +  1];  [BUGGY]      double[]  tmp1  =  new  double[getSize()];  multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int[][]  x  =  new  int[getX()  +  1];	  int[][]    x    =    new    int[getX()    ];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	16	None	replace
25	[BUG]  [BUGGY]  int  x  =  getSize()  +  resultOffset;  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int  x  =  getSize()  +  resultOffset;  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int  x  =  getSize()  +  resultOffset;	  int    x    =    getSize();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	19	None	replace
26	[BUG]  [BUGGY]  int  x  =  getOffset();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int  x  =  getOffset();  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int  x  =  getOffset();	  int    x    =    getSize();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	19	None	replace
27	[BUG]  [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(resultOffset  +  1);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  double[]  tmp1  =  new  double[resultOffset  +  1];  ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(resultOffset  +  1);  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	double[]    tmp1    =    new    double[resultOffset    +    1];    ArrayIndexOutOfBoundsException  x  =  new  ArrayIndexOutOfBoundsException(resultOffset  +  1);	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	13	None	add
28	[BUG]  [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  ];  double[]  tmp1  =  new  double[getSize()  ];  [CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  ];  double[]  tmp1  =  new  double[getSize()  ];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final    double[]    tmp1    =    new    double[getSize()    ];    double[]  tmp1  =  new  double[getSize()  ];	  	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	10	None	add
29	[BUG]  [BUGGY]  int  x  =  Math.min(resultOffset,  resultOffset  +  1);  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int  x  =  Math.min(resultOffset,  resultOffset  +  1);  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int  x  =  Math.min(resultOffset,  resultOffset  +  1);	  int    x    =    Math.min(resultOffset,    resultOffset);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	18	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	add	final  double[]  tmp1  =  new  double[getSize()  +  1];	  final    double[]    tmp1    =    new    double[getSize()    ];    	compilable	  [FE]  AssertionError  	11	1	replace
31	[BUG]  [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  +  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  new  double[getSize()  +  1];  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final  double[]  tmp1  =  new  double[getSize()  +  1];	  final    double[]    tmp1    =    new    double[getSize()    ];    	compilable	  [FE]  AssertionError  	11	1	replace
32	[BUG]  [BUGGY]  int  x  =  getX();  [CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  int  x  =  getX();  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	int  x  =  getX();	  int    x    =    getSize();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan2(double[],int,double[],int,double[],int)	19	None	replace
33	[BUG]  [BUGGY]  final  double[]  tmp1  =  results.get(resultOffset);  [CE]  cannot  find  symbol  results  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {        [BUGGY]  final  double[]  tmp1  =  results.get(resultOffset);  [BUGGY]      multiply(x,  xOffset,  x,  xOffset,  tmp1,  0);//  x^2  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1387	1387	1	replace	final  double[]  tmp1  =  results.get(resultOffset);	  final    double[]    tmp1    =    result.get(resultOffset);    	non-compiled	[CE]  cannot  find  symbol  results	12	None	replace
