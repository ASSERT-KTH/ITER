bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  v  *=  x;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  v  *=  x;  }  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  v  *=  x;  }		non-compiled	[CE]  illegal  start  of  expression	67	None	add
2	[BUG]  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x2)  ==  0)  {  v  *=  x;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x2)  ==  0)  {  v  *=  x;  }  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x2)  ==  0)  {  v  *=  x;  }		non-compiled	[CE]  illegal  start  of  expression	67	None	add
3	[BUG]  [BUGGY]    n  =  Math.min(coeff,  v);  [CE]  possible  loss  of  precision  [FE]        AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    n  =  Math.min(coeff,  v);  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	    n  =  Math.min(coeff,  v);		non-compiled	[CE]  possible  loss  of  precision	67	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]  function[n]  =  v  *  coeff;  [BUGGY]    }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	add	function[n]  =  v  *  coeff;	function[n]  =  coeff  *  v;  	compilable	  [FE]  AssertionError  	66	1	replace
5	[BUG]  [BUGGY]  function[n]  =  v  *  coeff;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]  function[n]  =  v  *  coeff;  [BUGGY]    }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	function[n]  =  v  *  coeff;	function[n]  =  coeff  *  v;  	compilable	  [FE]  AssertionError  	66	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]  function[n]  =  coeff  *  f;  [BUGGY]    }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	add	function[n]  =  coeff  *  f;	function[n]  =  coeff  *  v;  	compilable	  [FE]  AssertionError  	66	4	replace
7	[BUG]  [BUGGY]  function[n]  =  coeff  *  f;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]  function[n]  =  coeff  *  f;  [BUGGY]    }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	function[n]  =  coeff  *  f;	function[n]  =  coeff  *  v;  	compilable	  [FE]  AssertionError  	66	4	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]  function[0]  =  coeff  *  v;  [BUGGY]    }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	add	function[0]  =  coeff  *  v;	function[n]  =  coeff  *  v;  	compilable	  [FE]  AssertionError  	66	4	replace
9	[BUG]  [BUGGY]  function[0]  =  coeff  *  v;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]  function[0]  =  coeff  *  v;  [BUGGY]    }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	function[0]  =  coeff  *  v;	function[n]  =  coeff  *  v;  	compilable	  [FE]  AssertionError  	66	4	replace
10	[BUG]  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  coeff  *=  f;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  coeff  *=  f;  }  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  coeff  *=  f;  }		non-compiled	[CE]  illegal  start  of  expression	67	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    if((  n  &  0x1)  ==  0)  {  coeff  *=  f;  }  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	add	    if((  n  &  0x1)  ==  0)  {  coeff  *=  f;  }		compilable	  [FE]  AssertionError  	67	4	add
12	[BUG]  [BUGGY]    if((  n  &  0x1)  ==  0)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    if((  n  &  0x1)  ==  0)  {  coeff  *=  f;  }  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	    if((  n  &  0x1)  ==  0)  {  coeff  *=  f;  }		compilable	  [FE]  AssertionError  	67	4	add
13	[BUG]  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  coeff  *=  v;  }		non-compiled	[CE]  illegal  start  of  expression	67	None	add
14	[BUG]  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  v  *=  f;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [BUGGY]    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  v  *=  f;  }  [BUGGY]  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1362	1362	1	replace	    if((  n  &  0x1)  ==  0)  {  if((  n  &  0x3)  ==  0)  {  v  *=  f;  }		non-compiled	[CE]  illegal  start  of  expression	67	None	add
