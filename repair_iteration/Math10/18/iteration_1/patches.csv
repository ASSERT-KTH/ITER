bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  x2  =  1.0  /  (1  +  q.length);  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double  x2  =  1.0  /  (1  +  q.length);  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2  =  1.0  /  (1  +  q.length);	      final    double    x2    =    1.0    /    (1    +    x2);    	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	13	None	replace
2	[BUG]  [BUGGY]  final  double[]  q  =  new  double[1];  [CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  q  =  new  double[1];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  q  =  new  double[1];	      final    double[]    q    =    new    double[order];    	non-compiled	[CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)	8	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  q[0]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]    =    0;    q[0]  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
4	[BUG]  [BUGGY]  q[0]  =  0;  q[0]  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  q[0]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0;    q[0]  =  0;	  	compilable	  [FE]  AssertionError  	1	1	add
5	[BUG]  [BUGGY]  q[0]  =  0;  q[0]  =  0;  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[1];  [CE]  cannot  find  symbol  n  [FE]      AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  q[0]  =  0;  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[1];  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0;    q[0]  =  0;  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[1];	  	non-compiled	[CE]  cannot  find  symbol  n	1	None	add
6	[BUG]  [BUGGY]  q[0]  =  0;  q[0]  =  0;  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[0];  [CE]  cannot  find  symbol  n  [FE]        AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  q[0]  =  0;  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[0];  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0;    q[0]  =  0;  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[0];	  	non-compiled	[CE]  cannot  find  symbol  n	1	None	add
7	[BUG]  [BUGGY]      final  double  x2=  x  *  x;  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      final  double  x2=  x  *  x;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        final  double  x2=  x  *  x;	  	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  q[0]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	        q[0]    =    1.0;    q[0]  =  1.0;	  	compilable	  [FE]  AssertionError  	11	1	add
9	[BUG]  [BUGGY]      q[0]  =  1.0;  q[0]  =  1.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  q[0]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        q[0]    =    1.0;    q[0]  =  1.0;	  	compilable	  [FE]  AssertionError  	11	1	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  q[1]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	        q[0]    =    1.0;    q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	add
11	[BUG]  [BUGGY]      q[0]  =  1.0;  q[1]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  q[1]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        q[0]    =    1.0;    q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	add
12	[BUG]  [BUGGY]      q[0]  =  1.0;  final  double  x2  =  1.0;  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  final  double  x2  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        q[0]    =    1.0;    final  double  x2  =  1.0;	  	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	add
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1;  q[1]  =  1;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    1;    q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
14	[BUG]  [BUGGY]  q[1]  =  1;  q[1]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1;  q[1]  =  1;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    1;    q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1;  q[2]  =  1;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    1;    q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
16	[BUG]  [BUGGY]  q[1]  =  1;  q[2]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1;  q[2]  =  1;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    1;    q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1;  q[0]  =  1;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    1;    q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
18	[BUG]  [BUGGY]  q[1]  =  1;  q[0]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1;  q[0]  =  1;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    1;    q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]  =  1.0;	      q[0]    =    1.0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	4	replace
20	[BUG]  [BUGGY]  q[1]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]  =  1.0;	      q[0]    =    1.0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	4	replace
21	[BUG]  [BUGGY]  final  double[]  x2  =  new  double[order  +  1];  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  x2  =  new  double[order  +  1];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x2  =  new  double[order  +  1];	      final    double[]    x2    =    new    double[order];    	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	7	None	replace
22	[BUG]  [BUGGY]  final  double[]  x2  =  new  double[size];  [CE]  cannot  find  symbol  size  [FE]          AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  x2  =  new  double[size];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x2  =  new  double[size];	      final    double[]    x2    =    new    double[order];    	non-compiled	[CE]  cannot  find  symbol  size	7	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  FastMath.atan(x);  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]  =  FastMath.atan(x);	  q[0]    =    0;    	compilable	  [FE]  AssertionError  	2	4	replace
24	[BUG]  [BUGGY]  q[0]  =  FastMath.atan(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  FastMath.atan(x);  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]  =  FastMath.atan(x);	  q[0]    =    0;    	compilable	  [FE]  AssertionError  	2	4	replace
25	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  0;  q[1]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    0;    q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
26	[BUG]  [BUGGY]  q[1]  =  0;  q[1]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  0;  q[1]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    0;    q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
27	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  0;  q[2]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    0;    q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
28	[BUG]  [BUGGY]  q[1]  =  0;  q[2]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  0;  q[2]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    0;    q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  0;  q[0]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    0;    q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
30	[BUG]  [BUGGY]  q[1]  =  0;  q[0]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[1]  =  0;  q[0]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    0;    q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
31	[BUG]  [BUGGY]  final  double[]  x  =  new  double[1];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  x  =  new  double[1];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x  =  new  double[1];	      final    double[]    x    =    new    double[order];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	9	None	replace
32	[BUG]  [BUGGY]  final  double[]  x  =  new  double[2];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  x  =  new  double[2];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x  =  new  double[2];	      final    double[]    x    =    new    double[order];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	9	None	replace
33	[BUG]  [BUGGY]      final  double  x2=  x  *  q[0];  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      final  double  x2=  x  *  q[0];  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        final  double  x2=  x  *  q[0];	  	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	add
34	[BUG]  [BUGGY]      final  double  x2=  x  *  q[1];  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      final  double  x2=  x  *  q[1];  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        final  double  x2=  x  *  q[1];	  	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	add
35	[BUG]  [BUGGY]      final  double  x2=  x  *  q;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      final  double  x2=  x  *  q;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        final  double  x2=  x  *  q;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	add
36	[BUG]  [BUGGY]      q[0]  =  1.0;  final  double  q[0]  =  1.0;  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  final  double  q[0]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        q[0]    =    1.0;    final  double  q[0]  =  1.0;	  	non-compiled	[CE]  ']'  expected	11	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  q2  =  new  double[order];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	final  double[]  q2  =  new  double[order];	      final    double[]    x2    =    new    double[order];    	compilable	  [FE]  AssertionError  	7	3	replace
38	[BUG]  [BUGGY]  final  double[]  q2  =  new  double[order];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  q2  =  new  double[order];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  q2  =  new  double[order];	      final    double[]    x2    =    new    double[order];    	compilable	  [FE]  AssertionError  	7	3	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0.0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]  =  0.0;	  q[0]    =    0;    	compilable	  [FE]  AssertionError  	2	3	replace
40	[BUG]  [BUGGY]  q[0]  =  0.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0.0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]  =  0.0;	  q[0]    =    0;    	compilable	  [FE]  AssertionError  	2	3	replace
41	[BUG]  [BUGGY]  q[0]  =  0;  final  double  q[0]  =  0;  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  final  double  q[0]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0;    final  double  q[0]  =  0;	  	non-compiled	[CE]  ']'  expected	1	None	add
42	[BUG]  [BUGGY]  q[0]  =  0;  int  q[0]  =  0;  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  int  q[0]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0;    int  q[0]  =  0;	  	non-compiled	[CE]  ']'  expected	1	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      final  double  x1=  x  *  x;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	        final  double  x1=  x  *  x;	  	compilable	  [FE]  AssertionError  	5	1	add
44	[BUG]  [BUGGY]      final  double  x1=  x  *  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      final  double  x1=  x  *  x;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        final  double  x1=  x  *  x;	  	compilable	  [FE]  AssertionError  	5	1	add
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  q[2]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	        q[0]    =    1.0;    q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	add
46	[BUG]  [BUGGY]      q[0]  =  1.0;  q[2]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]      q[0]  =  1.0;  q[2]  =  1.0;  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	        q[0]    =    1.0;    q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	add
47	[BUG]  [BUGGY]  final  double[]  x  =  new  double[order  +  1];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  final  double[]  x  =  new  double[order  +  1];  [BUGGY]    q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x  =  new  double[order  +  1];	      final    double[]    x    =    new    double[order];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	9	None	replace
48	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  q[1]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]    =    0;    q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	4	add
49	[BUG]  [BUGGY]  q[0]  =  0;  q[1]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];    [BUGGY]  q[0]  =  0;  q[1]  =  0;  [BUGGY]    final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0;    q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	4	add
