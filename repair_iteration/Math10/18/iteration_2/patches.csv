bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]        =        0;        q[0]    =    0;    q[0]  =  0;  q[0]  =  0;	  	compilable	  [FE]  AssertionError  	3	1	add
2	[BUG]  [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0;  q[0]  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[0]    =    0;    q[0]  =  0;  q[0]  =  0;	  	compilable	  [FE]  AssertionError  	3	1	add
3	[BUG]  [BUGGY]  q[0]    =    0;    q[0]  =  0;  final  double  q[0]  =  0;  q[0]  =  0;  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  final  double  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[0]    =    0;    final  double  q[0]  =  0;  q[0]  =  0;	  	non-compiled	[CE]  ']'  expected	3	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0.0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]        =        0;        q[0]    =    0;    q[0]  =  0.0;  q[0]  =  0;	  	compilable	  [FE]  AssertionError  	3	1	add
5	[BUG]  [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0.0;  q[0]  =  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0.0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[0]    =    0;    q[0]  =  0.0;  q[0]  =  0;	  	compilable	  [FE]  AssertionError  	3	1	add
6	[BUG]  [BUGGY]  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[1];  [CE]  cannot  find  symbol  n  [FE]          AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[1];  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2=  x  *  x;  function[1]  =  -n  *  q[1];	  q[0]    =    0;    q[0]    =    0;    final    double    x2=    x    *    x;    function[1]    =    -n    *    q[1];    	non-compiled	[CE]  cannot  find  symbol  n	5	None	replace
7	[BUG]  [BUGGY]  final  double  x2=  x  *  q;  function[1]  =  -n  *  q[1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2=  x  *  q;  function[1]  =  -n  *  q[1];  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2=  x  *  q;  function[1]  =  -n  *  q[1];	  q[0]    =    0;    q[0]    =    0;    final    double    x2=    x    *    x;    function[1]    =    -n    *    q[1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]  =  0;  q[2]  =  0;	  q[1]    =    1;    q[2]    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	4	replace
9	[BUG]  [BUGGY]  q[0]  =  0;  q[2]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]  =  0;  q[2]  =  0;	  q[1]    =    1;    q[2]    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	4	replace
10	[BUG]  [BUGGY]  final  double[]  x2  =  new  double[order  +  2];  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  x2  =  new  double[order  +  2];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x2  =  new  double[order  +  2];	  final    double[]    x2    =    new    double[order    +    1];    	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	21	None	replace
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[1]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[0]    =    0;    q[1]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	4	add
12	[BUG]  [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[1]  =  0;  q[0]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[1]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[0]    =    0;    q[1]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	4	add
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[2]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[0]    =    0;    q[2]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	4	add
14	[BUG]  [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[2]  =  0;  q[0]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[2]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[0]    =    0;    q[2]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	4	add
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[0]    =    0;    q[0]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	4	add
16	[BUG]  [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[0]  =  0;  q[0]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[0]    =    0;    q[0]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	4	add
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[1]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]  =  0.0;  q[1]  =  0.0;	  q[0]    =    0;    q[1]    =    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	4	replace
18	[BUG]  [BUGGY]  q[0]  =  0.0;  q[1]  =  0.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[1]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]  =  0.0;  q[1]  =  0.0;	  q[0]    =    0;    q[1]    =    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	4	replace
19	[BUG]  [BUGGY]  final  double  q[0]  =  0;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  q[0]  =  0;	  q[0]    =    0;    int    q[0]    =    0;    	non-compiled	[CE]  ']'  expected	42	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  1.0;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
21	[BUG]  [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1.0;  q[2]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  1.0;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  0.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  0.0;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
23	[BUG]  [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  0.0;  q[2]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  0.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  0.0;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1.0;  q[2]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  1.0;  q[2]  =  0.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
25	[BUG]  [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1.0;  q[2]  =  0.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1.0;  q[2]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  1.0;  q[2]  =  0.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
26	[BUG]  [BUGGY]  final  double[]  q2  =  new  double[order];  final  double[]  q2  =  new  double[order];  [CE]  variable  q2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[order];  final  double[]  q2  =  new  double[order];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final    double[]    q2    =    new    double[order];    final  double[]  q2  =  new  double[order];	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  atan(double[],int,double[],int)	37	None	add
27	[BUG]  [BUGGY]  final  double[]  q2  =  new  double[order];  Final  double[]  q2  =  new  double[order];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[order];  Final  double[]  q2  =  new  double[order];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final    double[]    q2    =    new    double[order];    Final  double[]  q2  =  new  double[order];	  	non-compiled	[CE]  not  a  statement	37	None	add
28	[BUG]  [BUGGY]  final  double  q[0]  =  1.0;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  q[0]  =  1.0;	          q[0]    =    1.0;    final    double    q[0]    =    1.0;    	non-compiled	[CE]  ']'  expected	36	None	replace
29	[BUG]  [BUGGY]  final  double  q[]  =  1.0;  [CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  q[]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  q[]  =  1.0;	          q[0]    =    1.0;    final    double    q[0]    =    1.0;    	non-compiled	[CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)	36	None	replace
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[1]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[1]    =    0;    q[1]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
31	[BUG]  [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[1]  =  0;  q[1]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[1]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[1]    =    0;    q[1]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[2]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[1]    =    0;    q[2]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
33	[BUG]  [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[2]  =  0;  q[1]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[2]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[1]    =    0;    q[2]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[0]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[1]    =    0;    q[0]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
35	[BUG]  [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[0]  =  0;  q[1]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[0]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[1]    =    0;    q[0]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[0]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]    =    0.0;    q[0]  =  0.0;	  	compilable	  [FE]  AssertionError  	39	1	add
37	[BUG]  [BUGGY]  q[0]  =  0.0;  q[0]  =  0.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[0]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0.0;    q[0]  =  0.0;	  	compilable	  [FE]  AssertionError  	39	1	add
38	[BUG]  [BUGGY]  q[0]  =  0.0;  final  double  q[0]  =  0.0;  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  final  double  q[0]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0.0;    final  double  q[0]  =  0.0;	  	non-compiled	[CE]  ']'  expected	39	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[0]  =  0.00;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]    =    0.0;    q[0]  =  0.00;	  	compilable	  [FE]  AssertionError  	39	1	add
40	[BUG]  [BUGGY]  q[0]  =  0.0;  q[0]  =  0.00;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[0]  =  0.00;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0.0;    q[0]  =  0.00;	  	compilable	  [FE]  AssertionError  	39	1	add
41	[BUG]  [BUGGY]          final  double  x1=  x  *  x;  final  double  x1=  x  *  x;  [CE]  variable  x1  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          final  double  x1=  x  *  x;  final  double  x1=  x  *  x;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                final    double    x1=    x    *    x;    final  double  x1=  x  *  x;	  	non-compiled	[CE]  variable  x1  is  already  defined  in  method  atan(double[],int,double[],int)	43	None	add
42	[BUG]  [BUGGY]          final  double  x1=  x  *  x;  Final  double  x1=  x  *  x;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          final  double  x1=  x  *  x;  Final  double  x1=  x  *  x;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                final    double    x1=    x    *    x;    Final  double  x1=  x  *  x;	  	non-compiled	[CE]  not  a  statement	43	None	add
43	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
44	[BUG]  [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[1]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  0.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  0.0;  q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
46	[BUG]  [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  0.0;  q[1]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  0.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  0.0;  q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[1]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  1.0;  q[1]  =  0.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
48	[BUG]  [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[1]  =  0.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[1]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  1.0;  q[1]  =  0.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  1.0;  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  1.0;	  	compilable	  [FE]  AssertionError  	8	1	add
50	[BUG]  [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  1.0;  q[0]  =  1.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  1.0;  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  1.0;	  	compilable	  [FE]  AssertionError  	8	1	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  0.0;  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[0]    =    1.0;    q[0]  =  0.0;  q[0]  =  1.0;	  	compilable	  [FE]  AssertionError  	8	1	add
52	[BUG]  [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  0.0;  q[0]  =  1.0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  0.0;  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[0]    =    1.0;    q[0]  =  0.0;  q[0]  =  1.0;	  	compilable	  [FE]  AssertionError  	8	1	add
53	[BUG]  [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  1.0,  q[0]  =  1.0;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[0]  =  1.0,  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[0]    =    1.0;    q[0]  =  1.0,  q[0]  =  1.0;	  	non-compiled	[CE]  ';'  expected	8	None	add
54	[BUG]  [BUGGY]  final  double[]  x  =  new  double[order  +  2];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  x  =  new  double[order  +  2];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x  =  new  double[order  +  2];	  final    double[]    x    =    new    double[order    +    1];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	47	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  FastMath.atan(x);  q[0]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]    =    FastMath.atan(x);    q[0]  =  FastMath.atan(x);	  	compilable	  [FE]  AssertionError  	23	1	add
56	[BUG]  [BUGGY]  q[0]  =  FastMath.atan(x);  q[0]  =  FastMath.atan(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  FastMath.atan(x);  q[0]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    FastMath.atan(x);    q[0]  =  FastMath.atan(x);	  	compilable	  [FE]  AssertionError  	23	1	add
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  FastMath.atan(x);  q[1]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]    =    FastMath.atan(x);    q[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	add
58	[BUG]  [BUGGY]  q[0]  =  FastMath.atan(x);  q[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  FastMath.atan(x);  q[1]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    FastMath.atan(x);    q[1]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	add
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  FastMath.atan(x);  q[2]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]    =    FastMath.atan(x);    q[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	add
60	[BUG]  [BUGGY]  q[0]  =  FastMath.atan(x);  q[2]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  FastMath.atan(x);  q[2]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    FastMath.atan(x);    q[2]  =  FastMath.atan(x);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	add
61	[BUG]  [BUGGY]  final  double  q[]  =  0;  [CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  q[]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  q[]  =  0;	  q[0]    =    0;    final    double    q[0]    =    0;    	non-compiled	[CE]  variable  q  is  already  defined  in  method  atan(double[],int,double[],int)	41	None	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[1]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[2]    =    1;    q[1]  =  1;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
63	[BUG]  [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[1]  =  1;  q[2]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[1]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[2]    =    1;    q[1]  =  1;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[2]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[2]    =    1;    q[2]  =  1;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
65	[BUG]  [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[2]  =  1;  q[2]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[2]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[2]    =    1;    q[2]  =  1;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
66	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[0]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[2]    =    1;    q[0]  =  1;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
67	[BUG]  [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[0]  =  1;  q[2]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[0]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[2]    =    1;    q[0]  =  1;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
68	[BUG]  [BUGGY]  final  double  x2  =  1.0  /  (1  +  q.length  -  1);  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2  =  1.0  /  (1  +  q.length  -  1);  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2  =  1.0  /  (1  +  q.length  -  1);	  final    double    x2    =    1.0    /    (1    +    q.length);    	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	replace
69	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  1.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    1.0;    q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
70	[BUG]  [BUGGY]  q[1]  =  1.0;  q[1]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  1.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    1.0;    q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
71	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  1.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    1.0;    q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
72	[BUG]  [BUGGY]  q[1]  =  1.0;  q[2]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  1.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    1.0;    q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  1.0;  q[1]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]    =    1.0;    q[1]  =  0.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
74	[BUG]  [BUGGY]  q[1]  =  1.0;  q[1]  =  0.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  1.0;  q[1]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]    =    1.0;    q[1]  =  0.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	4	add
75	[BUG]  [BUGGY]  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[0];  [CE]  cannot  find  symbol  n  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2=  x  *  x;  function[1]  =  -n  *  q[0];  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2=  x  *  x;  function[1]  =  -n  *  q[0];	  q[0]    =    0;    q[0]    =    0;    final    double    x2=    x    *    x;    function[1]    =    -n    *    q[0];    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
76	[BUG]  [BUGGY]  final  double  x2=  x  *  q;  function[1]  =  -n  *  q[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2=  x  *  q;  function[1]  =  -n  *  q[0];  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2=  x  *  q;  function[1]  =  -n  *  q[0];	  q[0]    =    0;    q[0]    =    0;    final    double    x2=    x    *    x;    function[1]    =    -n    *    q[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	6	None	replace
77	[BUG]  [BUGGY]  final  double  x1=  x  *  q;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x1=  x  *  q;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x1=  x  *  q;	          final    double    x1=    x    *    x;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
78	[BUG]  [BUGGY]  final  double  x1=  q  *  x;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x1=  q  *  x;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x1=  q  *  x;	          final    double    x1=    x    *    x;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
79	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[1]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[0]    =    1;    q[1]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
80	[BUG]  [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[1]  =  1;  q[0]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[1]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[0]    =    1;    q[1]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[2]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[0]    =    1;    q[2]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
82	[BUG]  [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[2]  =  1;  q[0]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[2]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[0]    =    1;    q[2]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
83	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[0]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[0]    =    1;    q[0]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
84	[BUG]  [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[0]  =  1;  q[0]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[0]  =  1;  q[0]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[0]    =    1;    q[0]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	add
85	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]  =  0.0;	  q[0]    =    0.0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
86	[BUG]  [BUGGY]  q[1]  =  0.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]  =  0.0;	  q[0]    =    0.0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
87	[BUG]  [BUGGY]  final  double  x2=  x  *  q.length;  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2=  x  *  q.length;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2=  x  *  q.length;	          final    double    x2=    x    *    q;    	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	35	None	replace
88	[BUG]  [BUGGY]  final  double  x2=  q  *  x;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2=  q  *  x;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2=  q  *  x;	          final    double    x2=    x    *    q;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	35	None	replace
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]  =  FastMath.atan(x);	  q[0]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	4	replace
90	[BUG]  [BUGGY]  q[1]  =  FastMath.atan(x);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]  =  FastMath.atan(x);  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]  =  FastMath.atan(x);	  q[0]    =    FastMath.atan(x);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	4	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[1];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	final  double[]  q2  =  new  double[1];	  final    double[]    q2    =    new    double[order];    	compilable	  [FE]  AssertionError  	38	3	replace
92	[BUG]  [BUGGY]  final  double[]  q2  =  new  double[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[1];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  q2  =  new  double[1];	  final    double[]    q2    =    new    double[order];    	compilable	  [FE]  AssertionError  	38	3	replace
93	[BUG]  [BUGGY]  final  double[]  q2  =  new  double[size];  [CE]  cannot  find  symbol  size  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[size];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  q2  =  new  double[size];	  final    double[]    q2    =    new    double[order];    	non-compiled	[CE]  cannot  find  symbol  size	38	None	replace
94	[BUG]  [BUGGY]  final  double  x2=  v  *  x;  [CE]  cannot  find  symbol  v  [FE]        AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2=  v  *  x;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2=  v  *  x;	          final    double    x2=    x    *    x;    	non-compiled	[CE]  cannot  find  symbol  v	7	None	replace
95	[BUG]  [BUGGY]  final  double  x2  =  1.0;  [CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x2  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x2  =  1.0;	          q[0]    =    1.0;    final    double    x2    =    1.0;    	non-compiled	[CE]  variable  x2  is  already  defined  in  method  atan(double[],int,double[],int)	12	None	replace
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[1]  =  0;  q[0]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]        =        0;        q[1]    =    0;    q[0]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	4	add
97	[BUG]  [BUGGY]  q[0]    =    0;    q[1]  =  0;  q[0]  =  0;  q[1]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[1]  =  0;  q[0]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[1]    =    0;    q[0]  =  0;  q[1]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	4	add
98	[BUG]  [BUGGY]  q[0]    =    0;    q[1]  =  0;  q[0]  =  0,  q[1]  =  0;  q[1]  =  0;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[1]  =  0;  q[0]  =  0,  q[1]  =  0;  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[1]    =    0;    q[0]  =  0,  q[1]  =  0;  q[1]  =  0;	  	non-compiled	[CE]  ';'  expected	48	None	add
99	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[1]  =  1;  q[1]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[1]    =    1;    q[1]  =  1;  q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
100	[BUG]  [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[1]  =  1;  q[1]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[1]  =  1;  q[1]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[1]    =    1;    q[1]  =  1;  q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
101	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[2]  =  1;  q[1]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[1]    =    1;    q[2]  =  1;  q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
102	[BUG]  [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[2]  =  1;  q[1]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[2]  =  1;  q[1]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[1]    =    1;    q[2]  =  1;  q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
103	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[0]  =  1;  q[1]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[1]    =    1;    q[0]  =  1;  q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
104	[BUG]  [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[0]  =  1;  q[1]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[0]  =  1;  q[1]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[1]    =    1;    q[0]  =  1;  q[1]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
105	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[1]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[2]    =    0;    q[1]  =  0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
106	[BUG]  [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[1]  =  0;  q[2]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[1]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[2]    =    0;    q[1]  =  0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
107	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[2]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[2]    =    0;    q[2]  =  0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
108	[BUG]  [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[2]  =  0;  q[2]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[2]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[2]    =    0;    q[2]  =  0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
109	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[0]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[2]    =    0;    q[0]  =  0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
110	[BUG]  [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[0]  =  0;  q[2]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[0]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[2]    =    0;    q[0]  =  0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
111	[BUG]  [BUGGY]  q[1]    =    0;    q[0]  =  0;  final  double  q[1]  =  0;  q[0]  =  0;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  final  double  q[1]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[0]    =    0;    final  double  q[1]  =  0;  q[0]  =  0;	  	non-compiled	[CE]  ']'  expected	29	None	add
112	[BUG]  [BUGGY]  final  double  q[1]  =  0;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  q[1]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  q[1]  =  0;	  q[0]    =    0;    final    double    q[0]    =    0;    	non-compiled	[CE]  ']'  expected	41	None	replace
113	[BUG]  [BUGGY]  final  double[]  x2  =  new  double[q];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  x2  =  new  double[q];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  x2  =  new  double[q];	  final    double[]    x2    =    new    double[size];    	non-compiled	[CE]  incompatible  types	22	None	replace
114	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[0]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[1]    =    1;    q[0]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
115	[BUG]  [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[0]  =  1;  q[0]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[1]  =  1;  q[0]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[1]    =    1;    q[0]  =  1;  q[0]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	add
116	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	add
117	[BUG]  [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;  q[0]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;  q[0]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	add
118	[BUG]  [BUGGY]  q[0]    =    0;    q[1]  =  0;  q[0]  =  0,  q[1]  =  0;  q[2]  =  0;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[1]  =  0;  q[0]  =  0,  q[1]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[1]    =    0;    q[0]  =  0,  q[1]  =  0;  q[2]  =  0;	  	non-compiled	[CE]  ';'  expected	48	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[0];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	final  double[]  q2  =  new  double[0];	  final    double[]    q2    =    new    double[order];    	compilable	  [FE]  AssertionError  	38	3	replace
120	[BUG]  [BUGGY]  final  double[]  q2  =  new  double[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[0];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  q2  =  new  double[0];	  final    double[]    q2    =    new    double[order];    	compilable	  [FE]  AssertionError  	38	3	replace
121	[BUG]  [BUGGY]  int  q[0]  =  0;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  int  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	int  q[0]  =  0;	  q[0]    =    0;    int    q[0]    =    0;    	non-compiled	[CE]  ']'  expected	42	None	replace
122	[BUG]  [BUGGY]  q[1]    =    1;    q[0]  =  1;  final  double  q[1]  =  1;  q[0]  =  1;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[0]  =  1;  final  double  q[1]  =  1;  q[0]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[0]    =    1;    final  double  q[1]  =  1;  q[0]  =  1;	  	non-compiled	[CE]  ']'  expected	17	None	add
123	[BUG]  [BUGGY]  q[1]    =    0;    q[2]  =  0;  final  double  q[1]  =  0;  q[2]  =  0;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  final  double  q[1]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[2]    =    0;    final  double  q[1]  =  0;  q[2]  =  0;	  	non-compiled	[CE]  ']'  expected	27	None	add
124	[BUG]  [BUGGY]  q[1]    =    0;    q[2]  =  0;  int  q[1]  =  0;  q[2]  =  0;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  int  q[1]  =  0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[2]    =    0;    int  q[1]  =  0;  q[2]  =  0;	  	non-compiled	[CE]  ']'  expected	27	None	add
125	[BUG]  [BUGGY]  q[1]    =    1;    q[2]  =  1;  final  double  q[1]  =  1;  q[2]  =  1;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  final  double  q[1]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[2]    =    1;    final  double  q[1]  =  1;  q[2]  =  1;	  	non-compiled	[CE]  ']'  expected	15	None	add
126	[BUG]  [BUGGY]  q[1]    =    1;    q[2]  =  1;  double  q[1]  =  1;  q[2]  =  1;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  double  q[1]  =  1;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[2]    =    1;    double  q[1]  =  1;  q[2]  =  1;	  	non-compiled	[CE]  ']'  expected	15	None	add
127	[BUG]  [BUGGY]  q[0]  =  0.0;  int  q[0]  =  0.0;  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  int  q[0]  =  0.0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]    =    0.0;    int  q[0]  =  0.0;	  	non-compiled	[CE]  ']'  expected	39	None	add
128	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  1.0;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
129	[BUG]  [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[2]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[1]  =  1.0;  q[0]  =  1.0;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[1]    =    1.0;    q[0]  =  1.0;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
130	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[2]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]  =  0.0;  q[2]  =  0.0;	          q[0]    =    1.0;    q[2]    =    1.0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	4	replace
131	[BUG]  [BUGGY]  q[0]  =  0.0;  q[2]  =  0.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]  =  0.0;  q[2]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]  =  0.0;  q[2]  =  0.0;	          q[0]    =    1.0;    q[2]    =    1.0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	4	replace
132	[BUG]  [BUGGY]  final  double  q[0]  =  0.0;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  q[0]  =  0.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  q[0]  =  0.0;	          q[0]    =    1.0;    final    double    q[0]    =    1.0;    	non-compiled	[CE]  ']'  expected	36	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[order  +  1];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	final  double[]  q2  =  new  double[order  +  1];	  final    double[]    x2    =    new    double[order    +    1];    	compilable	  [FE]  AssertionError  	21	3	replace
134	[BUG]  [BUGGY]  final  double[]  q2  =  new  double[order  +  1];  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double[]  q2  =  new  double[order  +  1];  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double[]  q2  =  new  double[order  +  1];	  final    double[]    x2    =    new    double[order    +    1];    	compilable	  [FE]  AssertionError  	21	3	replace
135	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  1;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
136	[BUG]  [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1;  q[2]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[2]  =  1.0;  q[0]  =  1;  q[2]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[2]    =    1.0;    q[0]  =  1;  q[2]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	4	add
137	[BUG]  [BUGGY]  final  double  q[1]  =  1.0;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  q[1]  =  1.0;	          q[0]    =    1.0;    final    double    q[0]    =    1.0;    	non-compiled	[CE]  ']'  expected	36	None	replace
138	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[1]  =  0.0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[2]    =    0;    q[1]  =  0.0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
139	[BUG]  [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[1]  =  0.0;  q[2]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[2]  =  0;  q[1]  =  0.0;  q[2]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[2]    =    0;    q[1]  =  0.0;  q[2]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	add
140	[BUG]  [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[1]  =  0,  q[0]  =  0;  q[0]  =  0;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[0]  =  0;  q[1]  =  0,  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[0]    =    0;    q[1]  =  0,  q[0]  =  0;  q[0]  =  0;	  	non-compiled	[CE]  ';'  expected	29	None	add
141	[BUG]  [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0,  q[0]  =  0;  q[0]  =  0;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  0,  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[0]    =    0;    q[0]  =  0,  q[0]  =  0;  q[0]  =  0;	  	non-compiled	[CE]  ';'  expected	3	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  1;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[0]        =        0;        q[0]    =    0;    q[0]  =  1;  q[0]  =  0;	  	compilable	  [FE]  AssertionError  	3	1	add
143	[BUG]  [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  1;  q[0]  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[0]    =    0;    q[0]  =  0;  q[0]  =  1;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[0]        =        0;        q[0]    =    0;    q[0]  =  1;  q[0]  =  0;	  	compilable	  [FE]  AssertionError  	3	1	add
144	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[1]  =  2;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        1;        q[2]    =    1;    q[1]  =  2;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
145	[BUG]  [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[1]  =  2;  q[2]  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    1;    q[2]  =  1;  q[1]  =  2;  q[2]  =  1;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        1;        q[2]    =    1;    q[1]  =  2;  q[2]  =  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x1=  x  *  q.length;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	final  double  x1=  x  *  q.length;	          final    double    x1=    x    *    x;    	compilable	  [FE]  AssertionError  	44	3	replace
147	[BUG]  [BUGGY]  final  double  x1=  x  *  q.length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  final  double  x1=  x  *  q.length;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	final  double  x1=  x  *  q.length;	          final    double    x1=    x    *    x;    	compilable	  [FE]  AssertionError  	44	3	replace
148	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	q[1]        =        0;        q[1]    =    0;    q[0]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
149	[BUG]  [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[0]  =  0;  q[0]  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]  q[1]    =    0;    q[1]  =  0;  q[0]  =  0;  q[0]  =  0;  [BUGGY]      final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	q[1]        =        0;        q[1]    =    0;    q[0]  =  0;  q[0]  =  0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	4	add
150	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	add	                q[0]        =        1.0;        q[0]    =    1.0;    q[1]  =  1.0;  q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	add
151	[BUG]  [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;  q[1]  =  1.0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];      [BUGGY]          q[0]    =    1.0;    q[0]  =  1.0;  q[1]  =  1.0;  q[1]  =  1.0;  [BUGGY]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1339	1339	1	replace	                q[0]        =        1.0;        q[0]    =    1.0;    q[1]  =  1.0;  q[1]  =  1.0;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	add
