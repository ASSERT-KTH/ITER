bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	add	final  double[]  function  =  new  double[1  +  resultOffset];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
2	[BUG]  [BUGGY]  final  double[]  function  =  new  double[1  +  resultOffset];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[]  function  =  new  double[1  +  resultOffset];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	add	final  double[]  function  =  new  double[2  +  order];	  double[]    function    =    new    double[2    +    order];    	compilable	  [FE]  AssertionError  	11	1	replace
4	[BUG]  [BUGGY]  final  double[]  function  =  new  double[2  +  order];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[]  function  =  new  double[2  +  order];	  double[]    function    =    new    double[2    +    order];    	compilable	  [FE]  AssertionError  	11	1	replace
5	[BUG]  [BUGGY]  final  int[][]  operands  =  new  int[1  +  resultOffset];  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  int[][]  operands  =  new  int[1  +  resultOffset];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  int[][]  operands  =  new  int[1  +  resultOffset];	      final    int[][]    operands    =    new    int[1    +    0];    	non-compiled	[CE]  incompatible  types	8	None	replace
6	[BUG]  [BUGGY]  final  int[][]  operands  =  new  int[2  +  order];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  int[][]  operands  =  new  int[2  +  order];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  int[][]  operands  =  new  int[2  +  order];	      final    int[][]    operands    =    new    int[1    +    order];    	non-compiled	[CE]  incompatible  types	9	None	replace
7	[BUG]  [BUGGY]  final  double[][]  function  =  resultOffset.getMask();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[][]  function  =  resultOffset.getMask();  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[][]  function  =  resultOffset.getMask();	      	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
8	[BUG]  [BUGGY]  final  double[]  function  =  resultOffset.get(resultOffset);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  resultOffset.get(resultOffset);  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[]  function  =  resultOffset.get(resultOffset);	      	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
9	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  double[]  function  =  new  double[1  +  resultOffset];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[1    +    resultOffset];    double[]  function  =  new  double[1  +  resultOffset];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	add
10	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  final  double[]  function  =  new  double[1  +  resultOffset];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  final  double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[1    +    resultOffset];    final  double[]  function  =  new  double[1  +  resultOffset];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	add
11	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  Double[]  function  =  new  double[1  +  resultOffset];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  Double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[1    +    resultOffset];    Double[]  function  =  new  double[1  +  resultOffset];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	add
12	[BUG]  [BUGGY]  int[][]  operands  =  new  int[1  +  resultOffset];  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int[][]  operands  =  new  int[1  +  resultOffset];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	int[][]  operands  =  new  int[1  +  resultOffset];	      int[][]    operands    =    new    int[1    +    1];    	non-compiled	[CE]  incompatible  types	14	None	replace
13	[BUG]  [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  double[]  function  =  new  double[1  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  double[]  function  =  new  double[1  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final    double[]    function    =    new    double[1    +    order];    final  double[]  function  =  new  double[1  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	3	None	add
14	[BUG]  [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  double[]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final    double[]    function    =    new    double[1    +    order];    final  double[]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	3	None	add
15	[BUG]  [BUGGY]  final  int[][]  result  =  new  int[2  +  order];  [CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  int[][]  result  =  new  int[2  +  order];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  int[][]  result  =  new  int[2  +  order];	      final    int[][]    result    =    new    int[1    +    order];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)	6	None	replace
16	[BUG]  [BUGGY]  final  int[][]  result  =  new  int[1  +  0];  [CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  int[][]  result  =  new  int[1  +  0];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  int[][]  result  =  new  int[1  +  0];	      final    int[][]    result    =    new    int[1    +    order];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)	6	None	replace
17	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  final  double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  final  double[]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[2    +    order];    final  double[]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	add
18	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  double[]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[2    +    order];    double[]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	add
19	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  Double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  Double[]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[2    +    order];    Double[]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	add
20	[BUG]  [BUGGY]  int[][]  operand  =  new  int[1  +  resultOffset];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int[][]  operand  =  new  int[1  +  resultOffset];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	int[][]  operand  =  new  int[1  +  resultOffset];	      int[][]    operand    =    new    int[1    +    order];    	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	12	None	replace
21	[BUG]  [BUGGY]  int[][]  operand  =  new  int[2  +  order];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int[][]  operand  =  new  int[2  +  order];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	int[][]  operand  =  new  int[2  +  order];	      int[][]    operand    =    new    int[1    +    order];    	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	12	None	replace
22	[BUG]  [BUGGY]  int[][]  operands  =  new  int[2  +  order];  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  int[][]  operands  =  new  int[2  +  order];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	int[][]  operands  =  new  int[2  +  order];	      int[][]    operands    =    new    int[1    +    order];    	non-compiled	[CE]  incompatible  types	13	None	replace
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	add	double[]  function  =  new  double[2  +  resultOffset];	  double[]    function    =    new    double[2    +    order];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
24	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  resultOffset];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]  function  =  new  double[2  +  resultOffset];	  double[]    function    =    new    double[2    +    order];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
25	[BUG]  [BUGGY]  final  int[][]  operands  =  new  int[resultOffset][0];  [CE]  cannot  find  symbol  function  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  int[][]  operands  =  new  int[resultOffset][0];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  int[][]  operands  =  new  int[resultOffset][0];	      	non-compiled	[CE]  cannot  find  symbol  function	5	None	replace
26	[BUG]  [BUGGY]  final  int[][]  operand  =  result.toArray(resultOffset);  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  int[][]  operand  =  result.toArray(resultOffset);  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  int[][]  operand  =  result.toArray(resultOffset);	      	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	replace
27	[BUG]  [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  int[][]  function  =  new  double[1  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  int[][]  function  =  new  double[1  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final    double[]    function    =    new    double[1    +    order];    final  int[][]  function  =  new  double[1  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	3	None	add
28	[BUG]  [BUGGY]  final  double[][]  operands  =  new  double[1  +  order];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[][]  operands  =  new  double[1  +  order];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[][]  operands  =  new  double[1  +  order];	      final    int[][]    operands    =    new    int[1    +    order];    	non-compiled	[CE]  incompatible  types	9	None	replace
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset  -  1];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	add	double[]  function  =  new  double[1  +  resultOffset  -  1];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
30	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset  -  1];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]  function  =  new  double[1  +  resultOffset  -  1];	  double[]    function    =    new    double[1    +    resultOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
31	[BUG]  [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  double[]  operand  =  new  double[1  +  order];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[]  function  =  new  double[1  +  order];  final  double[]  operand  =  new  double[1  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final    double[]    function    =    new    double[1    +    order];    final  double[]  operand  =  new  double[1  +  order];	  	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	3	None	add
32	[BUG]  [BUGGY]  double[]  function  =  new  double[2  +  order];  int[][]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[2  +  order];  int[][]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[2    +    order];    int[][]  function  =  new  double[2  +  order];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	add
33	[BUG]  [BUGGY]  final  double[][]  result  =  new  double[1  +  order];  [CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[][]  result  =  new  double[1  +  order];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[][]  result  =  new  double[1  +  order];	      final    int[][]    result    =    new    int[1    +    order];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)	6	None	replace
34	[BUG]  [BUGGY]  final  int[][]  result  =  new  int[1  +  offset];  [CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  int[][]  result  =  new  int[1  +  offset];  [BUGGY]    double[]  function  =  new  double[1  +  order];  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  int[][]  result  =  new  int[1  +  offset];	      final    int[][]    result    =    new    int[1    +    order];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  atan(double[],int,double[],int)	6	None	replace
35	[BUG]  [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  int[][]  function  =  new  double[1  +  resultOffset];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  double[]  function  =  new  double[1  +  resultOffset];  int[][]  function  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	double[]    function    =    new    double[1    +    resultOffset];    int[][]  function  =  new  double[1  +  resultOffset];	  	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	1	None	add
36	[BUG]  [BUGGY]  final  double[][]  operands  =  derivedTermG.atan(resultOffset);  [CE]  cannot  find  symbol  derivedTermG  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[][]  operands  =  derivedTermG.atan(resultOffset);  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[][]  operands  =  derivedTermG.atan(resultOffset);	      	non-compiled	[CE]  cannot  find  symbol  derivedTermG	5	None	replace
37	[BUG]  [BUGGY]  final  double[][]  operands  =  derivedTermG.atan(result);  [CE]  cannot  find  symbol  derivedTermG  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {      [BUGGY]  final  double[][]  operands  =  derivedTermG.atan(result);  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1327	1327	1	replace	final  double[][]  operands  =  derivedTermG.atan(result);	      	non-compiled	[CE]  cannot  find  symbol  derivedTermG	5	None	replace
