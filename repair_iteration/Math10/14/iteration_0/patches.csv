bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  x  =  resultOffset[operandOffset];  [CE]  array  required,  but  int  found  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]  final  double  x  =  resultOffset[operandOffset];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  resultOffset[operandOffset];	final  double  x  =  operand[operandOffset];  	non-compiled	[CE]  array  required,  but  int  found	28	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]  final  double  x  =  result[operandOffset];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  result[operandOffset];	final  double  x  =  operand[operandOffset];  	compilable	  [FE]  AssertionError  	28	4	replace
3	[BUG]  [BUGGY]  final  double  x  =  result[operandOffset];  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]  final  double  x  =  result[operandOffset];  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  result[operandOffset];	final  double  x  =  operand[operandOffset];  	compilable	  [FE]  AssertionError  	28	4	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  x  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	  	final  double  x  =  operand[operandOffset];  	non-compiled	[CE]  cannot  find  symbol  x	28	None	replace
5	[BUG]  [BUGGY]    final  double[]  function  =  new  double[1  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    final  double[]  function  =  new  double[1  +  order];  [BUGGY]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	    final  double[]  function  =  new  double[1  +  order];		non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	add
6	[BUG]  [BUGGY]    final  double[]  operand  =  new  double[1  +  order];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    final  double[]  operand  =  new  double[1  +  order];  [BUGGY]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	    final  double[]  operand  =  new  double[1  +  order];		non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	add
7	[BUG]  [BUGGY]    final  double[]  operand  =  new  double[1  +  1];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    final  double[]  operand  =  new  double[1  +  1];  [BUGGY]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	    final  double[]  operand  =  new  double[1  +  1];		non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]  final  double  x  =  resultOffset;  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  resultOffset;	final  double  x  =  operand[operandOffset];  	compilable	  [FE]  AssertionError  	28	4	replace
9	[BUG]  [BUGGY]  final  double  x  =  resultOffset;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]  final  double  x  =  resultOffset;  [BUGGY]  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  resultOffset;	final  double  x  =  operand[operandOffset];  	compilable	  [FE]  AssertionError  	28	4	replace
10	[BUG]  [BUGGY]    final  double[]  operand  =  new  double[2  +  functionOffset];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    final  double[]  operand  =  new  double[2  +  functionOffset];  [BUGGY]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	    final  double[]  operand  =  new  double[2  +  functionOffset];		non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	29	None	add
11	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  [BUGGY]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff		non-compiled	[CE]  ')'  expected	29	None	add
12	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [BUGGY]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }		non-compiled	[CE]  illegal  start  of  expression	29	None	add
13	[BUG]  [BUGGY]    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];  [BUGGY]    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [BUGGY]  final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	    if(resultOffset  >  0)  {  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }		non-compiled	[CE]  illegal  start  of  expression	29	None	add
