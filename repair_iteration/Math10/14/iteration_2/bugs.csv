bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(coeff);    }    	non-compiled	[CE]  incompatible  types	12	None	replace
2	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  resultOffset];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  resultOffset];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  resultOffset];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(coeff);    }    	non-compiled	[CE]  incompatible  types	12	None	replace
3	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(coeff    	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  >>  '  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  >>  '	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(coeff    	non-compiled	[CE]  illegal  line  end  in  character  literal	11	None	replace
5	[BUG]  [BUGGY]  final  double[]  operand  =  new  double[1];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[]  operand  =  new  double[1];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[]  operand  =  new  double[1];	      final    double[]    operand    =    new    double[1    +    1];    	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	7	None	replace
6	[BUG]  [BUGGY]  final  double[]  operand  =  new  double[1  +  resultOffset];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[]  operand  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[]  operand  =  new  double[1  +  resultOffset];	      final    double[]    operand    =    new    double[1    +    order];    	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	6	None	replace
7	[BUG]  [BUGGY]  final  double[]  operand  =  new  double[2  +  order];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[]  operand  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[]  operand  =  new  double[2  +  order];	      final    double[]    operand    =    new    double[1    +    order];    	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	6	None	replace
8	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(function[i]);    }    	non-compiled	[CE]  incompatible  types	13	None	replace
9	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  resultOffset];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  resultOffset];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  resultOffset];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(function[i]);    }    	non-compiled	[CE]  incompatible  types	13	None	replace
10	[BUG]  [BUGGY]  final  double  x  =  resultOffset;  final  double  x  =  resultOffset;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  resultOffset;  final  double  x  =  resultOffset;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final    double    x    =    resultOffset;    final  double  x  =  resultOffset;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	8	None	add
11	[BUG]  [BUGGY]  final  double  x  =  resultOffset;  final  double  x  =  functionOffset;  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  resultOffset;  final  double  x  =  functionOffset;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final    double    x    =    resultOffset;    final  double  x  =  functionOffset;	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	8	None	add
12	[BUG]  [BUGGY]  final  double  x  =  result[operandOffset];  final  double  x  =  result[operandOffset];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  result[operandOffset];  final  double  x  =  result[operandOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final    double    x    =    result[operandOffset];    final  double  x  =  result[operandOffset];	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	2	None	add
13	[BUG]  [BUGGY]  final  double  x  =  result[operandOffset];  final  double  x  =  result[opOffset];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  result[operandOffset];  final  double  x  =  result[opOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final    double    x    =    result[operandOffset];    final  double  x  =  result[opOffset];	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	2	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  result[0];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  result[0];	  final    double    x    =    resultOffset[operandOffset];    	compilable	  [FE]  AssertionError  	1	4	replace
15	[BUG]  [BUGGY]  final  double  x  =  result[0];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  result[0];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  result[0];	  final    double    x    =    resultOffset[operandOffset];    	compilable	  [FE]  AssertionError  	1	4	replace
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  result[1];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  result[1];	  final    double    x    =    resultOffset[operandOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	4	replace
17	[BUG]  [BUGGY]  final  double  x  =  result[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  result[1];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  result[1];	  final    double    x    =    resultOffset[operandOffset];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	4	replace
18	[BUG]  [BUGGY]  final  double[]  operand  =  new  double[2  +  resultOffset];  [CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[]  operand  =  new  double[2  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[]  operand  =  new  double[2  +  resultOffset];	      final    double[]    operand    =    new    double[2    +    functionOffset];    	non-compiled	[CE]  variable  operand  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  resultOffset  +  1;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  resultOffset  +  1;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
20	[BUG]  [BUGGY]  final  double  x  =  resultOffset  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  resultOffset  +  1;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  resultOffset  +  1;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  resultOffset  +  2;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  resultOffset  +  2;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
22	[BUG]  [BUGGY]  final  double  x  =  resultOffset  +  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  resultOffset  +  2;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  resultOffset  +  2;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
23	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(function);  [CE]  no  suitable  method  found  for  atan(double[])  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  function[0]  =  FastMath.atan(function);  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	function[0]  =  FastMath.atan(function);	      	non-compiled	[CE]  no  suitable  method  found  for  atan(double[])	4	None	replace
24	[BUG]  [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  [CE]  cannot  find  symbol  x  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  function[0]  =  FastMath.atan(resultOffset);  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	function[0]  =  FastMath.atan(resultOffset);	      	non-compiled	[CE]  cannot  find  symbol  x	4	None	replace
25	[BUG]  [BUGGY]  final  double[]  function  =  new  double[1  +  resultOffset];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[]  function  =  new  double[1  +  resultOffset];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[]  function  =  new  double[1  +  resultOffset];	      final    double[]    function    =    new    double[1    +    order];    	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	replace
26	[BUG]  [BUGGY]  final  double[]  function  =  new  double[2  +  order];  [CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[]  function  =  new  double[2  +  order];  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[]  function  =  new  double[2  +  order];	      final    double[]    function    =    new    double[1    +    order];    	non-compiled	[CE]  variable  function  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	replace
27	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  i];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  i];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  i];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff);  }	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(coeff);    }    	non-compiled	[CE]  cannot  find  symbol  i	12	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  operand[resultOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  operand[resultOffset];	  final    double    x    =    resultOffset[operandOffset];    	compilable	  [FE]  AssertionError  	1	1	replace
29	[BUG]  [BUGGY]  final  double  x  =  operand[resultOffset];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  operand[resultOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  operand[resultOffset];	  final    double    x    =    resultOffset[operandOffset];    	compilable	  [FE]  AssertionError  	1	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  function.length;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  function.length;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
31	[BUG]  [BUGGY]  final  double  x  =  function.length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  function.length;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  function.length;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
32	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  >>  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  >>  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  order];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(coeff  >>	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(coeff    	non-compiled	[CE]  ')'  expected	11	None	replace
33	[BUG]  [BUGGY]  final  double  x  =  resultOffset;  Final  double  x  =  resultOffset;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  resultOffset;  Final  double  x  =  resultOffset;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final    double    x    =    resultOffset;    Final  double  x  =  resultOffset;	  	non-compiled	[CE]  not  a  statement	8	None	add
34	[BUG]  [BUGGY]  final  double[][]  coeff  =  new  double[1  +  i];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [CE]  cannot  find  symbol  i  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double[][]  coeff  =  new  double[1  +  i];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }  [BUGGY]    final  double  x  =  operand[operandOffset];  function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double[][]  coeff  =  new  double[1  +  i];  for(int  i  =  0;  i  <  coeff;  ++i)  {  function[i]  =  FastMath.atan(function[i]);  }	      if(resultOffset    >    0)    {    final    double[][]    coeff    =    new    double[1    +    order];    for(int    i    =    0;    i    <    coeff;    ++i)    {    function[i]    =    FastMath.atan(function[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
35	[BUG]  [BUGGY]  final  double  x  =  result[operandOffset];  final  double  x  =  result[optOffset];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  result[operandOffset];  final  double  x  =  result[optOffset];  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final    double    x    =    result[operandOffset];    final  double  x  =  result[optOffset];	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	2	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  1;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	add	final  double  x  =  1;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
37	[BUG]  [BUGGY]  final  double  x  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  final  double  x  =  1;  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	final  double  x  =  1;	  final    double    x    =    resultOffset;    	compilable	  [FE]  AssertionError  	9	4	replace
38	[BUG]  [BUGGY]  int  dSize  =  Math.min(resultOffset,  resultOffset);  [CE]  cannot  find  symbol  x  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  int  dSize  =  Math.min(resultOffset,  resultOffset);  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	int  dSize  =  Math.min(resultOffset,  resultOffset);	      	non-compiled	[CE]  cannot  find  symbol  x	4	None	replace
39	[BUG]  [BUGGY]  if(resultOffset  >  0)  {  for(int  x  =  0;  x  <  resultOffset;  ++x)  {  function[0]  =  FastMath.atan(x);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {  double[]  function  =  new  double[1  +  order];    [BUGGY]  if(resultOffset  >  0)  {  for(int  x  =  0;  x  <  resultOffset;  ++x)  {  function[0]  =  FastMath.atan(x);  }  [BUGGY]    function[0]  =  FastMath.atan(x);  if  (order  >  0)  {        final  double[]  q  =  new  double[order];  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1328	1328	1	replace	if(resultOffset  >  0)  {  for(int  x  =  0;  x  <  resultOffset;  ++x)  {  function[0]  =  FastMath.atan(x);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
