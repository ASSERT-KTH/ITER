bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];	          q[n    -    1]    =    v    *    q[n    -    2];    q[n    -    1]    =    v    *    q[n    -    2];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
2	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[1];  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  x2  +  q[1];	  q[n    -    1]    =    v    *    x2    +    q[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
3	[BUG]  [BUGGY]  NeighborUtilities.checkArgument(n  <  =  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  NeighborUtilities.checkArgument(n  <  =  0);  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	NeighborUtilities.checkArgument(n  <  =  0);	  NeighborUtilities.checkArgument(n    >    0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
4	[BUG]  [BUGGY]  NeighborUtilities.checkArgument(n  >  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  NeighborUtilities.checkArgument(n  >  1);  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	NeighborUtilities.checkArgument(n  >  1);	  NeighborUtilities.checkArgument(n    >    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
5	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[0];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[0];	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n    -    1]    =    v    *    x2    +    q[n    -    2];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
6	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  =  3;  k  -=  2)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  =  3;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  =  3;  k  -=  2)  {	  for(int    k    =    n    -    1;    k    <    =    order;    k    -=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  =  2;  k  -=  2)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  =  2;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  =  2;  k  -=  2)  {	  for(int    k    =    n    -    1;    k    <    =    order;    k    -=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x;  }  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x;  }	  if(n    >    0)    {    for(int    k    =    0;    k    <    n;    k++)    {    v    *=    x;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
9	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x2;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x2;  }  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x2;  }	  if(n    >    0)    {    for(int    k    =    0;    k    <    n;    k++)    {    v    *=    x;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
10	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2].;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2].;	          q[n    -    1]    =    v    *    q[n    -    2];    q[n    -    1]    =    v    *    q[n    -    2].;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
11	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  q.length;  ++k)  {  v  *=  x2;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  0;  k  <  q.length;  ++k)  {  v  *=  x2;  }  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  0;  k  <  q.length;  ++k)  {  v  *=  x2;  }	  if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    ++k)    {    v    *=    x2;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
12	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  x2  +  q[k];  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  x2  +  q[k];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  x2  +  q[k];  }	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    1)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
13	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2[k  -  1]  +  q[k  -  1]  +  (k  -  2  *  n)*  q[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2[k  -  1]  +  q[k  -  1]  +  (k  -  2  *  n)*  q[  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2[k  -  1]  +  q[k  -  1]  +  (k  -  2  *  n)*  q[	  for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    q[k    -    1]    +    q[k    -    1]    +    (k    -    2    *    n)*    q[    	non-compiled	[CE]  ']'  expected	10	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	25	4	add
15	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	25	4	add
16	[BUG]  [BUGGY]  for(n  -  1]  =  v  *  q[n  -  2];  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(n  -  1]  =  v  *  q[n  -  2];	          q[n    -    1]    =    v    *    q[n    -    2];    for(n    -    1]    =    v    *    q[n    -    2];    	non-compiled	[CE]  not  a  statement	41	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	14	4	add
18	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	compilable	  [FE]  AssertionError  	14	4	add
19	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  2)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  2)  {	  for(int    k    =    n    -    1;    k    <    =    2)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  n  <  =  n?  0  :  n  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  n  <  =  n?  0  :  n  +  1;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	n  <  =  n?  0  :  n  +  1;	  n    <    =    n?    0    :    n;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	                q[n        -        1]        =        v        *        q[n        -        2];        q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];	  	compilable	  [FE]  AssertionError  	16	4	add
22	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        q[n        -        2];        q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];	  	compilable	  [FE]  AssertionError  	16	4	add
23	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  int  n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  int  n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        q[n        -        2];        q[n    -    1]    =    v    *    q[n    -    2];    int  n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];	  	non-compiled	[CE]  ';'  expected	16	None	add
24	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  -  2  *  n)*  q  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  -  2  *  n)*  q  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  -  2  *  n)*  q	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    q[k    -    1]    +    q[k    -    1]    +    (k    -    1    -    2    *    n)*    q    	non-compiled	[CE]  ';'  expected	30	None	replace
25	[BUG]  [BUGGY]  int  n  =  n  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  int  n  =  n  /  2;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	int  n  =  n  /  2;	  int    n    =    n    *    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
26	[BUG]  [BUGGY]  int  n  =  n  *  2  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  int  n  =  n  *  2  +  1;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	int  n  =  n  *  2  +  1;	  int    n    =    n    *    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
27	[BUG]  [BUGGY]  if(n  >  0)  {  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  int  n  -  1]  =  v  *  x2  +  q[n  -  1];  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  0)  {  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  int  n  -  1]  =  v  *  x2  +  q[n  -  1];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  0)  {  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  int  n  -  1]  =  v  *  x2  +  q[n  -  1];  }	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    int    n    -    1]    =    v    *    x2    +    q[n    -    1];    	non-compiled	[CE]  ';'  expected	37	None	replace
28	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[0];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[0];	  q[n    -    1]    =    -n    *    q[n    -    2];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
29	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1)  =  v  *  q[n  -  2];  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1)  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[n  -  2];  q[n  -  1)  =  v  *  q[n  -  2];	          q[n    -    1]    =    v    *    q[n    -    2];    q[n    -    1)    =    v    *    q[n    -    2];    	non-compiled	[CE]  ']'  expected	42	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  2;  k++)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	for(int  k  =  n  -  1;  k  <  2;  k++)  {	  for(int    k    =    n    -    1;    k    <    3;    k++)    {    	compilable	  [FE]  AssertionError  	46	4	replace
31	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  2;  k++)  {  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  2;  k++)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  2;  k++)  {	  for(int    k    =    n    -    1;    k    <    3;    k++)    {    	compilable	  [FE]  AssertionError  	46	4	replace
32	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  =  3;  k++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  =  3;  k++)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  =  3;  k++)  {	  for(int    k    =    n    -    1;    k    <    3;    k++)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
33	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2].;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2].;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  2].;	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    2].;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
34	[BUG]  [BUGGY]  Neighbor  n  =  n  -  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  Neighbor  n  =  n  -  2;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	Neighbor  n  =  n  -  2;	  Neighbor    n    =    n    -    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
35	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          n    =    n    -    1;    n  =  n  -  2;  n  =  n  -  1;  n  =  n  -  2;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	                n        =        n        -        1;        n    =    n    -    2;    n  =  n  -  1;  n  =  n  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	add
36	[BUG]  [BUGGY]          n    =    n    -    1;    n  =  n  -  2;  n  =  n  -  1;  n  =  n  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          n    =    n    -    1;    n  =  n  -  2;  n  =  n  -  1;  n  =  n  -  2;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                n        =        n        -        1;        n    =    n    -    2;    n  =  n  -  1;  n  =  n  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	add
37	[BUG]  [BUGGY]          n    =    n    -    1;    n  =  n  -  2;  int  n  =  n  -  1;  n  =  n  -  2;  [CE]  variable  n  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          n    =    n    -    1;    n  =  n  -  2;  int  n  =  n  -  1;  n  =  n  -  2;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                n        =        n        -        1;        n    =    n    -    2;    int  n  =  n  -  1;  n  =  n  -  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  atan(double[],int,double[],int)	23	None	add
38	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    1]    +    q[k    -    3];    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
39	[BUG]  [BUGGY]  n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    1]    +    q[k    -    3];    }    	non-compiled	[CE]  not  a  statement	47	None	replace
40	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  =  0)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  =  0)  {	  for(int    k    =    n    -    1;    k    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
41	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0)  {	  for(int    k    =    n    -    1;    k    <    0)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
42	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q[  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q[  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q[	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    q[k    -    1]    +    q[k    -    1]    +    (k    -    1    *    n)*    q[    	non-compiled	[CE]  ']'  expected	51	None	replace
43	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  1].;	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n    -    1]    =    v    *    x2    +    q[n    -    1].;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	12	1	add
45	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	12	1	add
46	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;	  	non-compiled	[CE]  <identifier>  expected	12	None	add
47	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  3;  k++)  {  for(int  k  =  n  -  1;  k  <  3;  k++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  3;  k++)  {  for(int  k  =  n  -  1;  k  <  3;  k++)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int    k    =    n    -    1;    k    <    3;    k++)    {    for(int  k  =  n  -  1;  k  <  3;  k++)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
48	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  3;  k++)  {  For(int  k  =  n  -  1;  k  <  3;  k++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  3;  k++)  {  For(int  k  =  n  -  1;  k  <  3;  k++)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int    k    =    n    -    1;    k    <    3;    k++)    {    For(int  k  =  n  -  1;  k  <  3;  k++)  {	  	non-compiled	[CE]  '.class'  expected	45	None	add
49	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  3;  k++)  {  int  k  =  n  -  1;  k  <  3;  k++)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  3;  k++)  {  int  k  =  n  -  1;  k  <  3;  k++)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int    k    =    n    -    1;    k    <    3;    k++)    {    int  k  =  n  -  1;  k  <  3;  k++)  {	  	non-compiled	[CE]  illegal  start  of  type	45	None	add
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          n    =    n    -    1;    n  =  n  -  1;  n  =  n  -  1;  n  =  n  -  1;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	                n        =        n        -        1;        n    =    n    -    1;    n  =  n  -  1;  n  =  n  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	4	add
51	[BUG]  [BUGGY]          n    =    n    -    1;    n  =  n  -  1;  n  =  n  -  1;  n  =  n  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          n    =    n    -    1;    n  =  n  -  1;  n  =  n  -  1;  n  =  n  -  1;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                n        =        n        -        1;        n    =    n    -    1;    n  =  n  -  1;  n  =  n  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	4	add
52	[BUG]  [BUGGY]          n    =    n    -    1;    n  =  n  -  1;  int  n  =  n  -  1;  n  =  n  -  1;  [CE]  variable  n  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          n    =    n    -    1;    n  =  n  -  1;  int  n  =  n  -  1;  n  =  n  -  1;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                n        =        n        -        1;        n    =    n    -    1;    int  n  =  n  -  1;  n  =  n  -  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  atan(double[],int,double[],int)	20	None	add
53	[BUG]  [BUGGY]  q[n  -  1]  =  f  *  q[1];  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  f  *  q[1];  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  f  *  q[1];	  q[n    -    1]    =    f    *    q[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
54	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int    k    =    n    -    1;    k    <    0;    k    -=    2)    {    for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
55	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  For(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  For(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int    k    =    n    -    1;    k    <    0;    k    -=    2)    {    For(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {	  	non-compiled	[CE]  '.class'  expected	43	None	add
56	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  int  k  =  n  -  1;  k  <  0;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int    k    =    n    -    1;    k    <    0;    k    -=    2)    {    int  k  =  n  -  1;  k  <  0;  k  -=  2)  {	  	non-compiled	[CE]  illegal  start  of  type	43	None	add
57	[BUG]  [BUGGY]  q[n  -  1]  =  -1  *  q[n  -  2]  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -1  *  q[n  -  2]  +  1;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -1  *  q[n  -  2]  +  1;	  q[n    -    1]    =    -1    *    q[n    -    2];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
58	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]	  	non-compiled	[CE]  ';'  expected	25	None	add
59	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    int  n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	non-compiled	[CE]  ';'  expected	25	None	add
60	[BUG]  [BUGGY]  if(n  >  0)  {  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  n  -  1]  =  v  *  x2  +  q[n  -  2];  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  0)  {  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  n  -  1]  =  v  *  x2  +  q[n  -  2];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  0)  {  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  n  -  1]  =  v  *  x2  +  q[n  -  2];  }	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    int    n    -    1]    =    v    *    x2    +    q[n    -    2];    	non-compiled	[CE]  ';'  expected	31	None	replace
61	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[1]  +  q[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  q[1]  +  q[0];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  q[1]  +  q[0];	  q[n    -    1]    =    v    *    x2    +    q[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
62	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  q[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  q[0];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  q[0];	  q[n    -    1]    =    v    *    x2    +    q[0];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
63	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1]  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1]	  	non-compiled	[CE]  ';'  expected	12	None	add
64	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  int  n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  int  n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    1];    int  n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	  	non-compiled	[CE]  ';'  expected	12	None	add
65	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  order;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	for(int  k  =  n  -  1;  k  <  order;  k  -=  2)  {	  for(int    k    =    n    -    1;    k    <    =    order;    k    -=    2)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
66	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  order;  k  -=  2)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  order;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  order;  k  -=  2)  {	  for(int    k    =    n    -    1;    k    <    =    order;    k    -=    2)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  2;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	add	for(int  k  =  n  -  1;  k  <  2;  k  -=  2)  {	  for(int    k    =    n    -    1;    k    <    =    order;    k    -=    2)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
68	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  2;  k  -=  2)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  2;  k  -=  2)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  2;  k  -=  2)  {	  for(int    k    =    n    -    1;    k    <    =    order;    k    -=    2)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
69	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  int  n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    int  n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	non-compiled	[CE]  ';'  expected	14	None	add
70	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2]	  	non-compiled	[CE]  ';'  expected	14	None	add
71	[BUG]  [BUGGY]  if(n  >  1)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }  [CE]  cannot  find  symbol  k  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  1)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  1)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  1]  +  q[k  -  3];  }	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    1]    +    q[k    -    3];    }    	non-compiled	[CE]  cannot  find  symbol  k	47	None	replace
72	[BUG]  [BUGGY]  if(n  >  0)  {  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1)  =  v  *  q[n  -  2];  }  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  0)  {  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1)  =  v  *  q[n  -  2];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  0)  {  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1)  =  v  *  q[n  -  2];  }	          q[n    -    1]    =    v    *    q[n    -    2];    q[n    -    1)    =    v    *    q[n    -    2];    	non-compiled	[CE]  ']'  expected	42	None	replace
73	[BUG]  [BUGGY]  n  =  n  -  1;  n  =  n  -  2  *  q[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  n  =  n  -  1;  n  =  n  -  2  *  q[0];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	n  =  n  -  1;  n  =  n  -  2  *  q[0];	          n    =    n    -    1;    n    =    n    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
74	[BUG]  [BUGGY]  double  n  =  n  *  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  double  n  =  n  *  2;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	double  n  =  n  *  2;	  double    n    =    n    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
75	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  for(n  -  1]  =  v  *  q[n  -  2];  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  for(n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[n  -  2];  for(n  -  1]  =  v  *  q[n  -  2];	          q[n    -    1]    =    v    *    q[n    -    2];    for(n    -    1]    =    v    *    q[n    -    2];    	non-compiled	[CE]  not  a  statement	41	None	replace
76	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  -  2  *  n)*  q[  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  -  2  *  n)*  q[  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  -  2  *  n)*  q[	  for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    q[k    -    1]    +    q[k    -    1]    +    (k    -    1    -    2    *    n)*    q[    	non-compiled	[CE]  ']'  expected	9	None	replace
77	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2].	          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n    -    1]    =    v    *    x2    +    q[n    -    2].;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
78	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  for(n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  for(n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        q[n        -        2];        q[n    -    1]    =    v    *    q[n    -    2];    for(n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];	  	non-compiled	[CE]  not  a  statement	16	None	add
79	[BUG]  [BUGGY]  if(n  >  1)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [CE]  cannot  find  symbol  k  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  1)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  1)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    1)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  cannot  find  symbol  k	48	None	replace
80	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  2  *  n)*  q[  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  2  *  n)*  q[  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  >=  0;  k  -=  1)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  2  *  n)*  q[	  for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    q[k    -    1]    +    q[k    -    1]    +    (k    -    2    *    n)*    q[    	non-compiled	[CE]  ']'  expected	10	None	replace
81	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[N  -  1]  =  v  *  q[n  -  2];  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2];  q[N  -  1]  =  v  *  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[n  -  2];  q[N  -  1]  =  v  *  q[n  -  2];	          q[n    -    1]    =    v    *    q[n    -    2];    q[N    -    1]    =    v    *    q[n    -    2];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
82	[BUG]  [BUGGY]  n  =  n  -  2  *  q[0];  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  n  =  n  -  2  *  q[0];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	n  =  n  -  2  *  q[0];	  n    =    n    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
83	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  1];  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[n  -  1];	  q[n    -    1]    =    v    *    q[n    -    1];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
84	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2,  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  x2,  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  x2,  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1];	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n    -    1]    =    v    *    x2    +    q[n    -    1];    	non-compiled	[CE]  ';'  expected	13	None	replace
85	[BUG]  [BUGGY]  n  <  0?  0  :  n;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  n  <  0?  0  :  n;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	n  <  0?  0  :  n;	  n    <    =    n?    0    :    n;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  for(int  k  =  n  -  2;  k  <  0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  2;  k  <  0)  {  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  2;  k  <  0)  {	  for(int    k    =    n    -    1;    k    <    0)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
87	[BUG]  [BUGGY]  if(n  >  3)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q[  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  3)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q[  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  3)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q[	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    q[k    -    1]    +    q[k    -    1]    +    (k    -    1    *    n)*    q[    	non-compiled	[CE]  ']'  expected	51	None	replace
88	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  X2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [CE]  cannot  find  symbol  X2  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  X2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        2];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  X2  +  q[n  -  2];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	non-compiled	[CE]  cannot  find  symbol  X2	25	None	add
89	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[n  -  2].;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[n  -  2].;	          q[n    -    1]    =    v    *    q[n    -    2];    q[n    -    1]    =    v    *    q[n    -    2].;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
90	[BUG]  [BUGGY]  q[n  -  1]  =  -n  *  q[1];  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  -n  *  q[1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  -n  *  q[1];	  q[n    -    1]    =    -n    *    q[n    -    2];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
91	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  1]  +  q[k  -  1]  +  (k  -  1  *  n)*  q	  if(n    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    q[k    -    1]    +    q[k    -    1]    +    (k    -    1    -    2    *    n)*    q    	non-compiled	[CE]  ';'  expected	30	None	replace
92	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x2;  }  [CE]  cannot  find  symbol  k  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  0)  {  for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x2;  }  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  0)  {  for(int  k  =  0;  k  <  n;  k++)  {  v  *=  x2;  }	  if(n    >    0)    {    for(int    k    =    0;    k    <    n;    k++)    {    v    *=    x;    }    	non-compiled	[CE]  cannot  find  symbol  k	49	None	replace
93	[BUG]  [BUGGY]  for(n  -  1]  =  v  *  x2  +  q[n  -  1];  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(n  -  1]  =  v  *  x2  +  q[n  -  1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(n  -  1]  =  v  *  x2  +  q[n  -  1];	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    for(n    -    1]    =    v    *    x2    +    q[n    -    1];    	non-compiled	[CE]  not  a  statement	38	None	replace
94	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2].;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        q[n        -        2];        q[n    -    1]    =    v    *    q[n    -    2];    q[n  -  1]  =  v  *  q[n  -  2];  q[n  -  1]  =  v  *  q[n  -  2].;	  	non-compiled	[CE]  <identifier>  expected	16	None	add
95	[BUG]  [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  X2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [CE]  cannot  find  symbol  X2  [FE]    AssertionError    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n  -  1]  =  v  *  x2  +  q[n  -  2];  q[n  -  1]  =  v  *  X2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	                q[n        -        1]        =        v        *        x2        +        q[n        -        1];        q[n    -    1]    =    v    *    x2    +    q[n    -    2];    q[n  -  1]  =  v  *  X2  +  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  2];	  	non-compiled	[CE]  cannot  find  symbol  X2	14	None	add
96	[BUG]  [BUGGY]  for(int  k  =  n  -  1;  k  <  =  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  for(int  k  =  n  -  1;  k  <  =  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	for(int  k  =  n  -  1;  k  <  =  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }	  for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
97	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  0;  k  <  q.length;  ++k)  {  v  *=  x2  +  q[k];  }  [CE]  cannot  find  symbol  k  [FE]                AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  if(n  >  0)  {  for(int  k  =  0;  k  <  q.length;  ++k)  {  v  *=  x2  +  q[k];  }  [BUGGY]      v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	if(n  >  0)  {  for(int  k  =  0;  k  <  q.length;  ++k)  {  v  *=  x2  +  q[k];  }	  if(n    >    0)    {    for(int    k    =    0;    k    <    q.length;    ++k)    {    v    *=    x2;    }    	non-compiled	[CE]  cannot  find  symbol  k	50	None	replace
98	[BUG]  [BUGGY]  n  =  n  -  2  *  q[n  -  1];  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  n  =  n  -  2  *  q[n  -  1];  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	n  =  n  -  2  *  q[n  -  1];	  n    =    n    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
99	[BUG]  [BUGGY]  n  =  n  -  1;  n  =  n  -  2  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  n  =  n  -  1;  n  =  n  -  2  +  1;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	n  =  n  -  1;  n  =  n  -  2  +  1;	          n    =    n    -    1;    n    =    n    -    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
100	[BUG]  [BUGGY]  q[n  -  1]  =  v  *  x2,  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      q[0]  =  1;  final  double  x2=  x  *  x;  final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];      [BUGGY]  q[n  -  1]  =  v  *  x2,  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;  [BUGGY]      for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1349	1349	1	replace	q[n  -  1]  =  v  *  x2,  q[n  -  1];  q[n  -  1]  =  v  *  x2  +  q[n  -  1].;	          q[n    -    1]    =    v    *    x2    +    q[n    -    1];    q[n    -    1]    =    v    *    x2    +    q[n    -    1].;    	non-compiled	[CE]  ';'  expected	53	None	replace
