bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	    double  xk  =  FastMath.pow(inv,  -n);		non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	89	None	add
2	[BUG]  [BUGGY]    double  xk  =  FastMath.pow(function[0],  -n);  [CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]      AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    double  xk  =  FastMath.pow(function[0],  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	    double  xk  =  FastMath.pow(function[0],  -n);		non-compiled	[CE]  variable  xk  is  already  defined  in  method  pow(double[],int,int,double[],int)	89	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    final  double  order  =  Math.pow(inv,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	add	    final  double  order  =  Math.pow(inv,  -n);		compilable	  [FE]  AssertionError  	89	12	add
4	[BUG]  [BUGGY]    final  double  order  =  Math.pow(inv,  -n);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    final  double  order  =  Math.pow(inv,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	    final  double  order  =  Math.pow(inv,  -n);		compilable	  [FE]  AssertionError  	89	12	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  [BUGGY]  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	add	for(int  i  =  0;  i  <  order;  ++i)  {	for  (int  i  =  0;  i  <=  order;  ++i)  {  	compilable	  [FE]  AssertionError  	88	11	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  [BUGGY]  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  order;  ++i)  {	for  (int  i  =  0;  i  <=  order;  ++i)  {  	compilable	  [FE]  AssertionError  	88	11	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]      AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  [BUGGY]  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {	for  (int  i  =  0;  i  <=  order;  ++i)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	88	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderOffset;  ++i)  {  [CE]  cannot  find  symbol  orderOffset  [FE]    AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]  for(int  i  =  0;  i  <  orderOffset;  ++i)  {  [BUGGY]  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  orderOffset;  ++i)  {	for  (int  i  =  0;  i  <=  order;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  orderOffset	88	None	replace
9	[BUG]  [BUGGY]    double  n  =  FastMath.pow(inv,  -n);  [CE]  variable  n  is  already  defined  in  method  pow(double[],int,int,double[],int)  [FE]    AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    double  n  =  FastMath.pow(inv,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	    double  n  =  FastMath.pow(inv,  -n);		non-compiled	[CE]  variable  n  is  already  defined  in  method  pow(double[],int,int,double[],int)	89	None	add
10	[BUG]  [BUGGY]    n  =  Math.pow(inv,  -n);  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    n  =  Math.pow(inv,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	    n  =  Math.pow(inv,  -n);		non-compiled	[CE]  possible  loss  of  precision	89	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    double  order  =  FastMath.pow(inv,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	add	    double  order  =  FastMath.pow(inv,  -n);		compilable	  [FE]  AssertionError  	89	12	add
12	[BUG]  [BUGGY]    double  order  =  FastMath.pow(inv,  -n);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    double  order  =  FastMath.pow(inv,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	    double  order  =  FastMath.pow(inv,  -n);		compilable	  [FE]  AssertionError  	89	12	add
13	[BUG]  [BUGGY]    double  order  =  FastMath.pow(order,  -n);  [CE]  variable  order  might  not  have  been  initialized  [FE]      AssertionError  [CONTEXT]  double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]    double  order  =  FastMath.pow(order,  -n);  [BUGGY]  for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	    double  order  =  FastMath.pow(order,  -n);		non-compiled	[CE]  variable  order  might  not  have  been  initialized	89	None	add
