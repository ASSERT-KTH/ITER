bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  xk  =  FastMath.pow(inv,  n  -  1);	  double    xk    =    FastMath.pow(inv,    -n    -    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  n;  ++i)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0;    i    <    order;    ++i)    {    (int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  0;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0;    i    <    order;    ++i)    {    (int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  >  expected	35	None	replace
4	[BUG]  [BUGGY]  final  double  order  =  Math.pow(inv,  n  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  order  =  Math.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  order  =  Math.pow(inv,  n  -  1);	  final    double    order    =    Math.pow(inv,    -n    -    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	add	for(int  i  =  0;  i  <  n  +  1;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	17	12	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n  +  1;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	17	12	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	add	for(int  i  =  0;  i  <  n  +  2;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	17	11	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  ++i)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n  +  2;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	17	11	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0;    i    <    order;    ++i)    {    int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  >  expected	6	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  for(int  i  =  0;  i  <  inv;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  for(int  i  =  0;  i  <  inv;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    inv;    ++i)    {    for(int  i  =  0;  i  <  inv;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  For(int  i  =  0;  i  <  inv;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  For(int  i  =  0;  i  <  inv;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    inv;    ++i)    {    For(int  i  =  0;  i  <  inv;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	27	None	add
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  int  i  =  0;  i  <  inv;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  int  i  =  0;  i  <  inv;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    inv;    ++i)    {    int  i  =  0;  i  <  inv;  ++i)  {	  	non-compiled	[CE]  >  expected	27	None	add
13	[BUG]  [BUGGY]  n  =  Math.pow(xk,  inv);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  n  =  Math.pow(xk,  inv);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	n  =  Math.pow(xk,  inv);	  n    =    Math.pow(inv,    -xk);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  xk  =  FastMath.pow(inv,  n  +  1);	  double    xk    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  xk;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	add	for(int  i  =  0;  i  <  xk;  ++i)  {	  for(int    i    =    0;    i    <    inv;    ++i)    {    	compilable	  [FE]  AssertionError  	28	12	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  xk;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  xk;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  xk;  ++i)  {	  for(int    i    =    0;    i    <    inv;    ++i)    {    	compilable	  [FE]  AssertionError  	28	12	replace
17	[BUG]  [BUGGY]  double  order  =  FastMath.pow(n,  -xk);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(n,  -xk);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(n,  -xk);	  double    order    =    FastMath.pow(n,    -n);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  for(int  i  =  0;  i  <  n;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  for(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    n;    ++i)    {    for(int  i  =  0;  i  <  n;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  n;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    n;    ++i)    {    For(int  i  =  0;  i  <  n;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
20	[BUG]  [BUGGY]  final  double  order  =  Math.pow(inv,  n  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  order  =  Math.pow(inv,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  order  =  Math.pow(inv,  n  +  1);	  final    double    order    =    Math.pow(inv,    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  final  double  order  =  Math.pow(inv,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  order  =  Math.pow(inv,  0);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  order  =  Math.pow(inv,  0);	  final    double    order    =    Math.pow(inv,    -1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  n  =  FastMath.pow(inv,  -n);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  n  =  FastMath.pow(inv,  -n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	n  =  FastMath.pow(inv,  -n);	          double    order    =    FastMath.pow(inv,    -n);    double    n    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
23	[BUG]  [BUGGY]  Double  order  =  FastMath.pow(inv,  -n);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  Double  order  =  FastMath.pow(inv,  -n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	Double  order  =  FastMath.pow(inv,  -n);	          double    order    =    FastMath.pow(inv,    -n);    Double    order    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  double  order  =  FastMath.pow(inv,  n  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(inv,  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(inv,  n  +  1);	  double    order    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
25	[BUG]  [BUGGY]  n  =  Math.pow(xk,  -n  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  n  =  Math.pow(xk,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	n  =  Math.pow(xk,  -n  +  1);	  n    =    Math.pow(inv,    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
26	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  xk  =  FastMath.pow(function[0],  n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  xk  =  FastMath.pow(function[0],  n  +  1);	  double    xk    =    FastMath.pow(function[0],    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    resultOffset;    ++i)    {    for(int  i  =  0;  i  <  resultOffset;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  For(int  i  =  0;  i  <  resultOffset;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  For(int  i  =  0;  i  <  resultOffset;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    resultOffset;    ++i)    {    For(int  i  =  0;  i  <  resultOffset;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  int  i  =  0;  i  <  resultOffset;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  int  i  =  0;  i  <  resultOffset;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    resultOffset;    ++i)    {    int  i  =  0;  i  <  resultOffset;  ++i)  {	  	non-compiled	[CE]  >  expected	18	None	add
30	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  maxOrder);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  xk  =  FastMath.pow(inv,  n  -  maxOrder);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  xk  =  FastMath.pow(inv,  n  -  maxOrder);	  double    xk    =    FastMath.pow(inv,    -n    -    maxOrder);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
31	[BUG]  [BUGGY]  final  double  n  =  Math.pow(inv,  -n);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  n  =  Math.pow(inv,  -n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  n  =  Math.pow(inv,  -n);	          final    double    order    =    Math.pow(inv,    -n);    final    double    n    =    Math.pow(inv,    -n);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
32	[BUG]  [BUGGY]  double  order  =  FastMath.pow(inv,  n  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(inv,  n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(inv,  n  -  1);	  double    order    =    FastMath.pow(inv,    -n    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
33	[BUG]  [BUGGY]  final  double  xk  =  FastMath.pow(inv,  -n);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  xk  =  FastMath.pow(inv,  -n);	          final    double    order    =    Math.pow(inv,    -n);    final    double    xk    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
34	[BUG]  [BUGGY]  final  double  xk  =  FastMath.pow(inv,  -1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  xk  =  FastMath.pow(inv,  -1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  xk  =  FastMath.pow(inv,  -1);	          final    double    order    =    Math.pow(inv,    -n);    final    double    xk    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
35	[BUG]  [BUGGY]  final  double  order  =  Math.pow(operandOffset,  -n  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  order  =  Math.pow(operandOffset,  -n  -  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  order  =  Math.pow(operandOffset,  -n  -  1);	  final    double    order    =    Math.pow(inv,    -n    -    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  n  =  Math.pow(inv,  -n  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  n  =  Math.pow(inv,  -n  *  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	n  =  Math.pow(inv,  -n  *  1);	  n    =    Math.pow(inv,    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
37	[BUG]  [BUGGY]  final  double  xxk  =  FastMath.pow(inv,  -n);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  xxk  =  FastMath.pow(inv,  -n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  xxk  =  FastMath.pow(inv,  -n);	          final    double    order    =    Math.pow(inv,    -n);    final    double    xk    =    FastMath.pow(inv,    -n);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  if(i  <  0)  {  for(int  i  =  0;  i  <  inv;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  if(i  <  0)  {  for(int  i  =  0;  i  <  inv;  ++i)  {  }  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    inv;    ++i)    {    if(i  <  0)  {  for(int  i  =  0;  i  <  inv;  ++i)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  1;  i  <  inv;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	add	for(int  i  =  1;  i  <  inv;  ++i)  {	  for(int    i    =    0;    i    <    inv;    ++i)    {    	compilable	  [FE]  AssertionError  	28	12	replace
40	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  inv;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  1;  i  <  inv;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  1;  i  <  inv;  ++i)  {	  for(int    i    =    0;    i    <    inv;    ++i)    {    	compilable	  [FE]  AssertionError  	28	12	replace
41	[BUG]  [BUGGY]  double  order  =  FastMath.pow(n,  -n  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(n,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(n,  -n  +  1);	  double    order    =    FastMath.pow(n,    -n);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
42	[BUG]  [BUGGY]  double  order  =  FastMath.pow(inv,  -n  *  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(inv,  -n  *  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(inv,  -n  *  1);	  double    order    =    FastMath.pow(inv,    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
43	[BUG]  [BUGGY]  double  order  =  FastMath.pow(inv,  n);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(inv,  n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(inv,  n);	  double    order    =    FastMath.pow(inv,    -1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
44	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(inv,  -n  -  operandOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  xk  =  FastMath.pow(inv,  -n  -  operandOffset);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  xk  =  FastMath.pow(inv,  -n  -  operandOffset);	  double    xk    =    FastMath.pow(inv,    -n    -    maxOrder);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
45	[BUG]  [BUGGY]  final  double  order  =  Math.pow(operandOffset,  -n  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  order  =  Math.pow(operandOffset,  -n  +  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  order  =  Math.pow(operandOffset,  -n  +  1);	  final    double    order    =    Math.pow(inv,    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
46	[BUG]  [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  xk  =  FastMath.pow(function[0],  -n  *  1);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  xk  =  FastMath.pow(function[0],  -n  *  1);	  double    xk    =    FastMath.pow(function[0],    -n    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
47	[BUG]  [BUGGY]  n  =  Math.pow(xk,  -inv);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  n  =  Math.pow(xk,  -inv);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	n  =  Math.pow(xk,  -inv);	  n    =    Math.pow(inv,    -xk);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  (int  i  =  0;  i  <  resultOffset;  ++i)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  (int  i  =  0;  i  <  resultOffset;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    resultOffset;    ++i)    {    (int  i  =  0;  i  <  resultOffset;  ++i)  {	  	non-compiled	[CE]  ')'  expected	18	None	add
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  order;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  order;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  order;  ++i)  {	  for(int    i    =    0;    i    <    order;    ++i)    {    int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  >  expected	6	None	replace
50	[BUG]  [BUGGY]  double  order  =  FastMath.pow(xk,  -n);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(xk,  -n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(xk,  -n);	  double    order    =    FastMath.pow(n,    -n);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  if(i  <  inv;  ++i)  {  continue;  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  inv;  ++i)  {  if(i  <  inv;  ++i)  {  continue;  }  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    inv;    ++i)    {    if(i  <  inv;  ++i)  {  continue;  }	  	non-compiled	[CE]  ')'  expected	27	None	add
52	[BUG]  [BUGGY]  double  order  =  FastMath.pow(inv,  n  -  maxOrder);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  double  order  =  FastMath.pow(inv,  n  -  maxOrder);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	double  order  =  FastMath.pow(inv,  n  -  maxOrder);	  double    order    =    FastMath.pow(inv,    -n    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
53	[BUG]  [BUGGY]  final  double  order  =  Math.pow(Integer.MIN_VALUE,  -n);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  order  =  Math.pow(Integer.MIN_VALUE,  -n);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  order  =  Math.pow(Integer.MIN_VALUE,  -n);	          final    double    order    =    Math.pow(inv,    -n);    final    double    order    =    Math.pow(inv,    -n);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  order;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  order;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  order;  ++i)  {	  for(int    i    =    0;    i    <    order;    ++i)    {    For(int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  '.class'  expected	5	None	replace
55	[BUG]  [BUGGY]  final  double  order  =  Math.pow(inv,  xk);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  final  double  order  =  Math.pow(inv,  xk);  [BUGGY]      for  (int  i  =  0;  i  <=  order;  ++i)  {  function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	final  double  order  =  Math.pow(inv,  xk);	  final    double    order    =    Math.pow(inv,    -1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  double  xk  =  FastMath.pow(inv,  -n);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  resultOffset;  ++i)  {  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    resultOffset;    ++i)    {    double  xk  =  FastMath.pow(inv,  -n);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  double  xk  =  FastMath.pow(inv,  -n);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  double  xk  =  FastMath.pow(inv,  -n);  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int    i    =    0;    i    <    n;    ++i)    {    double  xk  =  FastMath.pow(inv,  -n);	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  order;  ++i)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  xk  =  FastMath.pow(operand[operandOffset],  n  -  maxOrder);  for  (int  i  =  maxOrder;  i  >  0;  --i)  {  function[i]  =  xk;  xk  *=  operand[operandOffset];  }  function[0]  =  xk;  }  else  {  final  double  inv  =  1.0  /  operand[operandOffset];  double  xk  =  FastMath.pow(inv,  -n);      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  order;  ++i)  {  [BUGGY]      function[i]  =  xk;  xk  *=  inv;  }  }  [CLASS]  DSCompiler  [METHOD]  pow  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  coefficient  inv  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.2886751345948129	896	896	1	replace	for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  order;  ++i)  {	  for(int    i    =    0;    i    <    order;    ++i)    {    (int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
