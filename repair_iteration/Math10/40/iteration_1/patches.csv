bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  resultOffset);  [CE]  final  parameter  n  may  not  be  assigned  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.max(resultOffset,  resultOffset);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(resultOffset,  resultOffset);	      n    =    Math.max(resultOffset,    n);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	3	None	replace
2	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(operand[1]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
3	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(operand[1]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(operand[1]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
5	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(operand[1]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(function[1]);	  function[0]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	10	replace
7	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(function[1]);	  function[0]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	10	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.sqrt(result[2]);	  function[0]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	10	replace
9	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.sqrt(result[2]);	  function[0]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	10	replace
10	[BUG]  [BUGGY]  n  =  Math.max(result,  resultOffset,  n);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.max(result,  resultOffset,  n);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  resultOffset,  n);	      n    =    Math.max(result,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	13	None	replace
11	[BUG]  [BUGGY]  n  =  Math.max(result,  n  +  1);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.max(result,  n  +  1);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n  +  1);	      n    =    Math.max(result,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	13	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);	  	compilable	  [FE]  AssertionError  	4	1	add
13	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);	  	compilable	  [FE]  AssertionError  	4	1	add
14	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  [CE]  cannot  find  symbol  opOffset  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[opOffset]);	  	non-compiled	[CE]  cannot  find  symbol  opOffset	4	None	add
15	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  Function[0]  =  FastMath.cbrt(operand[operandOffset]);  [CE]  cannot  find  symbol  Function  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  Function[0]  =  FastMath.cbrt(operand[operandOffset]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[operandOffset]);    Function[0]  =  FastMath.cbrt(operand[operandOffset]);	  	non-compiled	[CE]  cannot  find  symbol  Function	4	None	add
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
17	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
19	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
21	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
22	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.min(resultOffset,  2);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.min(resultOffset,  2);	      n    =    Math.min(resultOffset,    n);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	10	None	replace
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
24	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
25	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
26	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
27	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  Function[0]  =  FastMath.sqrt(result[1]);  [CE]  cannot  find  symbol  Function  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  Function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(result[1]);    Function[0]  =  FastMath.sqrt(result[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	8	None	add
28	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset)/  2  +  1;  [CE]  final  parameter  n  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.abs(resultOffset)/  2  +  1;  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.abs(resultOffset)/  2  +  1;	      n    =    Math.abs(resultOffset)/    2;    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	2	None	replace
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	10	replace
30	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	10	replace
31	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset  +  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.abs(resultOffset  +  1);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.abs(resultOffset  +  1);	      n    =    Math.abs(resultOffset);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	1	None	replace
32	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset  +  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.abs(resultOffset  +  2);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.abs(resultOffset  +  2);	      n    =    Math.abs(resultOffset);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	1	None	replace
33	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]          AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  1);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.min(resultOffset,  resultOffset  +  1);	      n    =    Math.min(resultOffset,    resultOffset);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	11	None	replace
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	10	replace
35	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	10	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  AssertionError  	15	1	replace
37	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  AssertionError  	15	1	replace
38	[BUG]  [BUGGY]  double  n  =  Math.abs(resultOffset  +  1);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  double  n  =  Math.abs(resultOffset  +  1);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	double  n  =  Math.abs(resultOffset  +  1);	      double    n    =    Math.abs(resultOffset);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	12	None	replace
39	[BUG]  [BUGGY]  double  n  =  Math.abs(resultOffset  +  2);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]              AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  double  n  =  Math.abs(resultOffset  +  2);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	double  n  =  Math.abs(resultOffset  +  2);	      double    n    =    Math.abs(resultOffset);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	12	None	replace
40	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
41	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
42	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
43	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
45	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	9	add
46	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]            AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.max(resultOffset,  2);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(resultOffset,  2);	      n    =    Math.max(resultOffset,    n);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	3	None	replace
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
48	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(result[1]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
50	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(result[1]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
51	[BUG]  [BUGGY]  n  =  Math.max(result,  2);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.max(result,  2);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  2);	      n    =    Math.max(result,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	13	None	replace
52	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  [CE]  cannot  find  symbol  Function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(operand[0]);    Function[1]  =  FastMath.sqrt(operand[0]);	  	non-compiled	[CE]  cannot  find  symbol  Function	14	None	add
53	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[ondOffset]);  [CE]  cannot  find  symbol  ondOffset  [FE]    AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[ondOffset]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[ondOffset]);	  	non-compiled	[CE]  cannot  find  symbol  ondOffset	4	None	add
54	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[OpcodesOffset]);  [CE]  cannot  find  symbol  OpcodesOffset  [FE]      AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[OpcodesOffset]);  [BUGGY]    xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[OpcodesOffset]);	  	non-compiled	[CE]  cannot  find  symbol  OpcodesOffset	4	None	add
55	[BUG]  [BUGGY]  n  =  Math.max(result,  n  *  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]        AssertionError    [CONTEXT]    final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {    [BUGGY]  n  =  Math.max(result,  n  *  resultOffset);  [BUGGY]    function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n  *  resultOffset);	      n    =    Math.max(result,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	13	None	replace
