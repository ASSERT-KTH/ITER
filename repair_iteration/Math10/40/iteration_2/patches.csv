bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
2	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
4	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
6	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.sqrt(operand[2]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[0]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	10	replace
8	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.sqrt(operand[2]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[0]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	10	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.cbrt(operand[1]);    function[0]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	9	add
10	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.cbrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[1]);    function[0]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	9	add
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.cbrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	9	add
12	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	9	add
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[1]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	10	replace
14	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[1]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	10	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[1]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	9	replace
16	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[1]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	9	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[2]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	10	replace
18	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[2]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	10	replace
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[2]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	10	replace
20	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[2]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	10	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  function[0]  =  FastMath.sqrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.sqrt(function[1]);    function[0]  =  FastMath.sqrt(function[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
22	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  function[0]  =  FastMath.sqrt(function[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  function[0]  =  FastMath.sqrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(function[1]);    function[0]  =  FastMath.sqrt(function[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
23	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  Function[0]  =  FastMath.sqrt(function[1]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  Function[0]  =  FastMath.sqrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(function[1]);    Function[0]  =  FastMath.sqrt(function[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	6	None	add
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  function[1]  =  FastMath.sqrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.sqrt(function[1]);    function[1]  =  FastMath.sqrt(function[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
25	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  function[1]  =  FastMath.sqrt(function[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  function[1]  =  FastMath.sqrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(function[1]);    function[1]  =  FastMath.sqrt(function[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	9	add
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(operand[2]);	  function[0]    =    FastMath.cbrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	10	replace
27	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(operand[2]);	  function[0]    =    FastMath.cbrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	10	replace
28	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
29	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
31	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
33	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	9	add
35	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	9	add
36	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  Function[0]  =  FastMath.sqrt(operand[1]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  Function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(operand[1]);    Function[0]  =  FastMath.sqrt(operand[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	29	None	add
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(result[2]);    function[1]  =  FastMath.sqrt(result[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
38	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  function[1]  =  FastMath.sqrt(result[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(result[2]);    function[1]  =  FastMath.sqrt(result[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
39	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  Function[1]  =  FastMath.sqrt(result[2]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  Function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(result[2]);    Function[1]  =  FastMath.sqrt(result[2]);	  	non-compiled	[CE]  cannot  find  symbol  Function	8	None	add
40	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  function[2]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.sqrt(result[2]);    function[2]  =  FastMath.sqrt(result[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
41	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  function[2]  =  FastMath.sqrt(result[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(result[2]);  function[2]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.sqrt(result[2]);    function[2]  =  FastMath.sqrt(result[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	9	add
42	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
43	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
44	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    Function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	18	None	add
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
46	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  AssertionError  	36	1	add
48	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  AssertionError  	36	1	add
49	[BUG]  [BUGGY]  n  =  Math.max(result,  n,  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  n,  resultOffset);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n,  resultOffset);	  n    =    Math.max(result,    resultOffset,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	10	None	replace
50	[BUG]  [BUGGY]  n  =  Math.max(result,  0,  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  0,  resultOffset);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  0,  resultOffset);	  n    =    Math.max(result,    resultOffset,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	10	None	replace
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(function[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.sqrt(function[2]);	  function[0]    =    FastMath.sqrt(function[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	10	replace
52	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(function[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(function[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.sqrt(function[2]);	  function[0]    =    FastMath.sqrt(function[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	10	replace
53	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(function[1]);	  function[0]    =    FastMath.cbrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	10	replace
54	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(function[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(function[1]);	  function[0]    =    FastMath.cbrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	10	replace
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(result[1]);	  function[0]    =    FastMath.cbrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	10	replace
56	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(result[1]);	  function[0]    =    FastMath.cbrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	10	replace
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]        =        FastMath.sqrt(result[1]);        function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
58	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
59	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  Function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  Function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[0]    =    FastMath.sqrt(result[1]);    Function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	23	None	add
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]        =        FastMath.sqrt(result[1]);        function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
61	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    function[2]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	10	replace
63	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    function[2]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	10	replace
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[0]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	9	add
65	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[0]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	9	add
66	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[0]    =    FastMath.sqrt(operand[0]);    Function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  	non-compiled	[CE]  cannot  find  symbol  Function	44	None	add
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[0]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	9	add
68	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[0]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	9	add
69	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.min(resultOffset,  resultOffset  +  2);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.min(resultOffset,  resultOffset  +  2);	  n    =    Math.min(resultOffset,    resultOffset    +    1);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	33	None	replace
70	[BUG]  [BUGGY]  n  =  Math.max(result,  2  *  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  2  *  resultOffset);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  2  *  resultOffset);	  n    =    Math.max(result,    2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	51	None	replace
71	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.sqrt(result[1]);	  function[0]    =    FastMath.sqrt(result[1]);    Function[0]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	10	replace
72	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.sqrt(result[1]);	  function[0]    =    FastMath.sqrt(result[1]);    Function[0]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	10	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]        =        FastMath.sqrt(result[1]);        function[1]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	9	add
74	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[1]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	9	add
75	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  Function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  Function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[1]    =    FastMath.sqrt(result[1]);    Function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	25	None	add
76	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]        =        FastMath.sqrt(result[1]);        function[1]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	9	add
77	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[1]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	9	add
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[2]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	9	add
79	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[2]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	9	add
80	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[2]);    Function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  	non-compiled	[CE]  cannot  find  symbol  Function	47	None	add
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[2]);    function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	9	add
82	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[2]);  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[2]);    function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	9	add
83	[BUG]  [BUGGY]  n  =  Math.min(resultOffset,  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.min(resultOffset,  1);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.min(resultOffset,  1);	  n    =    Math.min(resultOffset,    2);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	22	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]        =        FastMath.cbrt(operand[operandOffset]);        function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);	  	compilable	  [FE]  AssertionError  	12	1	add
85	[BUG]  [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.cbrt(operand[operandOffset]);        function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);	  	compilable	  [FE]  AssertionError  	12	1	add
86	[BUG]  [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  [CE]  cannot  find  symbol  opOffset  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.cbrt(operand[operandOffset]);        function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);	  	non-compiled	[CE]  cannot  find  symbol  opOffset	12	None	add
87	[BUG]  [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset])  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset])  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.cbrt(operand[operandOffset]);        function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset])	  	non-compiled	[CE]  ';'  expected	12	None	add
88	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);	  function[0]    =    FastMath.sqrt(result[1]);    function[1]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
89	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[1]);	  function[0]    =    FastMath.sqrt(result[1]);    function[1]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
90	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);	  function[0]    =    FastMath.sqrt(result[1]);    function[1]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
91	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);	  function[0]    =    FastMath.sqrt(result[1]);    function[1]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
92	[BUG]  [BUGGY]  n  =  Math.max(result,  n  +  1,  resultOffset);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  n  +  1,  resultOffset);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n  +  1,  resultOffset);	  n    =    Math.max(result,    n    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	11	None	replace
93	[BUG]  [BUGGY]  n  =  Math.max(result,  n  +  1,  nOffset);  [CE]  cannot  find  symbol  nOffset  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  n  +  1,  nOffset);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n  +  1,  nOffset);	  n    =    Math.max(result,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol  nOffset	11	None	replace
94	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(function[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(function[0]);	  function[1]    =    FastMath.cbrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	10	replace
95	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(function[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(function[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(function[0]);	  function[1]    =    FastMath.cbrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	10	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(operand[0]);	  function[1]    =    FastMath.cbrt(operand[0]);    	compilable	  [FE]  AssertionError  	35	9	replace
97	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[0]);  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(operand[0]);	  function[1]    =    FastMath.cbrt(operand[0]);    	compilable	  [FE]  AssertionError  	35	9	replace
98	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  resultOffset  +  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(resultOffset,  resultOffset  +  1);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(resultOffset,  resultOffset  +  1);	  n    =    Math.max(resultOffset,    resultOffset);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	1	None	replace
99	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
100	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
101	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    Function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	non-compiled	[CE]  cannot  find  symbol  Function	40	None	add
102	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
103	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
104	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(function[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.sqrt(function[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    Function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	10	replace
105	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(function[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.sqrt(function[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.sqrt(function[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    Function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	10	replace
106	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  1);  [CE]  final  parameter  n  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(resultOffset,  1);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(resultOffset,  1);	  n    =    Math.max(resultOffset,    2);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	46	None	replace
107	[BUG]  [BUGGY]  n  =  Math.max(result,  n  *  2);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  n  *  2);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n  *  2);	  n    =    Math.max(result,    n    *    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	55	None	replace
108	[BUG]  [BUGGY]  n  =  Math.max(result,  n  *  resultOffset,  xk);  [CE]  no  suitable  method  found  for  max(double[],int,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  n  *  resultOffset,  xk);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n  *  resultOffset,  xk);	  n    =    Math.max(result,    n    *    resultOffset);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,double)	55	None	replace
109	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.cbrt(result[1]);    function[0]  =  FastMath.cbrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	9	add
110	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(result[1]);    function[0]  =  FastMath.cbrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	9	add
111	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.cbrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]    =    FastMath.cbrt(result[1]);    function[1]  =  FastMath.cbrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	9	add
112	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.cbrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.cbrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(result[1]);    function[1]  =  FastMath.cbrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	9	add
113	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.cbrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	9	add
114	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.cbrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	9	add
115	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.cbrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.cbrt(operand[0]);    function[2]  =  FastMath.cbrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	9	add
116	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.cbrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.cbrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.cbrt(operand[0]);    function[2]  =  FastMath.cbrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	9	add
117	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  Function[1]  =  FastMath.cbrt(operand[0]);  [CE]  cannot  find  symbol  Function  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  Function[1]  =  FastMath.cbrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.cbrt(operand[0]);    Function[1]  =  FastMath.cbrt(operand[0]);	  	non-compiled	[CE]  cannot  find  symbol  Function	34	None	add
118	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	10	replace
119	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	10	replace
120	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	9	replace
121	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[1]);    function[2]    =    FastMath.sqrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	9	replace
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.cbrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
123	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.cbrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
124	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.cbrt(operand[1]);    function[2]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
125	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.cbrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.cbrt(operand[1]);    function[2]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
126	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.cbrt(operand[1]);    function[0]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
127	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.cbrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.cbrt(operand[1]);    function[0]  =  FastMath.cbrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
128	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[2]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	9	add
129	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[2]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	9	add
130	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [CE]  cannot  find  symbol  Function  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[2]    =    FastMath.sqrt(operand[0]);    Function[1]  =  FastMath.sqrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);	  	non-compiled	[CE]  cannot  find  symbol  Function	42	None	add
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[2]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	9	add
132	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[2]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[2]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);  function[2]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	9	add
133	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  n  =  FastMath.sqrt(result[0]);  function[1]  =  FastMath.sqrt(result[1]);  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[1]  =  FastMath.sqrt(result[1]);  n  =  FastMath.sqrt(result[0]);  function[1]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[1]    =    FastMath.sqrt(result[1]);    n  =  FastMath.sqrt(result[0]);  function[1]  =  FastMath.sqrt(result[1]);	  	non-compiled	[CE]  possible  loss  of  precision	25	None	add
134	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  n  =  FastMath.sqrt(operand[1]);  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[1]);  n  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(operand[1]);    n  =  FastMath.sqrt(operand[1]);	  	non-compiled	[CE]  possible  loss  of  precision	29	None	add
135	[BUG]  [BUGGY]  n  =  Math.max(result,  resultOffset,  2);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  resultOffset,  2);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  resultOffset,  2);	  n    =    Math.max(result,    resultOffset,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	10	None	replace
136	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  Function[0]  =  FastMath.cbrt(result[1]);  [CE]  cannot  find  symbol  Function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  Function[0]  =  FastMath.cbrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(result[1]);    Function[0]  =  FastMath.cbrt(result[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	49	None	add
137	[BUG]  [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.cbrt(operand[operandOffset]);        function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]	  	non-compiled	[CE]  ')'  expected	12	None	add
138	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(function[1]);	  function[1]    =    FastMath.cbrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
139	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(function[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(function[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(function[1]);	  function[1]    =    FastMath.cbrt(operand[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	10	replace
140	[BUG]  [BUGGY]  double  n  =  Math.abs(resultOffset  *  2);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]                  AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  double  n  =  Math.abs(resultOffset  *  2);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	double  n  =  Math.abs(resultOffset  *  2);	  double    n    =    Math.abs(resultOffset    +    2);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	39	None	replace
141	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [CE]  cannot  find  symbol  Function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    Function[1]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	16	None	add
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
143	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	9	add
144	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[0]);    function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	9	replace
145	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[1]);	  function[1]    =    FastMath.sqrt(operand[0]);    function[1]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	9	replace
146	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    function[0]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	9	replace
147	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    function[0]    =    FastMath.sqrt(operand[0]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	9	replace
148	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.cbrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]    =    FastMath.cbrt(operand[1]);    function[2]  =  FastMath.cbrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
149	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.cbrt(operand[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.cbrt(operand[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]    =    FastMath.cbrt(operand[1]);    function[2]  =  FastMath.cbrt(operand[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	9	add
150	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]  +  n);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(function[1]  +  n);	  function[0]    =    FastMath.sqrt(function[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	10	replace
151	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(function[1]  +  n);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]  +  n);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(function[1]  +  n);	  function[0]    =    FastMath.sqrt(function[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	10	replace
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);	  function[0]    =    FastMath.sqrt(result[1]);    function[1]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
153	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(result[1]);  function[1]  =  FastMath.sqrt(result[2]);	  function[0]    =    FastMath.sqrt(result[1]);    function[1]    =    FastMath.sqrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	10	replace
154	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  n  =  FastMath.sqrt(function[0]);  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(function[1]);  n  =  FastMath.sqrt(function[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(function[1]);    n  =  FastMath.sqrt(function[0]);	  	non-compiled	[CE]  possible  loss  of  precision	6	None	add
155	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.cbrt(result[2]);	  function[0]    =    FastMath.cbrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	10	replace
156	[BUG]  [BUGGY]  function[1]  =  FastMath.cbrt(result[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]  =  FastMath.cbrt(result[2]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.cbrt(result[2]);	  function[0]    =    FastMath.cbrt(result[1]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	10	replace
157	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [CE]  cannot  find  symbol  Function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  Function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    Function[1]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	20	None	add
158	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
159	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
160	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]        =        FastMath.sqrt(result[1]);        function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
161	[BUG]  [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.sqrt(result[1]);  function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.sqrt(result[1]);        function[0]    =    FastMath.sqrt(result[1]);    function[0]  =  FastMath.cbrt(result[1]);  function[0]  =  FastMath.sqrt(result[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	9	add
162	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
163	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[0]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
164	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  Function[0]  =  FastMath.sqrt(operand[0]);  [CE]  cannot  find  symbol  Function  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  Function[0]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.sqrt(operand[0]);    Function[0]  =  FastMath.sqrt(operand[0]);	  	non-compiled	[CE]  cannot  find  symbol  Function	36	None	add
165	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[3]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
166	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[3]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[3]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.sqrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[3]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
167	[BUG]  [BUGGY]  n  =  Math.max(result,  0,  2);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  0,  2);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  0,  2);	  n    =    Math.max(result,    2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	51	None	replace
168	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  Function[0]  =  FastMath.cbrt(operand[1]);  [CE]  cannot  find  symbol  Function  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(operand[1]);  Function[0]  =  FastMath.cbrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]    =    FastMath.cbrt(operand[1]);    Function[0]  =  FastMath.cbrt(operand[1]);	  	non-compiled	[CE]  cannot  find  symbol  Function	2	None	add
169	[BUG]  [BUGGY]  n  =  Math.abs(resultOffset  *  2);  [CE]  final  parameter  n  may  not  be  assigned  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.abs(resultOffset  *  2);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.abs(resultOffset  *  2);	  n    =    Math.abs(resultOffset    +    2);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	32	None	replace
170	[BUG]  [BUGGY]  n  =  Math.max(result,  resultOffset,  n  +  1);  [CE]  no  suitable  method  found  for  max(double[],int,int)  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  resultOffset,  n  +  1);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  resultOffset,  n  +  1);	  n    =    Math.max(result,    resultOffset,    n);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int,int)	10	None	replace
171	[BUG]  [BUGGY]  n  =  Math.max(resultOffset,  0);  [CE]  final  parameter  n  may  not  be  assigned  [FE]                AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(resultOffset,  0);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(resultOffset,  0);	  n    =    Math.max(resultOffset,    2);    	non-compiled	[CE]  final  parameter  n  may  not  be  assigned	46	None	replace
172	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  [CE]  cannot  find  symbol  Function  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(operand[0]);  Function[1]  =  FastMath.sqrt(operand[0]);	  function[1]    =    FastMath.sqrt(operand[0]);    Function[1]    =    FastMath.sqrt(operand[0]);    	non-compiled	[CE]  cannot  find  symbol  Function	52	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(result[0]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    Function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  AssertionError  	15	9	replace
174	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(result[0]);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]  =  FastMath.cbrt(result[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(result[0]);	  function[0]    =    FastMath.cbrt(operand[operandOffset]);    Function[0]    =    FastMath.cbrt(operand[operandOffset]);    	compilable	  [FE]  AssertionError  	15	9	replace
175	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
176	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[2]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[2]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);  function[2]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	9	add
177	[BUG]  [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[ondOffset]);  [CE]  cannot  find  symbol  ondOffset  [FE]    AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[ondOffset]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.cbrt(operand[operandOffset]);        function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[ondOffset]);	  	non-compiled	[CE]  cannot  find  symbol  ondOffset	12	None	add
178	[BUG]  [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  [CE]  cannot  find  symbol  opOffset  [FE]      AssertionError    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[operandOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]        =        FastMath.cbrt(operand[operandOffset]);        function[0]    =    FastMath.cbrt(operand[operandOffset]);    function[0]  =  FastMath.cbrt(operand[opOffset]);  function[0]  =  FastMath.cbrt(operand[opOffset]);	  	non-compiled	[CE]  cannot  find  symbol  opOffset	12	None	add
179	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
180	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[1]);    function[0]  =  FastMath.sqrt(operand[1]);  function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[1]);        function[0]    =    FastMath.sqrt(operand[1]);    function[1]  =  FastMath.cbrt(operand[1]);  function[0]  =  FastMath.sqrt(operand[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	9	add
181	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
182	[BUG]  [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.sqrt(operand[0]);  function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]      xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]        =        FastMath.sqrt(operand[0]);        function[1]    =    FastMath.sqrt(operand[0]);    function[1]  =  FastMath.cbrt(operand[0]);  function[1]  =  FastMath.sqrt(operand[0]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	9	add
183	[BUG]  [BUGGY]  n  =  Math.max(result,  n  *  resultOffset  +  1);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]              AssertionError      [CONTEXT]      final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {      [BUGGY]  n  =  Math.max(result,  n  *  resultOffset  +  1);  [BUGGY]      function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	n  =  Math.max(result,  n  *  resultOffset  +  1);	  n    =    Math.max(result,    n    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	11	None	replace
