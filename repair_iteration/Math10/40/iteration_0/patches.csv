bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    n  =  Math.abs(resultOffset);  [CE]  final  parameter  n  may  not  be  assigned  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]    n  =  Math.abs(resultOffset);  [BUGGY]  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	    n  =  Math.abs(resultOffset);		non-compiled	[CE]  final  parameter  n  may  not  be  assigned	81	None	add
2	[BUG]  [BUGGY]    n  =  Math.abs(resultOffset)/  2;  [CE]  final  parameter  n  may  not  be  assigned  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]    n  =  Math.abs(resultOffset)/  2;  [BUGGY]  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	    n  =  Math.abs(resultOffset)/  2;		non-compiled	[CE]  final  parameter  n  may  not  be  assigned	81	None	add
3	[BUG]  [BUGGY]    n  =  Math.max(resultOffset,  n);  [CE]  final  parameter  n  may  not  be  assigned  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]    n  =  Math.max(resultOffset,  n);  [BUGGY]  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	    n  =  Math.max(resultOffset,  n);		non-compiled	[CE]  final  parameter  n  may  not  be  assigned	81	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.cbrt(operand[operandOffset]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  AssertionError  	80	9	replace
5	[BUG]  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[0]  =  FastMath.cbrt(operand[operandOffset]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.cbrt(operand[operandOffset]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  AssertionError  	80	9	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.sqrt(operand[1]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	10	replace
7	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[1]  =  FastMath.sqrt(operand[1]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.sqrt(operand[1]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	10	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[0]  =  FastMath.sqrt(result[1]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	10	replace
9	[BUG]  [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[0]  =  FastMath.sqrt(result[1]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[0]  =  FastMath.sqrt(result[1]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	10	replace
10	[BUG]  [BUGGY]    n  =  Math.min(resultOffset,  n);  [CE]  final  parameter  n  may  not  be  assigned  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]    n  =  Math.min(resultOffset,  n);  [BUGGY]  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	    n  =  Math.min(resultOffset,  n);		non-compiled	[CE]  final  parameter  n  may  not  be  assigned	81	None	add
11	[BUG]  [BUGGY]    n  =  Math.min(resultOffset,  resultOffset);  [CE]  final  parameter  n  may  not  be  assigned  [FE]      AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]    n  =  Math.min(resultOffset,  resultOffset);  [BUGGY]  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	    n  =  Math.min(resultOffset,  resultOffset);		non-compiled	[CE]  final  parameter  n  may  not  be  assigned	81	None	add
12	[BUG]  [BUGGY]    double  n  =  Math.abs(resultOffset);  [CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)  [FE]        AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]    double  n  =  Math.abs(resultOffset);  [BUGGY]  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	    double  n  =  Math.abs(resultOffset);		non-compiled	[CE]  variable  n  is  already  defined  in  method  rootN(double[],int,int,double[],int)	81	None	add
13	[BUG]  [BUGGY]    n  =  Math.max(result,  n);  [CE]  no  suitable  method  found  for  max(double[],int)  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]    n  =  Math.max(result,  n);  [BUGGY]  function[0]  =  FastMath.sqrt(operand[operandOffset]);  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	    n  =  Math.max(result,  n);		non-compiled	[CE]  no  suitable  method  found  for  max(double[],int)	81	None	add
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	add	function[1]  =  FastMath.sqrt(operand[0]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	10	replace
15	[BUG]  [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  final  double[]  result,  final  int  resultOffset)  {    double[]  function  =  new  double[1  +  order];  double  xk;  if  (n  ==  2)  {  [BUGGY]  function[1]  =  FastMath.sqrt(operand[0]);  [BUGGY]  xk=  0.5  /  function[0];  }  else  if  (n  ==  3)  {  function[0]  =  FastMath.cbrt(operand[operandOffset]);  xk=  1.0  /  (3.0  *  function[0]  *  function[0]);  }  else  {  function[0]  =  FastMath.pow(operand[operandOffset],  1.0  /  n);  xk=  1.0  /  (n  *  FastMath.pow(function[0],  n  -  1));  }  final  double  nReciprocal  =  1.0  /  n;  final  double  xReciprocal  =  1.0  /  operand[operandOffset];  [CLASS]  DSCompiler  [METHOD]  rootN  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  int  n  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  result  double  nReciprocal  xReciprocal  xk  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.31622776601683794	950	950	1	replace	function[1]  =  FastMath.sqrt(operand[0]);	function[0]  =  FastMath.sqrt(operand[operandOffset]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	10	replace
