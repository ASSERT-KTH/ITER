bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2;  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  x2;  v  *=  f;	  v    *=    x2;    v    *=    x2);    	compilable	  [FE]  AssertionError  	34	4	replace
2	[BUG]  [BUGGY]  v  *=  x2;  v  *=  f;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2;  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x2;  v  *=  f;	  v    *=    x2;    v    *=    x2);    	compilable	  [FE]  AssertionError  	34	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  v  *=  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  f;  v  *=  x2;	  v    *=    x2;    v    *=    x2);    	compilable	  [FE]  AssertionError  	34	4	replace
4	[BUG]  [BUGGY]  v  *=  f;  v  *=  x2;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  v  *=  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  f;  v  *=  x2;	  v    *=    x2;    v    *=    x2);    	compilable	  [FE]  AssertionError  	34	4	replace
5	[BUG]  [BUGGY]  v  *=  x2;  int  v  *=  f;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2;  int  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x2;  int  v  *=  f;	  v    *=    f;    int    v    *=    f;    	non-compiled	[CE]  ';'  expected	12	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[n  -  1];  v  *=  x2  +  q[n  -  1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    *=    x2    +    q[n    -    1];    v  *=  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	42	4	add
7	[BUG]  [BUGGY]  v  *=  x2  +  q[n  -  1];  v  *=  x2  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[n  -  1];  v  *=  x2  +  q[n  -  1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[n    -    1];    v  *=  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	42	4	add
8	[BUG]  [BUGGY]  v  *=  x2  +  q[n  -  1];  v  *=  x2  +  q[N  -  1];  [CE]  cannot  find  symbol  N  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[n  -  1];  v  *=  x2  +  q[N  -  1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[n    -    1];    v  *=  x2  +  q[N  -  1];	  	non-compiled	[CE]  cannot  find  symbol  N	42	None	add
9	[BUG]  [BUGGY]  v  *=  x2  +  q[n  -  1];  v  *=  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[n  -  1];  v  *=  x2  +  q[n  -  1].;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[n    -    1];    v  *=  x2  +  q[n  -  1].;	  	non-compiled	[CE]  <identifier>  expected	42	None	add
10	[BUG]  [BUGGY]  v  *=  f;  (v  *=  x2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  (v  *=  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  f;  (v  *=  x2;	  v    *=    x2;    (v    *=    x2;    	non-compiled	[CE]  ')'  expected	25	None	replace
11	[BUG]  [BUGGY]  double  v  *=  y;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  double  v  *=  y;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	double  v  *=  y;	  double    v    *=    f;    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  =  v  *  x  +  q[n  -  1];	  v    =    v    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	45	4	replace
13	[BUG]  [BUGGY]  v  =  v  *  x  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  =  v  *  x  +  q[n  -  1];	  v    =    v    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	45	4	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  v  *=  v;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    *=    v;    v  *=  v;	  	compilable	  [FE]  AssertionError  	8	4	add
15	[BUG]  [BUGGY]  v  *=  v;  v  *=  v;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  v  *=  v;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    v;    v  *=  v;	  	compilable	  [FE]  AssertionError  	8	4	add
16	[BUG]  [BUGGY]  v  *=  v;  int  v  *=  v;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  int  v  *=  v;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    v;    int  v  *=  v;	  	non-compiled	[CE]  ';'  expected	8	None	add
17	[BUG]  [BUGGY]  v  *=  v;  v  *=  v);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  v  *=  v);  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    v;    v  *=  v);	  	non-compiled	[CE]  ';'  expected	8	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  f  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  =  x  *  f  +  q[n  -  1];	  v    =    x    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	3	4	replace
19	[BUG]  [BUGGY]  v  =  x  *  f  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  f  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  =  x  *  f  +  q[n  -  1];	  v    =    x    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	3	4	replace
20	[BUG]  [BUGGY]  double  v  =  n  *  f  +  q[n  -  1];  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  double  v  =  n  *  f  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	double  v  =  n  *  f  +  q[n  -  1];	  double    v    =    x    *    f    +    q[n    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	18	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  =  v  *  x  +  q[0];	  v    =    v    *    x2    +    q[0];    	compilable	  [FE]  AssertionError  	41	4	replace
22	[BUG]  [BUGGY]  v  =  v  *  x  +  q[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  =  v  *  x  +  q[0];	  v    =    v    *    x2    +    q[0];    	compilable	  [FE]  AssertionError  	41	4	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  x2  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    =    x    *    x2    +    q[0];    v  =  x  *  x2  +  q[0];	  	compilable	  [FE]  AssertionError  	15	4	add
24	[BUG]  [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  x2  +  q[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  x2  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    x    *    x2    +    q[0];    v  =  x  *  x2  +  q[0];	  	compilable	  [FE]  AssertionError  	15	4	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  x2  +  q[1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    =    x    *    x2    +    q[0];    v  =  x  *  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	15	4	add
26	[BUG]  [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  x2  +  q[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  x2  +  q[1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    x    *    x2    +    q[0];    v  =  x  *  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	15	4	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[n  -  1];  v  =  v  *  x2  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    =    v    *    x2    +    q[n    -    1];    v  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	44	4	add
28	[BUG]  [BUGGY]  v  =  v  *  x2  +  q[n  -  1];  v  =  v  *  x2  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[n  -  1];  v  =  v  *  x2  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    v    *    x2    +    q[n    -    1];    v  =  v  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	44	4	add
29	[BUG]  [BUGGY]  v  =  v  *  x2  +  q[n  -  1];  v  =  v  *  x2  +  q[N  -  1];  [CE]  cannot  find  symbol  N  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[n  -  1];  v  =  v  *  x2  +  q[N  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    v    *    x2    +    q[n    -    1];    v  =  v  *  x2  +  q[N  -  1];	  	non-compiled	[CE]  cannot  find  symbol  N	44	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  v;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	coeff  *=  v;	  x    *=    v;    coeff    *=    v;    	compilable	  [FE]  AssertionError  	32	4	replace
31	[BUG]  [BUGGY]  coeff  *=  v;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  v;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff  *=  v;	  x    *=    v;    coeff    *=    v;    	compilable	  [FE]  AssertionError  	32	4	replace
32	[BUG]  [BUGGY]  x  *=  f;  coeff  *=  v;  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]                  AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  x  *=  f;  coeff  *=  v;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	x  *=  f;  coeff  *=  v;	  x    *=    v;    coeff    *=    v;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	32	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    =    v    *    x2    +    q[0];    v  =  v  *  x2  +  q[0];	  	compilable	  [FE]  AssertionError  	40	4	add
34	[BUG]  [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    v    *    x2    +    q[0];    v  =  v  *  x2  +  q[0];	  	compilable	  [FE]  AssertionError  	40	4	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    =    v    *    x2    +    q[0];    v  =  v  *  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	40	4	add
36	[BUG]  [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    v    *    x2    +    q[0];    v  =  v  *  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	40	4	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x;  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  x;  v  *=  f;	  v    *=    f;    v    *=    f;    	compilable	  [FE]  AssertionError  	11	4	replace
38	[BUG]  [BUGGY]  v  *=  x;  v  *=  f;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x;  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x;  v  *=  f;	  v    *=    f;    v    *=    f;    	compilable	  [FE]  AssertionError  	11	4	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  v;  coeff  *=  f;	  x    *=    v;    coeff    *=    f;    	compilable	  [FE]  AssertionError  	39	4	replace
40	[BUG]  [BUGGY]  v  *=  v;  coeff  *=  f;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  v;  coeff  *=  f;	  x    *=    v;    coeff    *=    f;    	compilable	  [FE]  AssertionError  	39	4	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  f  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  =  x  *  f  +  q[0];	  v    =    x    *    x2    +    q[0];    	compilable	  [FE]  AssertionError  	16	4	replace
42	[BUG]  [BUGGY]  v  =  x  *  f  +  q[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  f  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  =  x  *  f  +  q[0];	  v    =    x    *    x2    +    q[0];    	compilable	  [FE]  AssertionError  	16	4	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[0];  v  *=  x2  +  q[0];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    *=    x2    +    q[0];    v  *=  x2  +  q[0];	  	compilable	  [FE]  AssertionError  	30	4	add
44	[BUG]  [BUGGY]  v  *=  x2  +  q[0];  v  *=  x2  +  q[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[0];  v  *=  x2  +  q[0];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[0];    v  *=  x2  +  q[0];	  	compilable	  [FE]  AssertionError  	30	4	add
45	[BUG]  [BUGGY]  v  *=  x2  +  q[0];  int  v  *=  x2  +  q[0];  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[0];  int  v  *=  x2  +  q[0];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[0];    int  v  *=  x2  +  q[0];	  	non-compiled	[CE]  ';'  expected	30	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[0];  v  *=  x2  +  q[1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    *=    x2    +    q[0];    v  *=  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	30	4	add
47	[BUG]  [BUGGY]  v  *=  x2  +  q[0];  v  *=  x2  +  q[1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[0];  v  *=  x2  +  q[1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[0];    v  *=  x2  +  q[1];	  	compilable	  [FE]  AssertionError  	30	4	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[n  -  1];  v  =  x  *  x2  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    =    x    *    x2    +    q[n    -    1];    v  =  x  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	2	4	add
49	[BUG]  [BUGGY]  v  =  x  *  x2  +  q[n  -  1];  v  =  x  *  x2  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[n  -  1];  v  =  x  *  x2  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    x    *    x2    +    q[n    -    1];    v  =  x  *  x2  +  q[n  -  1];	  	compilable	  [FE]  AssertionError  	2	4	add
50	[BUG]  [BUGGY]  v  =  x  *  x2  +  q[n  -  1];  v  =  x  *  x2  +  q[N  -  1];  [CE]  cannot  find  symbol  N  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[n  -  1];  v  =  x  *  x2  +  q[N  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    x    *    x2    +    q[n    -    1];    v  =  x  *  x2  +  q[N  -  1];	  	non-compiled	[CE]  cannot  find  symbol  N	2	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f  +  q[n  -  1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  f  +  q[n  -  1];	  v    *=    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	43	4	replace
52	[BUG]  [BUGGY]  v  *=  f  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f  +  q[n  -  1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  f  +  q[n  -  1];	  v    *=    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	43	4	replace
53	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[n];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  x2  +  q[n];	  v    *=    x2    +    q[k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	replace
54	[BUG]  [BUGGY]  v  *=  x2  +  q[n];  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[n];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x2  +  q[n];	  v    *=    x2    +    q[k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	replace
55	[BUG]  [BUGGY]  double  x  =  -n  *  q[n  -  2];  [CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  double  x  =  -n  *  q[n  -  2];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	double  x  =  -n  *  q[n  -  2];	  double    x    =    -n    *    q[n    -    1];    	non-compiled	[CE]  variable  x  is  already  defined  in  method  atan(double[],int,double[],int)	37	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    f;    v  *=  f;  v  *=  f;  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v        *=        f;        v    *=    f;    v  *=  f;  v  *=  f;	  	compilable	  [FE]  AssertionError  	10	4	add
57	[BUG]  [BUGGY]  v    *=    f;    v  *=  f;  v  *=  f;  v  *=  f;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    f;    v  *=  f;  v  *=  f;  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        f;        v    *=    f;    v  *=  f;  v  *=  f;	  	compilable	  [FE]  AssertionError  	10	4	add
58	[BUG]  [BUGGY]  v    *=    f;    v  *=  f;  v  *=  f;  v  *=  f);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    f;    v  *=  f;  v  *=  f;  v  *=  f);  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        f;        v    *=    f;    v  *=  f;  v  *=  f);	  	non-compiled	[CE]  ';'  expected	10	None	add
59	[BUG]  [BUGGY]  v  *=  f;  int  v  *=  x2;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  int  v  *=  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  f;  int  v  *=  x2;	  v    *=    x2;    int    v    *=    x2;    	non-compiled	[CE]  ';'  expected	24	None	replace
60	[BUG]  [BUGGY]  (v  *=  f);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  (v  *=  f);  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	(v  *=  f);	  v    *=    f;    (v    *=    f);    	non-compiled	[CE]  not  a  statement	13	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  x2  +  q[1];	  v    *=    x2    +    q[0];    	compilable	  [FE]  AssertionError  	31	4	replace
62	[BUG]  [BUGGY]  v  *=  x2  +  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x2  +  q[1];	  v    *=    x2    +    q[0];    	compilable	  [FE]  AssertionError  	31	4	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v    *=    f;    coeff    *=    f;    v  *=  f;  coeff  *=  f;	  	compilable	  [FE]  AssertionError  	26	4	add
64	[BUG]  [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  coeff  *=  f;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    f;    coeff    *=    f;    v  *=  f;  coeff  *=  f;	  	compilable	  [FE]  AssertionError  	26	4	add
65	[BUG]  [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  coeff  *=  f);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  coeff  *=  f);  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    f;    coeff    *=    f;    v  *=  f;  coeff  *=  f);	  	non-compiled	[CE]  ';'  expected	26	None	add
66	[BUG]  [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  Coeff  *=  f;  [CE]  cannot  find  symbol  Coeff  [FE]        AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  Coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    f;    coeff    *=    f;    v  *=  f;  Coeff  *=  f;	  	non-compiled	[CE]  cannot  find  symbol  Coeff	26	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  x;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	coeff  *=  x;	  coeff    *=    f;    	compilable	  [FE]  AssertionError  	29	4	replace
68	[BUG]  [BUGGY]  coeff  *=  x;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  x;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff  *=  x;	  coeff    *=    f;    	compilable	  [FE]  AssertionError  	29	4	replace
69	[BUG]  [BUGGY]  coeff  *=  y;  [CE]  cannot  find  symbol  y  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  y;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff  *=  y;	  coeff    *=    f;    	non-compiled	[CE]  cannot  find  symbol  y	29	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  x;  coeff  *=  f;	  v    *=    f;    coeff    *=    f;    	compilable	  [FE]  AssertionError  	27	4	replace
71	[BUG]  [BUGGY]  v  *=  x;  coeff  *=  f;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x;  coeff  *=  f;	  v    *=    f;    coeff    *=    f;    	compilable	  [FE]  AssertionError  	27	4	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v        *=        x2;        v    *=    x2;    v  *=  x2;  v  *=  x2;	  	compilable	  [FE]  AssertionError  	22	4	add
73	[BUG]  [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  x2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        x2;        v    *=    x2;    v  *=  x2;  v  *=  x2;	  	compilable	  [FE]  AssertionError  	22	4	add
74	[BUG]  [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  x1;  [CE]  cannot  find  symbol  x1  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  x1;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        x2;        v    *=    x2;    v  *=  x2;  v  *=  x1;	  	non-compiled	[CE]  cannot  find  symbol  x1	22	None	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	coeff    *=    f;    coeff  *=  f;	  	compilable	  [FE]  AssertionError  	28	4	add
76	[BUG]  [BUGGY]  coeff  *=  f;  coeff  *=  f;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff    *=    f;    coeff  *=  f;	  	compilable	  [FE]  AssertionError  	28	4	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  v  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	coeff    *=    f;    v  *=  f;	  	compilable	  [FE]  AssertionError  	28	4	add
78	[BUG]  [BUGGY]  coeff  *=  f;  v  *=  f;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  v  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff    *=    f;    v  *=  f;	  	compilable	  [FE]  AssertionError  	28	4	add
79	[BUG]  [BUGGY]  coeff  *=  f;  Coeff  *=  f;  [CE]  cannot  find  symbol  Coeff  [FE]        AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  Coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff    *=    f;    Coeff  *=  f;	  	non-compiled	[CE]  cannot  find  symbol  Coeff	28	None	add
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  q[0]  +  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  q[0]  +  x2;	  v    *=    x2    +    q[0];    	compilable	  [FE]  AssertionError  	31	4	replace
81	[BUG]  [BUGGY]  v  *=  q[0]  +  x2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  q[0]  +  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  q[0]  +  x2;	  v    *=    x2    +    q[0];    	compilable	  [FE]  AssertionError  	31	4	replace
82	[BUG]  [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  x2);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  x2);  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        x2;        v    *=    x2;    v  *=  x2;  v  *=  x2);	  	non-compiled	[CE]  ';'  expected	22	None	add
83	[BUG]  [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2);  v  *=  x2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2);  v  *=  x2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        x2;        v    *=    x2;    v  *=  x2);  v  *=  x2;	  	non-compiled	[CE]  ';'  expected	22	None	add
84	[BUG]  [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  coefF  *=  f;  [CE]  cannot  find  symbol  coefF  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  coeff  *=  f;  v  *=  f;  coefF  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    f;    coeff    *=    f;    v  *=  f;  coefF  *=  f;	  	non-compiled	[CE]  cannot  find  symbol  coefF	26	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;  }  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	coeff    *=    f;    q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;  }	  	compilable	  [FE]  AssertionError  	28	4	add
86	[BUG]  [BUGGY]  coeff  *=  f;  q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;  }  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff    *=    f;    q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;  }	  	compilable	  [FE]  AssertionError  	28	4	add
87	[BUG]  [BUGGY]  coeff  *=  f;  q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  coeff  *=  f;  q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	coeff    *=    f;    q[n  -  1]  =  -x  *  q[n  -  2];  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  coeff  *=  f;	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
88	[BUG]  [BUGGY]  v  *=  x2  +  q[0];  (v  *=  x2  +  q[0];  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[0];  (v  *=  x2  +  q[0];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[0];    (v  *=  x2  +  q[0];	  	non-compiled	[CE]  ')'  expected	30	None	add
89	[BUG]  [BUGGY]  v  *=  x2  +  q[n  -  1];  (v  *=  x2  +  q[n  -  1];  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2  +  q[n  -  1];  (v  *=  x2  +  q[n  -  1];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    x2    +    q[n    -    1];    (v  *=  x2  +  q[n  -  1];	  	non-compiled	[CE]  ')'  expected	42	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  =  v  *  x2  +  q[1];	  v    =    v    *    x2    +    q[0];    	compilable	  [FE]  AssertionError  	41	4	replace
91	[BUG]  [BUGGY]  v  =  v  *  x2  +  q[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  =  v  *  x2  +  q[1];	  v    =    v    *    x2    +    q[0];    	compilable	  [FE]  AssertionError  	41	4	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  v  *=  q[0];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  *=  f;  v  *=  q[0];	  v    *=    f;    v    *=    f;    	compilable	  [FE]  AssertionError  	11	4	replace
93	[BUG]  [BUGGY]  v  *=  f;  v  *=  q[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  v  *=  q[0];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  f;  v  *=  q[0];	  v    *=    f;    v    *=    f;    	compilable	  [FE]  AssertionError  	11	4	replace
94	[BUG]  [BUGGY]  v  *=  f;  int  v  *=  q[0];  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  int  v  *=  q[0];  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  f;  int  v  *=  q[0];	  v    *=    f;    int    v    *=    f;    	non-compiled	[CE]  ';'  expected	12	None	replace
95	[BUG]  [BUGGY]  v  *=  x2;  (v  *=  f);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2;  (v  *=  f);  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x2;  (v  *=  f);	  v    *=    f;    (v    *=    f);    	non-compiled	[CE]  not  a  statement	13	None	replace
96	[BUG]  [BUGGY]  v  *=  v;  v  *=  v;  }  coeff  *=  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  v  *=  v;  }  coeff  *=  x;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    v;    v  *=  v;  }  coeff  *=  x;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	add
97	[BUG]  [BUGGY]  v  *=  v;  v  *=  v;  }  v  *=  v;  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  v  *=  v;  }  v  *=  v;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    v;    v  *=  v;  }  v  *=  v;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	add
98	[BUG]  [BUGGY]  v  *=  f;  v  *=  x2);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  v  *=  x2);  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  f;  v  *=  x2);	  v    *=    x2;    v    *=    x2);    	non-compiled	[CE]  ';'  expected	34	None	replace
99	[BUG]  [BUGGY]  x  =  v  *  f  +  q[n  -  1];  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]            AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  x  =  v  *  f  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	x  =  v  *  f  +  q[n  -  1];	  x    =    v    *    x2    +    q[n    -    1];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	1	None	replace
100	[BUG]  [BUGGY]  v    *=    f;    v  *=  f;  v  *=  f);  v  *=  f;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    f;    v  *=  f;  v  *=  f);  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        f;        v    *=    f;    v  *=  f);  v  *=  f;	  	non-compiled	[CE]  ';'  expected	10	None	add
101	[BUG]  [BUGGY]  v  *=  x2;  (v  *=  f;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  x2;  (v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  *=  x2;  (v  *=  f;	  v    *=    x2;    (v    *=    x2;    	non-compiled	[CE]  ')'  expected	25	None	replace
102	[BUG]  [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  q2;  [CE]  cannot  find  symbol  q2  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    x2;    v  *=  x2;  v  *=  x2;  v  *=  q2;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        x2;        v    *=    x2;    v  *=  x2;  v  *=  q2;	  	non-compiled	[CE]  cannot  find  symbol  q2	22	None	add
103	[BUG]  [BUGGY]  double  v  =  v  *  q[n  -  1]  +  q[n  -  1];  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  double  v  =  v  *  q[n  -  1]  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	double  v  =  v  *  q[n  -  1]  +  q[n  -  1];	  double    v    =    v    *    x2    +    q[n    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	46	None	replace
104	[BUG]  [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[0].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[0];  v  =  v  *  x2  +  q[0].;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    v    *    x2    +    q[0];    v  =  v  *  x2  +  q[0].;	  	non-compiled	[CE]  <identifier>  expected	40	None	add
105	[BUG]  [BUGGY]  v  *=  f;  coeff  *=  f;  double  v  *=  f;  coeff  *=  f;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  f;  coeff  *=  f;  double  v  *=  f;  coeff  *=  f;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    f;    coeff    *=    f;    double  v  *=  f;  coeff  *=  f;	  	non-compiled	[CE]  ';'  expected	26	None	add
106	[BUG]  [BUGGY]  v  =  v  *  q[x  -  1]  +  q[n  -  1];  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  q[x  -  1]  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  =  v  *  q[x  -  1]  +  q[n  -  1];	  v    =    x    *    x2    +    q[n    -    1];    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
107	[BUG]  [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  y2  +  q[0];  [CE]  cannot  find  symbol  y2  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[0];  v  =  x  *  y2  +  q[0];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    x    *    x2    +    q[0];    v  =  x  *  y2  +  q[0];	  	non-compiled	[CE]  cannot  find  symbol  y2	15	None	add
108	[BUG]  [BUGGY]  v  =  v  *  x2  +  q[n  -  1];  v  =  v  *  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  x2  +  q[n  -  1];  v  =  v  *  x2  +  q[n  -  1].;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    v    *    x2    +    q[n    -    1];    v  =  v  *  x2  +  q[n  -  1].;	  	non-compiled	[CE]  <identifier>  expected	44	None	add
109	[BUG]  [BUGGY]  v  =  x  *  x2  +  q[n  -  1];  v  =  x  *  x2  +  q[n  -  1].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  x  *  x2  +  q[n  -  1];  v  =  x  *  x2  +  q[n  -  1].;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    =    x    *    x2    +    q[n    -    1];    v  =  x  *  x2  +  q[n  -  1].;	  	non-compiled	[CE]  <identifier>  expected	2	None	add
110	[BUG]  [BUGGY]  double  v  =  n  *  q[n  -  1]  +  q[n  -  1];  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  double  v  =  n  *  q[n  -  1]  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	double  v  =  n  *  q[n  -  1]  +  q[n  -  1];	  double    v    =    n    *    x2    +    q[n    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	19	None	replace
111	[BUG]  [BUGGY]  v    *=    f;    v  *=  f;  v  *=  d;  v  *=  f;  [CE]  cannot  find  symbol  d  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v    *=    f;    v  *=  f;  v  *=  d;  v  *=  f;  [BUGGY]      }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v        *=        f;        v    *=    f;    v  *=  d;  v  *=  f;	  	non-compiled	[CE]  cannot  find  symbol  d	10	None	add
112	[BUG]  [BUGGY]  double  v  =  n  *  f  +  q[k  -  1];  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  double  v  =  n  *  f  +  q[k  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	double  v  =  n  *  f  +  q[k  -  1];	  double    v    =    x    *    f    +    q[k    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	4	None	replace
113	[BUG]  [BUGGY]  double  v  =  n  *  q[x  -  1]  +  q[k  -  1];  [CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]                  AssertionError      [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  double  v  =  n  *  q[x  -  1]  +  q[k  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	double  v  =  n  *  q[x  -  1]  +  q[k  -  1];	  double    v    =    n    *    x2    +    q[k    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  atan(double[],int,double[],int)	5	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  q[n  -  1]  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	add	v  =  v  *  q[n  -  1]  +  q[n  -  1];	  v    =    v    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	45	4	replace
115	[BUG]  [BUGGY]  v  =  v  *  q[n  -  1]  +  q[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  =  v  *  q[n  -  1]  +  q[n  -  1];  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v  =  v  *  q[n  -  1]  +  q[n  -  1];	  v    =    v    *    x2    +    q[n    -    1];    	compilable	  [FE]  AssertionError  	45	4	replace
116	[BUG]  [BUGGY]  v  *=  v;  v  *=  v;  }  v  *=  x;  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionError    [CONTEXT]      q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {      [BUGGY]  v  *=  v;  v  *=  v;  }  v  *=  x;  [BUGGY]      v  *=  x;  }  coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1358	1358	1	replace	v    *=    v;    v  *=  v;  }  v  *=  x;	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	add
