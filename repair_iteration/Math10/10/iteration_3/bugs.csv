bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  yOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  yOffset);  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  yOffset);	  atan(tmp1,    0,    x,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  yOffset,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  yOffset,  0);  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  yOffset,  0);	  atan(tmp1,    0,    x,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  ||(x[1]  ==  0));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  ||(x[1]  ==  0));  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	||(x[1]  ==  0));	  ||(x[0]    ==    0));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }	  if(resultOffset    <    0)    {    atan(tmp1,    0,    tmp2,    0);    //    atan(y    /    (r    +    x))    for    (int    i    =    0;    i    <    tmp2.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  r  =  sqrt(y,  xOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(y,  xOffset);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(y,  xOffset);	  r    =    sqrt(x,    xOffset);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
6	[BUG]  [BUGGY]  r  =  sqrt(x,  yOffset,  y);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(x,  yOffset,  y);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(x,  yOffset,  y);	  r    =    sqrt(y,    yOffset,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  r  =  sqrt(y,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(y,  x);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(y,  x);	  r    =    sqrt(x,    y);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  r  =  sqrt(y,  yOffset,  tmp2,  0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(y,  yOffset,  tmp2,  0,  x);  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(y,  yOffset,  tmp2,  0,  x);	  r    =    sqrt(y,    yOffset,    tmp1,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
9	[BUG]  [BUGGY]  r  =  sqrt(x,  yOffset,  tmp1,  0,  y);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(x,  yOffset,  tmp1,  0,  y);  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(x,  yOffset,  tmp1,  0,  y);	  r    =    sqrt(y,    yOffset,    tmp1,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
10	[BUG]  [BUGGY]  r  =  sqrt(y,  yOffset  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(y,  yOffset  +  1);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(y,  yOffset  +  1);	  r    =    sqrt(x,    yOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  r  =  sqrt(x,  xOffset,  y);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(x,  xOffset,  y);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(x,  xOffset,  y);	  r    =    sqrt(y,    xOffset,    y);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  if(x  >  0)  {  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  if(x  >  0)  {  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	if(x  >  0)  {  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }	  if(x    >    0)    {    atan(tmp1,    0,    tmp2,    0);    //    atan(y    /    (r    +    x))    for    (int    i    =    0;    i    <    tmp2.length;    ++i)    {    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	14	None	replace
13	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  yOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  yOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  yOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }	  atan(tmp1,    0,    x,    xOffset,    tmp2,    0);    //    atan(y    /    (r    +    x))    for    (int    i    =    0;    i    <    tmp2.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  xOffset,  y);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  xOffset,  y);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  xOffset,  y);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	  atan(tmp1,    0,    x,    yOffset);    //    atan(y    /    (r    +    x))    for(int    i    =    0;    i    <    tmp2.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  xOffset);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  xOffset);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  xOffset);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	  atan(tmp1,    0,    x,    yOffset);    //    atan(y    /    (r    +    x))    for(int    i    =    0;    i    <    tmp2.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  r  =  sqrt(x,  yOffset,  tmp2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(x,  yOffset,  tmp2);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(x,  yOffset,  tmp2);	  r    =    sqrt(x,    yOffset,    x);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  if(resultOffset  <  0)  {  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [CE]  method  atan  in  class  DSCompiler  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  if(resultOffset  <  0)  {  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	if(resultOffset  <  0)  {  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }	  if(x[xOffset]    >=    0)    {    atan(tmp1,    0,    tmp2,    0);    //    atan(y    /    (r    +    x))    for    (int    i    =    0;    i    <    tmp2.length;    ++i)    {    }    	non-compiled	[CE]  method  atan  in  class  DSCompiler  cannot  be  applied  to  given  types;	18	None	replace
18	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  0);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  0);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  0);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  }	  if(x    <    0)    {    atan(tmp1,    0,    tmp2,    0);    //    atan(y    /    (r    +    x))    for    (int    i    =    0;    i    <    tmp2.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
19	[BUG]  [BUGGY]  r  =  sqrt(x,  yOffset,  tmp1,  0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(x,  yOffset,  tmp1,  0,  x);  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(x,  yOffset,  tmp1,  0,  x);	  r    =    sqrt(y,    yOffset,    tmp1,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  r  =  sqrt(x,  y  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(x,  y  +  1);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(x,  y  +  1);	  r    =    sqrt(x,    y);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  ||(x[0]  ==  x));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  ||(x[0]  ==  x));  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	||(x[0]  ==  x));	  ||(x[0]    ==    0));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  Attr  atan(tmp1,  0,  x,  xOffset,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  Attr  atan(tmp1,  0,  x,  xOffset,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	Attr  atan(tmp1,  0,  x,  xOffset,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }	  if(x    >    0)    {    atan(tmp1,    0,    tmp2,    0);    //    atan(y    /    (r    +    x))    for    (int    i    =    0;    i    <    tmp2.length;    ++i)    {    }    	non-compiled	[CE]  ';'  expected	14	None	replace
23	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  xOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  xOffset);  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  xOffset);	  atan(tmp1,    0,    x,    yOffset);    //    atan(y    /    (r    +    x))    for(int    i    =    0;    i    <    tmp2.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  r  =  sqrt(xOffset,  yOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(xOffset,  yOffset);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(xOffset,  yOffset);	  r    =    sqrt(xOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  atan(tmp1,  0,  x,  xOffset,  tmp2,  0);  [BUGGY]      for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  xOffset,  tmp2,  0);	  atan(tmp1,    0,    x,    xOffset,    tmp2,    0);    //    atan(y    /    (r    +    x))    for    (int    i    =    0;    i    <    tmp2.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  r  =  sqrt(y,  xOffset  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(y,  xOffset  +  1);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(y,  xOffset  +  1);	  r    =    sqrt(x,    yOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  r  =  sqrt(y,  xOffset,  tmp2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(y,  xOffset,  tmp2);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(y,  xOffset,  tmp2);	  r    =    sqrt(y,    xOffset,    y);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  ||(r[0]  ==  0));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  ||(r[0]  ==  0));  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	||(r[0]  ==  0));	  ||(x[0]    ==    0));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  r  =  sqrt(y,  yOffset,  tmp2,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)      [BUGGY]  r  =  sqrt(y,  yOffset,  tmp2,  x);  [BUGGY]      atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	r  =  sqrt(y,  yOffset,  tmp2,  x);	  r    =    sqrt(y,    yOffset,    x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
