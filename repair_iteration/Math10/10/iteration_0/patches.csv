bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	  	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]    r  =  sqrt(x,  yOffset);  [CE]  cannot  find  symbol  r  [FE]    AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    r  =  sqrt(x,  yOffset);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    r  =  sqrt(x,  yOffset);		non-compiled	[CE]  cannot  find  symbol  r	20	None	add
3	[BUG]  [BUGGY]    r  =  sqrt(x);  [CE]  cannot  find  symbol  r  [FE]      AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    r  =  sqrt(x);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    r  =  sqrt(x);		non-compiled	[CE]  cannot  find  symbol  r	20	None	add
4	[BUG]  [BUGGY]    ||(x[xOffset]  ==  0));  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    ||(x[xOffset]  ==  0));  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    ||(x[xOffset]  ==  0));		non-compiled	[CE]  illegal  start  of  expression	20	None	add
5	[BUG]  [BUGGY]    r  =  sqrt(yOffset);  [CE]  cannot  find  symbol  r  [FE]    AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    r  =  sqrt(yOffset);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    r  =  sqrt(yOffset);		non-compiled	[CE]  cannot  find  symbol  r	20	None	add
6	[BUG]  [BUGGY]  atan(tmp1,  0,  x,  0);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  atan(tmp1,  0,  x,  0);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	atan(tmp1,  0,  x,  0);  //  atan(y  /  (r  +  x))  for(int  i  =  0;  i  <  tmp2.length;  ++i)  {	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
7	[BUG]  [BUGGY]    r  =  sqrt(yOffset,  x,  y);  [CE]  cannot  find  symbol  r  [FE]    AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]    r  =  sqrt(yOffset,  x,  y);  [BUGGY]  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))    for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	    r  =  sqrt(yOffset,  x,  y);		non-compiled	[CE]  cannot  find  symbol  r	20	None	add
8	[BUG]  [BUGGY]  if(x[xOffset]  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [CE]  cannot  find  symbol  i  [FE]    AssertionError  [CONTEXT]  double[]  tmp2  =  new  double[getSize()];  multiply(y,  yOffset,  y,  yOffset,  tmp2,  0);//  y^2  add(tmp1,  0,  tmp2,  0,  tmp2,  0);  //  x^2  +  y^2  rootN(tmp2,  0,  2,  tmp1,  0);  //  r  =  sqrt(x^2  +  y^2)  if  (x[xOffset]  >=  0)  {  add(tmp1,  0,  x,  xOffset,  tmp2,  0);//  r  +  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  +  x)  [BUGGY]  if(x[xOffset]  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }  [BUGGY]  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  result[resultOffset  +  i]  =  2  *  tmp2[i];  //  2  *  atan(y  /  (r  +  x))  }  }  else  {  subtract(tmp1,  0,  x,  xOffset,  tmp2,  0);  //  r  -  x  divide(y,  yOffset,  tmp2,  0,  tmp1,  0);  //  y  /(r  -  x)  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  -  x))  [CLASS]  DSCompiler  [METHOD]  atan2  [RETURN_TYPE]  void  final  double[]  y  final  int  yOffset  final  double[]  x  final  int  xOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  result  tmp1  tmp2  x  y  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5773502691896258	1399	1400	1	replace	if(x[xOffset]  ==  0)  {  atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  }	atan(tmp1,  0,  tmp2,  0);  //  atan(y  /  (r  +  x))  for  (int  i  =  0;  i  <  tmp2.length;  ++i)  {  	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
