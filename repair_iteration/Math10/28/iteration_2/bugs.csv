bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(v  >  0)  {  if(v  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(v  >  0)  {  if(v  >  0)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(v    >    0)    {    if(v  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
2	[BUG]  [BUGGY]  if(v  >  0)  {  If(v  >  0)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(v  >  0)  {  If(v  >  0)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(v    >    0)    {    If(v  >  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(v  >  1)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	add	if(v  >  1)  {	  if    (k    >    1)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
4	[BUG]  [BUGGY]  if(v  >  1)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(v  >  1)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(v  >  1)  {	  if    (k    >    1)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(v  >=  0)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	add	if(v  >=  0)  {	  if(v    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	4	replace
6	[BUG]  [BUGGY]  if(v  >=  0)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(v  >=  0)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(v  >=  0)  {	  if(v    >    0)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	4	replace
7	[BUG]  [BUGGY]  if(v  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(v  <  =  0)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(v  <  =  0)  {	  if(v    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
8	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    3];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	replace
9	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]              AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    3];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	replace
10	[BUG]  [BUGGY]  if  (k  >  0)  {  if  (k  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if  (k  >  0)  {  if  (k  >  0)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if    (k    >    0)    {    if  (k  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]  if  (k  >  0)  {  If  (k  >  0)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if  (k  >  0)  {  If  (k  >  0)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if    (k    >    0)    {    If  (k  >  0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
12	[BUG]  [BUGGY]  if  (k  >  1)  {  if  (k  >  1)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if  (k  >  1)  {  if  (k  >  1)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if    (k    >    1)    {    if  (k  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
13	[BUG]  [BUGGY]  if  (k  >  1)  {  If  (k  >  1)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if  (k  >  1)  {  If  (k  >  1)  {  [BUGGY]    q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if    (k    >    1)    {    If  (k  >  1)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
14	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	8	None	replace
15	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	8	None	replace
16	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2;  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2;  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2;  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    *=    x2;    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	12	None	replace
17	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x1;  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x1;  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x1;  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    *=    x2;    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	12	None	replace
18	[BUG]  [BUGGY]  n  =  Math.max(v,  n  -  1);  [CE]  'else'  without  'if'  [FE]            AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  n  =  Math.max(v,  n  -  1);  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	n  =  Math.max(v,  n  -  1);	      n    =    Math.max(v,    n);    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
19	[BUG]  [BUGGY]  n  =  Math.max(v,  n  +  1);  [CE]  'else'  without  'if'  [FE]              AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  n  =  Math.max(v,  n  +  1);  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	n  =  Math.max(v,  n  +  1);	      n    =    Math.max(v,    n);    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
20	[BUG]  [BUGGY]  n  =  v  *  q[n  -  1];  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  n  =  v  *  q[n  -  1];  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	n  =  v  *  q[n  -  1];	      n    =    n    *    q[n    -    1];    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
21	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2  +  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    *=    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
22	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x1  +  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x1  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x1  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    *=    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	11	None	replace
23	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[k    -    1]    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	9	None	replace
24	[BUG]  [BUGGY]  if(n  <  =  order)  {  if(v  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  <  =  order)  {  if(v  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  <  =  order)  {  if(v  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[k    -    1]    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  Neighbor  n  =  n  -  1;  k  <  =  n  -  1;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  Neighbor  n  =  n  -  1;  k  <  =  n  -  1;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	Neighbor  n  =  n  -  1;  k  <  =  n  -  1;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  Neighbor  n  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  Neighbor  n  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	Neighbor  n  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  not  a  statement	8	None	replace
27	[BUG]  [BUGGY]  Neighbor  n  =  n  -  1;  k  <  =  n  -  1;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  Neighbor  n  =  n  -  1;  k  <  =  n  -  1;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	Neighbor  n  =  n  -  1;  k  <  =  n  -  1;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    3];    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  Neighbor  n  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  Neighbor  n  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	Neighbor  n  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k  -  3];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    3];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
29	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k!=  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[k    -    1]    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	9	None	replace
30	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >>  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >>  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >>  0;  k  -=  2)  {  q[k  -  1]  =  v  *  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    q[k    -    1]    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	9	None	replace
31	[BUG]  [BUGGY]  if(n  -  1  <  =  n)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  -  1  <  =  n)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2;  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  -  1  <  =  n)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2;  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    *=    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  3];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]            AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  3];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k  -  3];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k    -    3];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	10	None	replace
33	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k];  }  [CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)  [FE]        AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  >  0)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    =    v    *    x2    +    q[k];    }    	non-compiled	[CE]  variable  k  is  already  defined  in  method  atan(double[],int,double[],int)	8	None	replace
34	[BUG]  [BUGGY]  if(n  -  1  <  =  n)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2  +  q[k];  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double  f  =  1.0  /  (1  +  x2);  double  coeff  =  f;  function[1]  =  coeff  *  q[0];  for  (int  n  =  2;  n  <=  order;  ++n)  {  double  v  =  0;  q[n  -  1]  =  -n  *  q[n  -  2];  for  (int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  =  v  *  x2  +  q[k];    [BUGGY]  if(n  -  1  <  =  n)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2  +  q[k];  }  [BUGGY]    if  (k  >  2)  {  q[k  -  2]  =  (k  -  1)  *  q[k  -  1]  +  (k  -  1  -  2  *  n)  *  q[k  -  3];  }  else  if  (k  ==  2)  {  q[0]  =  q[1];  }  }  if  ((n  &  0x1)  ==  0)  {  v  *=  x;  }  coeff  *=  f;  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1351	1351	1	replace	if(n  -  1  <  =  n)  {  for(int  k  =  n  -  1;  k  >=  0;  k  -=  2)  {  v  *=  x2  +  q[k];  }	      if(v    >    0)    {    for(int    k    =    n    -    1;    k    >=    0;    k    -=    2)    {    v    *=    x2    +    q[k];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
