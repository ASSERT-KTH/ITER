bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cast(op,  resultOffset,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cast(op,  resultOffset,  n);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(op,  resultOffset,  n);	  cast(v,    resultOffset,    n);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  cast(n,  resultOffset,  v);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cast(n,  resultOffset,  v);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(n,  resultOffset,  v);	  cast(v,    resultOffset,    n);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  luate(n,  v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  luate(v,    n)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
4	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  i++)  {  compose(op,  result,  i);  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  i++)  {  compose(op,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n  +  1;  i++)  {  compose(op,  result,  i);  }	  For(int    i    =    0;    i    <    n;    i++)    {    compose(op,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
5	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  &&  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  &&  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM  &&  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	  Opcodes.IASTORE_OPTIONAL_PARAM    ||    v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	22	None	replace
6	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM  ||  n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	  Opcodes.IASTORE_OPTIONAL_PARAM    ||    v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	22	None	replace
7	[BUG]  [BUGGY]  operand[n]  =  f[i]  *  v;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  f[i]  *  v;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  f[i]  *  v;	  operand[n]    =    v[i]    *    f;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  operand[n]  =  function[i]  *  f;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  function[i]  *  f;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  function[i]  *  f;	  operand[n]    =    v[i]    *    f;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  Opcodes.isDerivative(f)||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.isDerivative(f)||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.isDerivative(f)||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }	  Opcodes.isDerivative(f)&&    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  Opcodes.isDerivative(f)&&  v  <  =  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.isDerivative(f)&&  v  <  =  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.isDerivative(f)&&  v  <  =  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }	  Opcodes.isDerivative(f)&&    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  côte[][]  v  =  resultOffset.toArray(new  double[resultOffset.size()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  côte[][]  v  =  resultOffset.toArray(new  double[resultOffset.size()  ]);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	côte[][]  v  =  resultOffset.toArray(new  double[resultOffset.size()  ]);	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
12	[BUG]  [BUGGY]  côte[][]  v  =  resultOffset.toArray(new  double[resultOffset.length]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  côte[][]  v  =  resultOffset.toArray(new  double[resultOffset.length]);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	côte[][]  v  =  resultOffset.toArray(new  double[resultOffset.length]);	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
13	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  ++i)  {  compose(op,  result,  i);  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  ++i)  {  compose(op,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n  +  1;  ++i)  {  compose(op,  result,  i);  }	  For(int    i    =    0;    i    <    n;    ++i)    {    compose(op,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
14	[BUG]  [BUGGY]  n  >  0)  {  compose(operand,  operandOffset,  0,  resultOffset);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(operand,  operandOffset,  0,  resultOffset);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(operand,  operandOffset,  0,  resultOffset);  }	  n    >    0)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
15	[BUG]  [BUGGY]  n  >  0)  {  compose(operand,  resultOffset,  0,  i);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(operand,  resultOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(operand,  resultOffset,  0,  i);  }	  n    >    0)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
16	[BUG]  [BUGGY]  luate(n,  f)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  f)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  f)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)    {    for(int    i    =    0;    i    <    v;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
17	[BUG]  [BUGGY]  luate(n,  q)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  q)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  q)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)    {    for(int    i    =    0;    i    <    v;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  ++i)  {  compose(v,  result,  i);  }  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  ++i)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n  +  1;  ++i)  {  compose(v,  result,  i);  }	  For(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	18	None	replace
19	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Context.reportCodeChange();  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Context.reportCodeChange();	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    f[i];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
20	[BUG]  [BUGGY]  Context.checkState(v  >  0.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Context.checkState(v  >  0.0);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Context.checkState(v  >  0.0);	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    f[i];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
21	[BUG]  [BUGGY]  pendSizes.add(v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  pendSizes.add(v,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	pendSizes.add(v,  resultOffset);	  pendSizes.add(v);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n  +  1;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n  +  1;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n  +  1;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }	  Opcodes.IASTORE_OPTIONAL_PARAM)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    Opcodes.IASTORE_OPTIONAL_PARAM;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
23	[BUG]  [BUGGY]  srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection(n);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection(n);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection(n);	  srcDerivativesIndirection    =    compilers.getSrcDerivativesIndirection();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(operand,  0,  result,  0,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  System.arraycopy(operand,  0,  result,  0,  n  +  1);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	System.arraycopy(operand,  0,  result,  0,  n  +  1);	  System.arraycopy(operand,    0,    result,    0,    n);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
25	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR  =  true;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR  =  true;  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FACTOR  =  true;	  Opcodes.IASTORE_DETERMINISTIC_FACTOR;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
26	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR,  v);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR,  v);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FACTOR,  v);	  Opcodes.IASTORE_DETERMINISTIC_FACTOR;    	non-compiled	[CE]  not  a  statement	34	None	replace
27	[BUG]  [BUGGY]  Integer  v  =  createInteger(0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Integer  v  =  createInteger(0);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Integer  v  =  createInteger(0);	  Integer    v    =    createInteger(resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
28	[BUG]  [BUGGY]  n  >  0.0)  {  compose(v,  resultOffset,  i);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0.0)  {  compose(v,  resultOffset,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(v,  resultOffset,  i);  }	  n    >    0.0)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
29	[BUG]  [BUGGY]  n  >  0)  {  compose(v,  result,  i);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(v,  result,  i);  }	  n    >    0.0)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
30	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FIRST  ||  n  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FIRST  ||  n  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FIRST  ||  n  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	  Opcodes.IASTORE_DETERMINISTIC_FIRST    ||    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
31	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FIRST  &&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FIRST  &&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FIRST  &&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	  Opcodes.IASTORE_DETERMINISTIC_FIRST    ||    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
32	[BUG]  [BUGGY]  Context.checkState(v  <  0  ||  n  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Context.checkState(v  <  0  ||  n  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Context.checkState(v  <  0  ||  n  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	  Context.checkState(n    <    0    ||    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
33	[BUG]  [BUGGY]  luate(n,  f)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  f)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  f)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)>    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	30	None	replace
34	[BUG]  [BUGGY]  operand[i]  =  function[i];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[i]  =  function[i];  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[i]  =  function[i];	  operand[i]    =    v[i];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  operand[i]  =  f;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[i]  =  f;  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[i]  =  f;	  operand[i]    =    v[i];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  operand[n]  =  function[i];  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  function[i];  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  function[i];	  operand[n]    =    v[i];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  operand[n]  =  f;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  f;  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  f;	  operand[n]    =    v[i];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  c  teices.put(v,  resultOffset  +  1);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  c  teices.put(v,  resultOffset  +  1);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	c  teices.put(v,  resultOffset  +  1);	  côteices.put(v,    resultOffset);    	non-compiled	[CE]  ';'  expected	49	None	replace
39	[BUG]  [BUGGY]  Opcodes.WARNING(this,  n,  resultOffset);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.WARNING(this,  n,  resultOffset);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.WARNING(this,  n,  resultOffset);	  Opcodes.WARNING(this,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
40	[BUG]  [BUGGY]  Opcodes.WARNING(this,  operandOffset,  resultOffset);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.WARNING(this,  operandOffset,  resultOffset);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.WARNING(this,  operandOffset,  resultOffset);	  Opcodes.WARNING(this,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
41	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  f[i];  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  f[i];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  f[i];  }	  Opcodes.IASTORE_OPTIONAL_PARAM)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	38	None	replace
42	[BUG]  [BUGGY]  ||(n  >  0  &&  operand[i]  <  v.length))  {  operand[i]  =  v[i]  *  f;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(n  >  0  &&  operand[i]  <  v.length))  {  operand[i]  =  v[i]  *  f;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(n  >  0  &&  operand[i]  <  v.length))  {  operand[i]  =  v[i]  *  f;	  if(n    >    0)    {    for(int    i    =    0;    i    <    v.length;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
43	[BUG]  [BUGGY]  ||(n  <  0  &&  operand.length  >  0)||(v[i]  <  v.length))  {  operand[i]  =  v[i]  *  f;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(n  <  0  &&  operand.length  >  0)||(v[i]  <  v.length))  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(n  <  0  &&  operand.length  >  0)||(v[i]  <  v.length))  {  operand[i]  =  v[i]  *  f;  }	  if(n    >    0)    {    for(int    i    =    0;    i    <    v.length;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
44	[BUG]  [BUGGY]  Integer  v  =  createInteger(f);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Integer  v  =  createInteger(f);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Integer  v  =  createInteger(f);	  Integer    v    =    createInteger(n);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
45	[BUG]  [BUGGY]  n  >  0.0)  {  compose(v,  resultOffset,  i);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0.0)  {  compose(v,  resultOffset,  i);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(v,  resultOffset,  i);	  n    >    0.0)    {    compose(v,    result,    i);    	non-compiled	[CE]  not  a  statement	42	None	replace
46	[BUG]  [BUGGY]  n  >  0)  {  compose(v,  result,  i);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(v,  result,  i);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(v,  result,  i);	  n    >    0.0)    {    compose(v,    result,    i);    	non-compiled	[CE]  not  a  statement	42	None	replace
47	[BUG]  [BUGGY]  luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }	  luate(v,    n)>    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  not  a  statement	21	None	replace
48	[BUG]  [BUGGY]  Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i];  }	  Opcodes.IS_OPTIONAL_MODULE)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	6	None	replace
49	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  operandOffset,  resultOffset);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  NeighborTraversal.traverse(compiler,  operandOffset,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  operandOffset,  resultOffset);	  NeighborTraversal.traverse(compiler,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
50	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  resultOffset);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  n,  resultOffset);	  NeighborTraversal.traverse(compiler,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
51	[BUG]  [BUGGY]  ||(v  >  0  &&  operand[n]  <  resultOffset))  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(v  >  0  &&  operand[n]  <  resultOffset))  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(v  >  0  &&  operand[n]  <  resultOffset))  {  operand[i]  =  v[i];  }	  ||(v    >    0    &&    operand[i]    <    resultOffset))    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  ||(v  <  0  &&  operand[i]  <  resultOffset))  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(v  <  0  &&  operand[i]  <  resultOffset))  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(v  <  0  &&  operand[i]  <  resultOffset))  {  operand[i]  =  v[i];  }	  ||(v    >    0    &&    operand[i]    <    resultOffset))    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  srcDerivativesIndirection.add(v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection.add(v,  resultOffset);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection.add(v,  resultOffset);	  srcDerivativesIndirection.add(v);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  srcDerivativesIndirection.add(v,  result);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection.add(v,  result);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection.add(v,  result);	  srcDerivativesIndirection.add(v);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
55	[BUG]  [BUGGY]  cast(op,  n,  resultOffset);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cast(op,  n,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(op,  n,  resultOffset);	  cast(n,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
56	[BUG]  [BUGGY]  cast(op,  v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cast(op,  v,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(op,  v,  resultOffset);	  cast(n,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
57	[BUG]  [BUGGY]  luate(n,  v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }	  luate(v,    n)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
58	[BUG]  [BUGGY]  n  >  0)  {  compose(operand,  result,  0,  v);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(operand,  result,  0,  v);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(operand,  result,  0,  v);  }	  n    >    0)    {    compose(operand,    operandOffset,    0,    v);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
59	[BUG]  [BUGGY]  ||(v  >  0  &&  operand[n]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(v  >  0  &&  operand[n]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(v  >  0  &&  operand[n]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	  ||(v    >    0    &&    operand[i]!=    v[i]))    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  ||(n  >  0  &&  operand[i]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(n  >  0  &&  operand[i]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(n  >  0  &&  operand[i]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	  ||(v    >    0    &&    operand[i]!=    v[i]))    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
61	[BUG]  [BUGGY]  luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  luate(v,    n)>    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
62	[BUG]  [BUGGY]  ||(n  >  0  &&  operand[i]  <  vs.length))  {  operand[i]  =  v[i]  *  f;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(n  >  0  &&  operand[i]  <  vs.length))  {  operand[i]  =  v[i]  *  f;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(n  >  0  &&  operand[i]  <  vs.length))  {  operand[i]  =  v[i]  *  f;	  if(n    >    0)    {    for(int    i    =    0;    i    <    vs.length;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
63	[BUG]  [BUGGY]  ||(n  >  0  &&  operand[i]  <  vs.length))  {  operand[i]  =  v[i]  *  f;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(n  >  0  &&  operand[i]  <  vs.length))  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(n  >  0  &&  operand[i]  <  vs.length))  {  operand[i]  =  v[i]  *  f;  }	  if(n    >    0)    {    for(int    i    =    0;    i    <    vs.length;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
64	[BUG]  [BUGGY]  c  teline(n,  resultOffset,  v);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  c  teline(n,  resultOffset,  v);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	c  teline(n,  resultOffset,  v);	  côteline(v,    resultOffset,    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
65	[BUG]  [BUGGY]  c  teline(op,  resultOffset,  n);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  c  teline(op,  resultOffset,  n);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	c  teline(op,  resultOffset,  n);	  côteline(v,    resultOffset,    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
66	[BUG]  [BUGGY]  cteices.put(v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cteices.put(v,  resultOffset);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cteices.put(v,  resultOffset);	  côteices.put(v,    result);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
67	[BUG]  [BUGGY]  Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	  if(n    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	40	None	replace
68	[BUG]  [BUGGY]  Opcodes.IS_OPTIONAL_MODULE_FACTOR)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IS_OPTIONAL_MODULE_FACTOR)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IS_OPTIONAL_MODULE_FACTOR)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	  if(n    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	40	None	replace
69	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  &&  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  &&  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM  &&  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }	  Opcodes.IASTORE_OPTIONAL_PARAM    ||    v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    function[i];    }    	non-compiled	[CE]  not  a  statement	23	None	replace
70	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM  ||  n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }	  Opcodes.IASTORE_OPTIONAL_PARAM    ||    v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    function[i];    }    	non-compiled	[CE]  not  a  statement	23	None	replace
71	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  i++)  {  compose(v,  result,  i);  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  i++)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n  +  1;  i++)  {  compose(v,  result,  i);  }	  For(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	7	None	replace
72	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  result);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  result);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  n,  result);	  NeighborTraversal.traverse(compiler,    v,    result);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
73	[BUG]  [BUGGY]  n  >  0.0)  {  compose(v,  result,  i  +  1);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0.0)  {  compose(v,  result,  i  +  1);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(v,  result,  i  +  1);  }	  n    >    0.0)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
74	[BUG]  [BUGGY]  operand[n]  =  result;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  result;  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  result;	  operand[n]    =    v[i];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
75	[BUG]  [BUGGY]  Context.checkState(v  <  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Context.checkState(v  <  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Context.checkState(v  <  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	  Context.checkState(n    <    0    ||    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
76	[BUG]  [BUGGY]  luate(v,  n)>  1)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(v,  n)>  1)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v,  n)>  1)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }	  luate(v,    n)>    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  not  a  statement	21	None	replace
77	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  compose(op,  result,  i);  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  compose(op,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  compose(op,  result,  i);  }	  For(int    i    =    0;    i    <    n;    ++i)    {    compose(op,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
78	[BUG]  [BUGGY]  luate(resultOffset,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(resultOffset,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(resultOffset,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i]);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
79	[BUG]  [BUGGY]  luate(resultOffset,  v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(resultOffset,  v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(resultOffset,  v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i]);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
80	[BUG]  [BUGGY]  cast(f,  resultOffset,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cast(f,  resultOffset,  n);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(f,  resultOffset,  n);	  cast(v,    resultOffset,    n);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  n;  i++)  {  compose(op,  result,  i);  }  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Integer  i  =  0;  i  <  n;  i++)  {  compose(op,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Integer  i  =  0;  i  <  n;  i++)  {  compose(op,  result,  i);  }	  For(int    i    =    0;    i    <    n;    i++)    {    compose(op,    result,    i);    }    	non-compiled	[CE]  >  expected	8	None	replace
82	[BUG]  [BUGGY]  srcDerivativesIndirection  =  compilers.getDerivativesIndirection();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection  =  compilers.getDerivativesIndirection();  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection  =  compilers.getDerivativesIndirection();	  srcDerivativesIndirection    =    compilers.getSrcDerivativesIndirection();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
83	[BUG]  [BUGGY]  srcDerivativesIndirection  =  compilers.getDerivativesIndirection(resultOffset);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection  =  compilers.getDerivativesIndirection(resultOffset);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection  =  compilers.getDerivativesIndirection(resultOffset);	  srcDerivativesIndirection    =    compilers.getSrcDerivativesIndirection();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  n  >  0)  {  compose(result,  operandOffset,  0,  v);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(result,  operandOffset,  0,  v);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(result,  operandOffset,  0,  v);  }	  n    >    0)    {    compose(operand,    operandOffset,    0,    v);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
85	[BUG]  [BUGGY]  n  >  0)  {  compose(result,  operandOffset,  0,  i);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(result,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(result,  operandOffset,  0,  i);  }	  n    >    0)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
86	[BUG]  [BUGGY]  n  >  0)  {  compose(operand,  result,  0,  i);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(operand,  result,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(operand,  result,  0,  i);  }	  n    >    0)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
87	[BUG]  [BUGGY]  luate(n,  v)>  1)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(n,  v)>  1)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  v)>  1)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)>    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	30	None	replace
88	[BUG]  [BUGGY]  luate(v)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(v)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)>    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	30	None	replace
89	[BUG]  [BUGGY]  n  >  0.0)  {  compose(v,  result,  i  +  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0.0)  {  compose(v,  result,  i  +  1);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(v,  result,  i  +  1);	  n    >    0.0)    {    compose(v,    result,    i);    	non-compiled	[CE]  not  a  statement	42	None	replace
90	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i]  *  f;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FACTOR)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i]  *  f;  }	  Opcodes.IASTORE_DETERMINISTIC_FACTOR)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
91	[BUG]  [BUGGY]  luate(f,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(f,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(f,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }	  luate(v,    n)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
92	[BUG]  [BUGGY]  operand[i]  =  result;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[i]  =  result;  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[i]  =  result;	  operand[i]    =    v[i];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
93	[BUG]  [BUGGY]  luate(resultOffset,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(resultOffset,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(resultOffset,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i][i]);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
94	[BUG]  [BUGGY]  luate(resultOffset,  v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(resultOffset,  v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(resultOffset,  v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i][i]);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
95	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_MILLIS  =  n  >  0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_MILLIS  =  n  >  0;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_MILLIS  =  n  >  0;	  if(n    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
96	[BUG]  [BUGGY]  operand[n]  =  f[i];  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  f[i];  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  f[i];	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    f[i];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
97	[BUG]  [BUGGY]  operand[n]  =  f[i].doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  f[i].doubleValue();  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  f[i].doubleValue();	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    f[i];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
98	[BUG]  [BUGGY]  operand[n]  =  f  *  f;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  f  *  f;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  f  *  f;	  if(n    >    0)    {    for(int    i    =    0;    i    <    vs.length;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
99	[BUG]  [BUGGY]  pendSizes.add(result);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  pendSizes.add(result);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	pendSizes.add(result);	  pendSizes.add(v);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
100	[BUG]  [BUGGY]  luate(v)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(v)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)    {    for(int    i    =    0;    i    <    v;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
101	[BUG]  [BUGGY]  luate(f,  v)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(f,  v)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(f,  v)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)    {    for(int    i    =    0;    i    <    v;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
102	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR  =  n;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR  =  n;  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FACTOR  =  n;	  Opcodes.IASTORE_DETERMINISTIC_FACTOR;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
103	[BUG]  [BUGGY]  srcDerivativesIndirection.add(function);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection.add(function);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection.add(function);	  srcDerivativesIndirection.add(v);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  srcDerivativesIndirection.add(result);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection.add(result);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection.add(result);	  srcDerivativesIndirection.add(v);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  cteline(v,  resultOffset,  n  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cteline(v,  resultOffset,  n  +  1);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cteline(v,  resultOffset,  n  +  1);	  côteline(v,    resultOffset,    n);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  cast(f,  v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cast(f,  v,  resultOffset);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(f,  v,  resultOffset);	  cast(n,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
107	[BUG]  [BUGGY]  luate(v,  n)>  1)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(v,  n)>  1)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v,  n)>  1)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  luate(v,    n)>    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
108	[BUG]  [BUGGY]  luate(f,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(f,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(f,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  luate(v,    n)>    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
109	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  operandOffset;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  operandOffset;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  operandOffset;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }	  Opcodes.IASTORE_OPTIONAL_PARAM)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    Opcodes.IASTORE_OPTIONAL_PARAM;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
110	[BUG]  [BUGGY]  luate(f,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(f,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(f,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  luate(v,    n)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
111	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  resultOffset,  v);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  NeighborTraversal.traverse(compiler,  resultOffset,  v);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  resultOffset,  v);	  NeighborTraversal.traverse(compiler,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
112	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Integer  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Integer  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  For(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  >  expected	7	None	replace
113	[BUG]  [BUGGY]  Opcodes.WARNING(this,  v,  resultOffset,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.WARNING(this,  v,  resultOffset,  n);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.WARNING(this,  v,  resultOffset,  n);	  Opcodes.WARNING(this,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
114	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_MILLIS  =  true;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_MILLIS  =  true;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_MILLIS  =  true;	  if(n    >    0)    {    for(int    i    =    0;    i    <    v.length;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
115	[BUG]  [BUGGY]  Opcodes.IASTORE_OPCODES[n]  =  f;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPCODES[n]  =  f;  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPCODES[n]  =  f;	  if(n    >    0)    {    for(int    i    =    0;    i    <    v.length;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
116	[BUG]  [BUGGY]  n  >  0)  {  compose(operand[i],  result[i]);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0)  {  compose(operand[i],  result[i]);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(operand[i],  result[i]);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i]);    }    	non-compiled	[CE]  not  a  statement	47	None	replace
117	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  v,  resultOffset,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  NeighborTraversal.traverse(compiler,  v,  resultOffset,  n);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  v,  resultOffset,  n);	  NeighborTraversal.traverse(compiler,    v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
118	[BUG]  [BUGGY]  cast(v,  resultOffset,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cast(v,  resultOffset,  n  +  1);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(v,  resultOffset,  n  +  1);	  cast(v,    resultOffset,    n);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
119	[BUG]  [BUGGY]  cnteices.put(v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  cnteices.put(v,  resultOffset);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cnteices.put(v,  resultOffset);	  côteices.put(v,    resultOffset);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
120	[BUG]  [BUGGY]  n  >  0.0)  {  compose(result,  resultOffset,  i);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0.0)  {  compose(result,  resultOffset,  i);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(result,  resultOffset,  i);	  n    >    0.0)    {    compose(v,    result,    i);    	non-compiled	[CE]  not  a  statement	42	None	replace
121	[BUG]  [BUGGY]  if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(result[i],  result[i][i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(result[i],  result[i][i]);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(result[i],  result[i][i]);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand[i],    result[i][i]);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
122	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i];  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  function[i];  }	  Opcodes.IASTORE_OPTIONAL_PARAM)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	38	None	replace
123	[BUG]  [BUGGY]  luate(v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }	  luate(v,    n)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
124	[BUG]  [BUGGY]  Context.checkState(v  <  0  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Context.checkState(v  <  0  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Context.checkState(v  <  0  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	  Context.checkState(n    <    0    ||    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
125	[BUG]  [BUGGY]  if(v  >  0.0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  new  double[f.length];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  if(v  >  0.0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  new  double[f.length];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(v  >  0.0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  new  double[f.length];  }	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    f[i];    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
126	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  v,  result,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  NeighborTraversal.traverse(compiler,  v,  result,  n);  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  v,  result,  n);	  NeighborTraversal.traverse(compiler,    v,    result);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
127	[BUG]  [BUGGY]  srcDerivativesIndirection.add(dRow,  v);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection.add(dRow,  v);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection.add(dRow,  v);	  srcDerivativesIndirection.add(v);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
128	[BUG]  [BUGGY]  srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection(resultOffset);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection(resultOffset);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection(resultOffset);	  srcDerivativesIndirection    =    compilers.getSrcDerivativesIndirection();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
129	[BUG]  [BUGGY]  ||(v  >  0  &&  operand[i]  <  =  v))  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  ||(v  >  0  &&  operand[i]  <  =  v))  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(v  >  0  &&  operand[i]  <  =  v))  {  operand[i]  =  v[i];  }	  ||(v    >    0    &&    operand[i]    <    resultOffset))    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
130	[BUG]  [BUGGY]  operand[n]  =  v  *  v;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  operand[n]  =  v  *  v;  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  v  *  v;	  operand[n]    =    v[i];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
131	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  operandOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  operandOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(n  >  0)  {  for(int  i  =  0;  i  <  operandOffset;  i++)  {  operand[i]  =  v[i];  }	  if(n    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
132	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  i++)  {  compose(op,  result,  i);  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  For(int  i  =  0;  i  <  2;  i++)  {  compose(op,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  2;  i++)  {  compose(op,  result,  i);  }	  For(int    i    =    0;    i    <    n;    i++)    {    compose(op,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
133	[BUG]  [BUGGY]  n  >  0.0)  {  compose(result,  resultOffset,  i);  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  n  >  0.0)  {  compose(result,  resultOffset,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(result,  resultOffset,  i);  }	  n    >    0.0)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	41	None	replace
134	[BUG]  [BUGGY]  Opcodes.isDerivative(function)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.isDerivative(function)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.isDerivative(function)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }	  Opcodes.isDerivative(f)&&    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	5	None	replace
135	[BUG]  [BUGGY]  Opcodes.isDerivative(v)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.isDerivative(v)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.isDerivative(v)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }	  Opcodes.isDerivative(f)&&    v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	5	None	replace
136	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  compose(v,  result,  i);  }  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  For(int  i  =  0;  i  <  2;  ++i)  {  compose(v,  result,  i);  }  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  2;  ++i)  {  compose(v,  result,  i);  }	  For(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	18	None	replace
137	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR,  n);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR,  n);  [BUGGY]        [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FACTOR,  n);	  Opcodes.IASTORE_DETERMINISTIC_FACTOR;    	non-compiled	[CE]  not  a  statement	34	None	replace
138	[BUG]  [BUGGY]  luate(v,  n)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);      [BUGGY]  luate(v,  n)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]      }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v,  n)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	  luate(n,    v)    {    for(int    i    =    0;    i    <    v;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
