bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cast(n,  v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  cast(n,  v,  resultOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(n,  v,  resultOffset);	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  pendSizes.add(v);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  pendSizes.add(v);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	pendSizes.add(v);	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  operand[n]  =  v[i];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  operand[n]  =  v[i];  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  v[i];	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  operand[i]  =  v[i];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  operand[i]  =  v[i];  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[i]  =  v[i];	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  Opcodes.isDerivative(f)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.isDerivative(f)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.isDerivative(f)&&  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	1	None	replace
6	[BUG]  [BUGGY]  Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IS_OPTIONAL_MODULE)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	1	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  compose(op,  result,  i);  }  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  compose(op,  result,  i);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n;  i++)  {  compose(op,  result,  i);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
9	[BUG]  [BUGGY]  côteline(v,  resultOffset,  n);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  côteline(v,  resultOffset,  n);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	côteline(v,  resultOffset,  n);	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  cast(v,  resultOffset,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  cast(v,  resultOffset,  n);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	cast(v,  resultOffset,  n);	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection();  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection  =  compilers.getSrcDerivativesIndirection();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  srcDerivativesIndirection.add(v);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  srcDerivativesIndirection.add(v);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	srcDerivativesIndirection.add(v);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(op,  0,  result,  0,  n  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  System.arraycopy(op,  0,  result,  0,  n  +  1);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	System.arraycopy(op,  0,  result,  0,  n  +  1);	  System.arraycopy(op,    0,    result,    0,    n);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  ||(v  >  0  &&  operand[i]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  ||(v  >  0  &&  operand[i]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(v  >  0  &&  operand[i]!=  v[i]))  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  ||(v  >  0  &&  operand[i]  <  resultOffset))  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  ||(v  >  0  &&  operand[i]  <  resultOffset))  {  operand[i]  =  v[i];  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	||(v  >  0  &&  operand[i]  <  resultOffset))  {  operand[i]  =  v[i];  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  Context.checkState(n  <  0  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Context.checkState(n  <  0  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Context.checkState(n  <  0  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
17	[BUG]  [BUGGY]  operand[n]  =  v[i]  *  f;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  operand[n]  =  v[i]  *  f;  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	operand[n]  =  v[i]  *  f;	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  ++i)  {  compose(v,  result,  i);  }  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  For(int  i  =  0;  i  <  n;  ++i)  {  compose(v,  result,  i);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n;  ++i)  {  compose(v,  result,  i);  }	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	7	None	replace
19	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  ++i)  {  compose(op,  result,  i);  }  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  For(int  i  =  0;  i  <  n;  ++i)  {  compose(op,  result,  i);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	For(int  i  =  0;  i  <  n;  ++i)  {  compose(op,  result,  i);  }	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  '.class'  expected	7	None	replace
20	[BUG]  [BUGGY]  luate(v,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  luate(v,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
21	[BUG]  [BUGGY]  luate(v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  luate(v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i  +  1);  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  not  a  statement	10	None	replace
22	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM  ||  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	4	None	replace
23	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM  ||  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM  ||  v  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  function[i];  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	4	None	replace
24	[BUG]  [BUGGY]  Opcodes.WARNING(this,  v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.WARNING(this,  v,  resultOffset);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.WARNING(this,  v,  resultOffset);	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  Integer  v  =  createInteger(resultOffset);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Integer  v  =  createInteger(resultOffset);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Integer  v  =  createInteger(resultOffset);	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  Integer  v  =  createInteger(n);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Integer  v  =  createInteger(n);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Integer  v  =  createInteger(n);	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FACTOR)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
28	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FIRST  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FIRST  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FIRST  ||  v  >  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i]  *  f;  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
29	[BUG]  [BUGGY]  luate(n,  v)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  luate(n,  v)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  v)  {  for(int  i  =  0;  i  <  v;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(n,  v)>  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand,  operandOffset,  0,  i);  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(operand,  0,  result,  0,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  System.arraycopy(operand,  0,  result,  0,  n);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	System.arraycopy(operand,  0,  result,  0,  n);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  luate(v,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  luate(v,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v,  n)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
33	[BUG]  [BUGGY]  luate(v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  luate(v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	luate(v,  n)>  0)  {  for(int  i  =  0;  i  <  n;  i++)  {  compose(v,  result,  i);  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
34	[BUG]  [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IASTORE_DETERMINISTIC_FACTOR;  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_DETERMINISTIC_FACTOR;	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	1	None	replace
35	[BUG]  [BUGGY]  if(v  >  0.0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  f[i];  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  if(v  >  0.0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  f[i];  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(v  >  0.0)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  f[i];  }	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  v,  result);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  NeighborTraversal.traverse(compiler,  v,  result);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  v,  result);	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  NeighborTraversal.traverse(compiler,  v,  resultOffset);  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	NeighborTraversal.traverse(compiler,  v,  resultOffset);	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  v[i];  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	1	None	replace
39	[BUG]  [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	Opcodes.IASTORE_OPTIONAL_PARAM)  {  for(int  i  =  0;  i  <  n;  i++)  {  operand[i]  =  Opcodes.IASTORE_OPTIONAL_PARAM;  }	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  not  a  statement	1	None	replace
40	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(n  >  0)  {  for(int  i  =  0;  i  <  resultOffset;  i++)  {  operand[i]  =  v[i];  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    resultOffset;    i++)    {    operand[i]    =    v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  n  >  0.0)  {  compose(v,  result,  i);  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  n  >  0.0)  {  compose(v,  result,  i);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(v,  result,  i);  }	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
42	[BUG]  [BUGGY]  n  >  0.0)  {  compose(v,  result,  i);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  n  >  0.0)  {  compose(v,  result,  i);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0.0)  {  compose(v,  result,  i);	  if(v    >    0.0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
43	[BUG]  [BUGGY]  n  >  0)  {  compose(operand,  operandOffset,  0,  i);  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  n  >  0)  {  compose(operand,  operandOffset,  0,  i);  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(operand,  operandOffset,  0,  i);  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
44	[BUG]  [BUGGY]  n  >  0)  {  compose(operand,  operandOffset,  0,  v);  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  n  >  0)  {  compose(operand,  operandOffset,  0,  v);  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	n  >  0)  {  compose(operand,  operandOffset,  0,  v);  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    ++i)    {    compose(operand,    operandOffset,    0,    i);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
45	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(n  >  0)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  operand[i]  =  v[i]  *  f;  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  vs.length;  i++)  {  operand[i]  =  v[i]  *  f;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  if(n  >  0)  {  for(int  i  =  0;  i  <  vs.length;  i++)  {  operand[i]  =  v[i]  *  f;  }  [BUGGY]    }  [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(n  >  0)  {  for(int  i  =  0;  i  <  vs.length;  i++)  {  operand[i]  =  v[i]  *  f;  }	      if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    operand[i]    =    v[i]    *    f;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	if(v  >  0)  {  for(int  i  =  0;  i  <  n;  ++i)  {  compose(operand[i],  result[i][i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  côteices.put(v,  resultOffset);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  côteices.put(v,  resultOffset);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	côteices.put(v,  resultOffset);	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  côteices.put(v,  result);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    coeff  *=  f;  function[n]  =  coeff  *  v;  }  }  compose(operand,  operandOffset,  function,  result,  resultOffset);    [BUGGY]  côteices.put(v,  result);  [BUGGY]      [CLASS]  DSCompiler  [METHOD]  atan  [RETURN_TYPE]  void  final  double[]  operand  final  int  operandOffset  final  double[]  result  final  int  resultOffset  [VARIABLES]  int[][][]  compIndirection  multIndirection  int[][]  dRow  derivativesIndirection  destSizes  mappingI  sizes  srcDerivativesIndirection  boolean  double[]  function  operand  q  result  double  coeff  f  v  x  x2  AtomicReference  compilers  int[]  derivedTermF  derivedTermG  lowerIndirection  orders  term  termJ  termK  int  dSize  derivativeOrder  destO  destP  diag  i  index  j  k  l  lhsOffset  m  maxOrder  maxParameters  n  o  offset1  offset2  offset3  offset4  operandOffset  order  ordersSum  p  parameters  resultOffset  rhsOffset  srcP  vSize  xOffset  yOffset  	projects/Math10/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java	0.5	1370	1370	1	replace	côteices.put(v,  result);	  if(v    >    0)    {    for(int    i    =    0;    i    <    n;    i++)    {    compose(v,    result,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
