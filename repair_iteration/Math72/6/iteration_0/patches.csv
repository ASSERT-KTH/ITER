bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(Math.abs(yMax)  <  =  sign)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]  }  else  if(Math.abs(yMax)  <  =  sign)  {  [BUGGY]  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	}  else  if(Math.abs(yMax)  <  =  sign)  {	}  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  }  else  if(Math.abs(yMax)  <  functionValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]  }  else  if(Math.abs(yMax)  <  functionValueAccuracy)  {  [BUGGY]  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	}  else  if(Math.abs(yMax)  <  functionValueAccuracy)  {	}  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]    [CE]  [FE]        AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    [BUGGY]  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	  	}  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]    ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);		non-compiled	[CE]  	12	None	add
5	[BUG]  [BUGGY]    ret  =  solve(f,  sign,  yMin,  max,  yMax,  min,  yMin);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  sign,  yMin,  max,  yMax,  min,  yMin);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  sign,  yMin,  max,  yMax,  min,  yMin);		non-compiled	[CE]  	12	None	add
6	[BUG]  [BUGGY]    ret  =  solve(f,  sign,  yMin,  min,  yMax);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  sign,  yMin,  min,  yMax);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  sign,  yMin,  min,  yMax);		non-compiled	[CE]  	12	None	add
7	[BUG]  [BUGGY]    ret  =  solve(f,  sign,  yMin,  max,  min,  yMin);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  sign,  yMin,  max,  min,  yMin);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  sign,  yMin,  max,  min,  yMin);		non-compiled	[CE]  	12	None	add
8	[BUG]  [BUGGY]    ret  =  solve(f,  min,  yMin,  max,  yMax,  sign,  yMin);  [CE]  [FE]            AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  min,  yMin,  max,  yMax,  sign,  yMin);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  min,  yMin,  max,  yMax,  sign,  yMin);		non-compiled	[CE]  	12	None	add
9	[BUG]  [BUGGY]    ret  =  solve(f,  min,  yMin,  max);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  min,  yMin,  max);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  min,  yMin,  max);		non-compiled	[CE]  	12	None	add
10	[BUG]  [BUGGY]    ret  =  solve(f,  min,  yMax,  min,  yMin);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  min,  yMax,  min,  yMin);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  min,  yMax,  min,  yMin);		non-compiled	[CE]  	12	None	add
11	[BUG]  [BUGGY]    ret  =  solve(f,  min,  yMin,  max,  yMax);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    ret  =  solve(f,  min,  yMin,  max,  yMax);  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    ret  =  solve(f,  min,  yMin,  max,  yMax);		non-compiled	[CE]  	12	None	add
12	[BUG]  [BUGGY]  }  else  if(Math.abs(yMax)  <  =  min)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]  }  else  if(Math.abs(yMax)  <  =  min)  {  [BUGGY]  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	}  else  if(Math.abs(yMax)  <  =  min)  {	}  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  	non-compiled	[CE]  	11	None	replace
13	[BUG]  [BUGGY]  }  else  if(Math.abs(yMax)  <  =  Sign)  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]  }  else  if(Math.abs(yMax)  <  =  Sign)  {  [BUGGY]  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	}  else  if(Math.abs(yMax)  <  =  Sign)  {	}  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  	non-compiled	[CE]  	11	None	replace
14	[BUG]  [BUGGY]  }  else  if(Math.abs(max)  <  =  functionValueAccuracy)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]  }  else  if(Math.abs(max)  <  =  functionValueAccuracy)  {  [BUGGY]  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	}  else  if(Math.abs(max)  <  =  functionValueAccuracy)  {	}  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  }  else  if(Math.abs(ymax)  <  =  sign)  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]  }  else  if(Math.abs(ymax)  <  =  sign)  {  [BUGGY]  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	}  else  if(Math.abs(ymax)  <  =  sign)  {	}  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  	non-compiled	[CE]  	11	None	replace
16	[BUG]  [BUGGY]    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  [CE]  [FE]    AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }		non-compiled	[CE]  	12	None	add
17	[BUG]  [BUGGY]    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  sign,  y  [CE]  [FE]      AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  sign,  y  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  sign,  y		non-compiled	[CE]  	12	None	add
18	[BUG]  [BUGGY]    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  sign,  yMin  [CE]  [FE]        AssertionFailedError  [CONTEXT]  double  yMin  =  f.value(min);  double  yMax  =  f.value(max);  double  sign  =  yMin  *  yMax;  if  (sign  >  0)  {  if  (Math.abs(yMin)  <=  functionValueAccuracy)  {  setResult(min,  0);  ret  =  min;  [BUGGY]    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  sign,  yMin  [BUGGY]  }  else  if  (Math.abs(yMax)  <=  functionValueAccuracy)  {  setResult(max,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  min,  max,  yMin,  yMax);  }  }  else  if  (sign  <  0){  ret  =  solve(f,  min,  yMin,  max,  yMax,  min,  yMin);  [CLASS]  BrentSolver  [METHOD]  solve  [RETURN_TYPE]  double  UnivariateRealFunction  f  final  double  min  final  double  max  [VARIABLES]  UnivariateRealFunction  f  String  NON_BRACKETING_MESSAGE  boolean  long  serialVersionUID  double  max  min  ret  sign  yMax  yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	    if(Math.abs(yMax)  <  =  Math.abs(yMax))  {  setResult(min,  0);  ret  =  max;  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(  NON_BRACKETING_MESSAGE,  sign,  yMin		non-compiled	[CE]  	12	None	add
