bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
61	[BUG] [BUGGY] if (Math.abs(y1) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } [BUGGY] if (Math.abs(y1) <= functionValueAccuracy) { [BUGGY]    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	243	243	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } [BUGGY] [BUGGY] if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	243	243	1	add	
