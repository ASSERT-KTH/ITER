bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] setResult(yMin, 0); [FE] AssertionFailedError [CONTEXT]  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { [BUGGY] setResult(yMin, 0); [BUGGY] return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	115	115	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { [BUGGY] [BUGGY] setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	115	115	1	add	
3	[BUG] [BUGGY] return result; [FE] AssertionFailedError [CONTEXT] double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); [BUGGY] return result; [BUGGY] }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	116	116	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); [BUGGY] [BUGGY] return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	116	116	1	add	
5	[BUG] [BUGGY] setResult(max, 0); [FE] AssertionFailedError [CONTEXT] double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { [BUGGY] setResult(max, 0); [BUGGY] ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); } else { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	184	184	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { [BUGGY] [BUGGY] setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); } else { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	184	184	1	add	
7	[BUG] [BUGGY] ret = max; [FE] AssertionFailedError [CONTEXT]  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); [BUGGY] ret = max; [BUGGY] } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); } else {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	185	185	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); [BUGGY] [BUGGY] ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); } else {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	1.0	185	185	1	add	
9	[BUG] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [BUGGY] setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	180	180	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [BUGGY] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	180	180	1	add	
11	[BUG] [BUGGY] } else if (Math.abs(yMax) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; [BUGGY] } else if (Math.abs(yMax) <= functionValueAccuracy) { [BUGGY] setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; [BUGGY] [BUGGY] } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.7071067811865475	183	183	1	add	
13	[BUG] [BUGGY] clearResult(); [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { [BUGGY] clearResult(); [BUGGY] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	102	102	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { [BUGGY] [BUGGY] clearResult(); verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	102	102	1	add	
15	[BUG] [BUGGY] verifySequence(min, initial, max); [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); [BUGGY] verifySequence(min, initial, max); [BUGGY]   double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	103	103	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); [BUGGY] [BUGGY] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	103	103	1	add	
17	[BUG] [BUGGY] double yInitial = f.value(initial); [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  [BUGGY] double yInitial = f.value(initial); [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	106	106	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  [BUGGY] [BUGGY] double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	106	106	1	add	
19	[BUG] [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  double yInitial = f.value(initial); [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { [BUGGY] setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	107	107	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max);  double yInitial = f.value(initial); [BUGGY] [BUGGY] if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	107	107	1	add	
21	[BUG] [BUGGY] double yMin = f.value(min); [FE] AssertionFailedError [CONTEXT] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  [BUGGY] double yMin = f.value(min); [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	113	113	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] verifySequence(min, initial, max);  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  [BUGGY] [BUGGY] double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	113	113	1	add	
23	[BUG] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT]  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { [BUGGY] setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	114	114	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }  double yMin = f.value(min); [BUGGY] [BUGGY] if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; }  if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); }   [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max final double initial [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double initial max min yInitial yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	114	114	1	add	
25	[BUG] [BUGGY] setResult(x1, i); [FE] AssertionFailedError [CONTEXT] x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    [BUGGY] setResult(x1, i); [BUGGY] return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	247	247	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    [BUGGY] [BUGGY] setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	247	247	1	add	
27	[BUG] [BUGGY] return result; [FE] AssertionFailedError [CONTEXT] x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); [BUGGY] return result; [BUGGY] } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	248	248	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); [BUGGY] [BUGGY] return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.5773502691896258	248	248	1	add	
29	[BUG] [BUGGY] super(100, 1E-6); [FE] AssertionFailedError [CONTEXT] public BrentSolver() { [BUGGY] super(100, 1E-6); [BUGGY] } [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	61	61	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public BrentSolver() { [BUGGY] [BUGGY] super(100, 1E-6); } [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	61	61	1	add	
31	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public BrentSolver() { super(100, 1E-6); [BUGGY] } [BUGGY]  [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	62	62	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public BrentSolver() { super(100, 1E-6); [BUGGY] [BUGGY] } [CLASS] BrentSolver [METHOD] <init> [RETURN_TYPE] BrentSolver()  [VARIABLES] long serialVersionUID String NON_BRACKETING_MESSAGE boolean  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	62	62	1	add	
33	[BUG] [BUGGY] } else if (sign < 0){ [FE] AssertionFailedError [CONTEXT] setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [BUGGY] } else if (sign < 0){ [BUGGY]  ret = solve(f, min, yMin, max, yMax, min, yMin); } else {  if (yMin == 0.0) { ret = min; } else { ret = max; } } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	191	191	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } [BUGGY] [BUGGY] } else if (sign < 0){  ret = solve(f, min, yMin, max, yMax, min, yMin); } else {  if (yMin == 0.0) { ret = min; } else { ret = max; } } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	191	191	1	add	
35	[BUG] [BUGGY] ret = solve(f, min, yMin, max, yMax, min, yMin); [FE] AssertionFailedError [CONTEXT] } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  [BUGGY] ret = solve(f, min, yMin, max, yMax, min, yMin); [BUGGY] } else {  if (yMin == 0.0) { ret = min; } else { ret = max; } } return ret; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	193	193	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( NON_BRACKETING_MESSAGE, min, max, yMin, yMax); } } else if (sign < 0){  [BUGGY] [BUGGY] ret = solve(f, min, yMin, max, yMax, min, yMin); } else {  if (yMin == 0.0) { ret = min; } else { ret = max; } } return ret; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	193	193	1	add	
37	[BUG] [BUGGY] return ret; [FE] AssertionFailedError [CONTEXT] ret = solve(f, min, yMin, max, yMax, min, yMin); } else {  if (yMin == 0.0) { ret = min; } else { ret = max; } } [BUGGY] return ret; [BUGGY] } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	203	203	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ret = solve(f, min, yMin, max, yMax, min, yMin); } else {  if (yMin == 0.0) { ret = min; } else { ret = max; } } [BUGGY] [BUGGY] return ret; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	203	203	1	add	
39	[BUG] [BUGGY] double delta = x1 - x0; [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { [BUGGY] double delta = x1 - x0; [BUGGY] double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	229	229	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { [BUGGY] [BUGGY] double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	229	229	1	add	
41	[BUG] [BUGGY] double oldDelta = delta; [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; [BUGGY] double oldDelta = delta; [BUGGY]  int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	230	230	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; [BUGGY] [BUGGY] double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	230	230	1	add	
43	[BUG] [BUGGY] int i = 0; [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; [BUGGY] int i = 0; [BUGGY] while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	232	232	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; [BUGGY] [BUGGY] int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	232	232	1	add	
45	[BUG] [BUGGY] while (i < maximalIterationCount) { [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; [BUGGY] while (i < maximalIterationCount) { [BUGGY] if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	233	233	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; [BUGGY] [BUGGY] while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	233	233	1	add	
47	[BUG] [BUGGY] if (Math.abs(y2) < Math.abs(y1)) { [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { [BUGGY] if (Math.abs(y2) < Math.abs(y1)) { [BUGGY]  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	234	234	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { [BUGGY] [BUGGY] if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	234	234	1	add	
49	[BUG] [BUGGY] x0 = x1; [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  [BUGGY] x0 = x1; [BUGGY] x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	236	236	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  [BUGGY] [BUGGY] x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	236	236	1	add	
51	[BUG] [BUGGY] x1 = x2; [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; [BUGGY] x1 = x2; [BUGGY] x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	237	237	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; [BUGGY] [BUGGY] x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	237	237	1	add	
53	[BUG] [BUGGY] x2 = x0; [FE] AssertionFailedError [CONTEXT] double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; [BUGGY] x2 = x0; [BUGGY] y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	238	238	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; [BUGGY] [BUGGY] x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	238	238	1	add	
55	[BUG] [BUGGY] y0 = y1; [FE] AssertionFailedError [CONTEXT] double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; [BUGGY] y0 = y1; [BUGGY] y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	239	239	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; [BUGGY] [BUGGY] y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	239	239	1	add	
57	[BUG] [BUGGY] y1 = y2; [FE] AssertionFailedError [CONTEXT] double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; [BUGGY] y1 = y2; [BUGGY] y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	240	240	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; [BUGGY] [BUGGY] y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	240	240	1	add	
59	[BUG] [BUGGY] y2 = y0; [FE] AssertionFailedError [CONTEXT] int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; [BUGGY] y2 = y0; [BUGGY] } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	241	241	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; [BUGGY] [BUGGY] y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	241	241	1	add	
61	[BUG] [BUGGY] if (Math.abs(y1) <= functionValueAccuracy) { [FE] AssertionFailedError [CONTEXT] while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } [BUGGY] if (Math.abs(y1) <= functionValueAccuracy) { [BUGGY]    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	243	243	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) {  x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } [BUGGY] [BUGGY] if (Math.abs(y1) <= functionValueAccuracy) {    setResult(x1, i); return result; } double dx = x2 - x1; double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f double x0 double y0 double x1 double y1 double x2 double y2 [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double delta dx oldDelta p p1 r1 r2 r3 tolerance x0 x1 x2 y0 y1 y2 int i  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4472135954999579	243	243	1	add	
63	[BUG] [BUGGY] clearResult(); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { [BUGGY] clearResult(); [BUGGY] verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	168	168	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { [BUGGY] [BUGGY] clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	168	168	1	add	
65	[BUG] [BUGGY] verifyInterval(min, max); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); [BUGGY] verifyInterval(min, max); [BUGGY]  double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	169	169	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); [BUGGY] [BUGGY] verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	169	169	1	add	
67	[BUG] [BUGGY] double ret = Double.NaN; [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); [BUGGY] double ret = Double.NaN; [BUGGY]  double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	171	171	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); [BUGGY] [BUGGY] double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	171	171	1	add	
69	[BUG] [BUGGY] double yMin = f.value(min); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; [BUGGY] double yMin = f.value(min); [BUGGY] double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	173	173	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; [BUGGY] [BUGGY] double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	173	173	1	add	
71	[BUG] [BUGGY] double yMax = f.value(max); [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); [BUGGY] double yMax = f.value(max); [BUGGY]   double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	174	174	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); [BUGGY] [BUGGY] double yMax = f.value(max);  double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	174	174	1	add	
73	[BUG] [BUGGY] double sign = yMin * yMax; [FE] AssertionFailedError [CONTEXT] clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  [BUGGY] double sign = yMin * yMax; [BUGGY] if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	177	177	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  [BUGGY] [BUGGY] double sign = yMin * yMax; if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	177	177	1	add	
75	[BUG] [BUGGY] if (sign > 0) { [FE] AssertionFailedError [CONTEXT] clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; [BUGGY] if (sign > 0) { [BUGGY]  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	178	178	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max);  double sign = yMin * yMax; [BUGGY] [BUGGY] if (sign > 0) {  if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {  throw MathRuntimeException.createIllegalArgumentException( [CLASS] BrentSolver [METHOD] solve [RETURN_TYPE] double  UnivariateRealFunction f final double min final double max [VARIABLES] UnivariateRealFunction f String NON_BRACKETING_MESSAGE boolean long serialVersionUID double max min ret sign yMax yMin  	projects/Math72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java	0.4082482904638631	178	178	1	add	
