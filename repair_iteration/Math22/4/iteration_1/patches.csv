bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2;  final  double  mhalf  =  nhalf  /  2;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  nhalf  /  2;  final  double  mhalf  =  nhalf  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2;    final  double  mhalf  =  nhalf  /  2;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	3	None	add
2	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2;  Final  double  mhalf  =  nhalf  /  2;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  nhalf  /  2;  Final  double  mhalf  =  nhalf  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2;    Final  double  mhalf  =  nhalf  /  2;	  	non-compiled	[CE]  not  a  statement	3	None	add
3	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	1	None	add
4	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	1	None	add
5	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  nonmeratorDegreesOfFreedom  /  2;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  nonmeratorDegreesOfFreedom  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    final  double  mhalf  =  nonmeratorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	1	None	add
6	[BUG]  [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  numeratorDegreesOfFreedom  /  2;	      	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	replace
7	[BUG]  [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom.doubleValue();  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  numeratorDegreesOfFreedom.doubleValue();	      	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	replace
8	[BUG]  [BUGGY]  nhalf  =  FastMath.log(nhalf);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  nhalf  =  FastMath.log(nhalf);  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	nhalf  =  FastMath.log(nhalf);	      nhalf    =    FastMath.log(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	9	None	replace
9	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(x);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  double  nhalf  =  FastMath.log(x);  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  FastMath.log(x);	      nhalf    =    FastMath.log(x);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	9	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    nhalf    /    2;    	compilable	  [FE]  AssertionError  	4	4	replace
11	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    nhalf    /    2;    	compilable	  [FE]  AssertionError  	4	4	replace
12	[BUG]  [BUGGY]  final  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);	      	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	replace
13	[BUG]  [BUGGY]  final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);	      	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	replace
14	[BUG]  [BUGGY]  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	nhalf  =  FastMath.log(denominatorDegreesOfFreedom);	      nhalf    =    FastMath.log(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	9	None	replace
15	[BUG]  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	      final    double    nhalf    =    numeratorDegreesOfFreedom    /    2;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	8	None	replace
16	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  1;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  1;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  1;	      final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	6	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    	compilable	  [FE]  AssertionError  	2	4	replace
18	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    	compilable	  [FE]  AssertionError  	2	4	replace
19	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  desominatorDegreesOfFreedom  /  2;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  desominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    final  double  mhalf  =  desominatorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	1	None	add
20	[BUG]  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  4;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  4;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  numeratorDegreesOfFreedom  /  4;	      final    double    nhalf    =    denominatorDegreesOfFreedom    /    4;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	10	None	replace
21	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;    [BUGGY]  final  double  mhalf  =  nhalf  /  2;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;  [BUGGY]    final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2;    final  double  mhalf  =  numeratorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	3	None	add
