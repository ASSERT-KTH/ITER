bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	10	None	add
2	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  desominatorDegreesOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  desominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    final  double  mhalf  =  nhalf  /  2  +  desominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	10	None	add
3	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  DEDENOMINATORDegreesOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  DEDENOMINATORDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    final  double  mhalf  =  nhalf  /  2  +  DEDENOMINATORDegreesOfFreedom;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	10	None	add
4	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	15	None	replace
5	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);	  double    nhalf    =    FastMath.log(x);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	9	None	replace
6	[BUG]  [BUGGY]  final  double  nhalf  =  FastMath.log(x);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  nhalf  =  FastMath.log(x);  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  FastMath.log(x);	  double    nhalf    =    FastMath.log(x);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	9	None	replace
7	[BUG]  [BUGGY]  final  double  mhalf  =  nonmeratorDegreesOfFreedom  /  2;  [CE]  cannot  find  symbol  nonmeratorDegreesOfFreedom  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nonmeratorDegreesOfFreedom  /  2;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  nonmeratorDegreesOfFreedom  /  2;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    final    double    mhalf    =    nonmeratorDegreesOfFreedom    /    2;    	non-compiled	[CE]  cannot  find  symbol  nonmeratorDegreesOfFreedom	5	None	replace
8	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	17	None	add
9	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	17	None	add
10	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorsOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorsOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorsOfFreedom;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	17	None	add
11	[BUG]  [BUGGY]  double  nhalf  =  denominatorDegreesOfFreedom.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  double  nhalf  =  denominatorDegreesOfFreedom.doubleValue();  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  denominatorDegreesOfFreedom.doubleValue();	  double    nhalf    =    numeratorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	7	None	replace
12	[BUG]  [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom.doubleValue()  /  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                    AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom.doubleValue()  /  2;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  numeratorDegreesOfFreedom.doubleValue()  /  2;	  double    nhalf    =    numeratorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	7	None	replace
13	[BUG]  [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  double    nhalf    =    numeratorDegreesOfFreedom    /    2;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	6	None	replace
14	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);	  nhalf    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	14	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	final  double  mhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	18	4	replace
16	[BUG]  [BUGGY]  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	18	4	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	final  double  mhalf  =  numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	18	4	replace
18	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	18	4	replace
19	[BUG]  [BUGGY]  final  double  mhalf  =  desominatorDegreesOfFreedom  /  2;  [CE]  cannot  find  symbol  desominatorDegreesOfFreedom  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  desominatorDegreesOfFreedom  /  2;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  desominatorDegreesOfFreedom  /  2;	  final    double    mhalf    =    numeratorDegreesOfFreedom    /    2;    final    double    mhalf    =    desominatorDegreesOfFreedom    /    2;    	non-compiled	[CE]  cannot  find  symbol  desominatorDegreesOfFreedom	19	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  *  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	final  double  mhalf  =  nhalf  *  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	11	4	replace
21	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  *  2  +  denominatorDegreesOfFreedom;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  *  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  nhalf  *  2  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	11	4	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  nhalf;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  nhalf;	  final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	11	4	replace
23	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  nhalf;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  nhalf;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  nhalf;	  final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	11	4	replace
24	[BUG]  [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	17	None	add
25	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    final  double  nhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	10	None	add
26	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(nhalf);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  double  nhalf  =  FastMath.log(nhalf);  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  FastMath.log(nhalf);	  double    nhalf    =    FastMath.log(x);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	9	None	replace
27	[BUG]  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  1;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  1;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  1;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2    +    1;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	16	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	final  double  mhalf  =  nhalf  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	11	4	replace
29	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  +  denominatorDegreesOfFreedom;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  mhalf  =  nhalf  +  denominatorDegreesOfFreedom;	  final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	11	4	replace
30	[BUG]  [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  denominatorsDegreesOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  mhalf  =  nhalf  /  2  +  denominatorDegreesOfFreedom;  final  double  mhalf  =  nhalf  /  2  +  denominatorsDegreesOfFreedom;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final    double    mhalf    =    nhalf    /    2    +    denominatorDegreesOfFreedom;    final  double  mhalf  =  nhalf  /  2  +  denominatorsDegreesOfFreedom;	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	10	None	add
31	[BUG]  [BUGGY]  final  double  nhalf  =  FastMath.log(nhalf);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  final  double  nhalf  =  FastMath.log(nhalf);  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	final  double  nhalf  =  FastMath.log(nhalf);	  final    double    nhalf    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	13	None	replace
32	[BUG]  [BUGGY]  double  nhalf  =  x  /  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;      [BUGGY]  double  nhalf  =  x  /  2;  [BUGGY]      final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	double  nhalf  =  x  /  2;	  double    nhalf    =    numeratorDegreesOfFreedom    /    2;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	6	None	replace
