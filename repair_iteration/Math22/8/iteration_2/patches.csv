bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);  [CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    DEDENORATION_DESERIALIZE);    	non-compiled	[CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE	21	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x,  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	add	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x,  denominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    DEDENORATION_DESERIALIZE);    	compilable	  [FE]  AssertionError  	21	4	replace
3	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x,  denominatorDegreesOfFreedom);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x,  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x,  denominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    DEDENORATION_DESERIALIZE);    	compilable	  [FE]  AssertionError  	21	4	replace
4	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  desominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  desominatorDegreesOfFreedom  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  desominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  desominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    desominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  desominatorDegreesOfFreedom	7	None	replace
5	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	1	None	add
6	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  desominatorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  desominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  desominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	1	None	add
7	[BUG]  [BUGGY]  double  x  =  FastMath.log(nhalf,  mhalf);  [CE]  variable  x  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  double  x  =  FastMath.log(nhalf,  mhalf);  [BUGGY]      final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	double  x  =  FastMath.log(nhalf,  mhalf);	  double    x    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  density(double)	12	None	replace
8	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	3	None	add
9	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	3	None	add
10	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEDENOMINES_ABSOLUTE_ACCURACY);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEDENOMINES_ABSOLUTE_ACCURACY);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEDENOMINES_ABSOLUTE_ACCURACY);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	3	None	add
11	[BUG]  [BUGGY]  final  double  nhalf  =  FastMath.log(x);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  nhalf  =  FastMath.log(x);  [BUGGY]      final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  nhalf  =  FastMath.log(x);	  double    nhalf    =    FastMath.log(x);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	replace
12	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENORATION_DESERIALIZE);  [CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENORATION_DESERIALIZE);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENORATION_DESERIALIZE);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENORATION_DESERIALIZE);    	non-compiled	[CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE	20	None	replace
13	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEDENORATION_DESERIALIZE);  [CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEDENORATION_DESERIALIZE);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEDENORATION_DESERIALIZE);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENORATION_DESERIALIZE);    	non-compiled	[CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE	20	None	replace
14	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  DEDENOMINE_ABSOLUTE_ACCURACY  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINE_ABSOLUTE_ACCURACY);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINE_ABSOLUTE_ACCURACY);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENOMINE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  cannot  find  symbol  DEDENOMINE_ABSOLUTE_ACCURACY	15	None	replace
15	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEDENOMINE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  DEDENOMINE_ABSOLUTE_ACCURACY  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEDENOMINE_ABSOLUTE_ACCURACY);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEDENOMINE_ABSOLUTE_ACCURACY);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENOMINE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  cannot  find  symbol  DEDENOMINE_ABSOLUTE_ACCURACY	15	None	replace
16	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINESOFFREEDOM);  [CE]  cannot  find  symbol  DEDENOMINESOFFREEDOM  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINESOFFREEDOM);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINESOFFREEDOM);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENOMINESOFFreedom);    	non-compiled	[CE]  cannot  find  symbol  DEDENOMINESOFFREEDOM	8	None	replace
17	[BUG]  [BUGGY]  final  double  x  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  x  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  x  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]      final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  x  =  FastMath.log(numeratorDegreesOfFreedom);	  double    x    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  density(double)	16	None	replace
18	[BUG]  [BUGGY]  final  double  x  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  x  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  x  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]      final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  x  =  FastMath.log(denominatorDegreesOfFreedom);	  double    x    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  density(double)	13	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	add	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	19	4	replace
20	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	19	4	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	add	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	4	4	replace
22	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  2  +  denominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	4	4	replace
23	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numberDegreesOfFreedom);  [CE]  cannot  find  symbol  numberDegreesOfFreedom  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numberDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numberDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  numberDegreesOfFreedom	4	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	add	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	4	4	replace
25	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	4	4	replace
26	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);  [CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    DEDENORATION_DESERIALIZE);    	non-compiled	[CE]  cannot  find  symbol  DEDENORATION_DESERIALIZE	21	None	replace
27	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	3	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  1);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	add	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  1);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENOMINESOFFreedom);    	compilable	  [FE]  AssertionError  	8	4	replace
29	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  1);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  1);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  1);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENOMINESOFFreedom);    	compilable	  [FE]  AssertionError  	8	4	replace
30	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINES_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  DEDENOMINES_ABSOLUTE_ACCURACY  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINES_ABSOLUTE_ACCURACY);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEDENOMINES_ABSOLUTE_ACCURACY);	  final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    *    x    +    DEDENOMINESOFFreedom);    	non-compiled	[CE]  cannot  find  symbol  DEDENOMINES_ABSOLUTE_ACCURACY	8	None	replace
31	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  1,  desominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  desominatorDegreesOfFreedom  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  1,  desominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  1,  desominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    desominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  desominatorDegreesOfFreedom	11	None	replace
32	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  x  +  DEDENORATION_DESERIALIZE);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	1	None	add
33	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEDENORATION_DESERIALIZE);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEDENORATION_DESERIALIZE);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  2  +  DEDENORATION_DESERIALIZE);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	3	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	add	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	4	4	replace
35	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	4	4	replace
36	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  desominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  desominatorDegreesOfFreedom  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);      [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  desominatorDegreesOfFreedom);  [BUGGY]      denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  /  x  +  desominatorDegreesOfFreedom);	  final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    denominatorDegreesOfFreedom);    final    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    /    x    +    desominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  desominatorDegreesOfFreedom	11	None	replace
