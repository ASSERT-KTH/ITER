bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	    if(isSupportLowerBoundInclusive())  {  return  false;  }		compilable	  [FE]  StackOverflowError  	2	2	add
2	[BUG]  [BUGGY]    if(isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(isSupportLowerBoundInclusive())  {  return  false;  }		compilable	  [FE]  StackOverflowError  	2	2	add
3	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	    if(!isSupportLowerBoundInclusive())  {  return  false;  }		compilable	  [FE]  StackOverflowError  	2	2	add
4	[BUG]  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(!isSupportLowerBoundInclusive())  {  return  false;  }		compilable	  [FE]  StackOverflowError  	2	2	add
5	[BUG]  [BUGGY]    if(isSupportLowerBoundInclusive())  {  if(!numeratorDegreesOfFreedom)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(isSupportLowerBoundInclusive())  {  if(!numeratorDegreesOfFreedom)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(isSupportLowerBoundInclusive())  {  if(!numeratorDegreesOfFreedom)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	return  false;	return  true;  	compilable	  [FE]  AssertionError  	1	1	replace
7	[BUG]  [BUGGY]  return  false;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return  false;	return  true;  	compilable	  [FE]  AssertionError  	1	1	replace
8	[BUG]  [BUGGY]  return  numeratorDF.isSupportLowerBoundInclusive();  [CE]  cannot  find  symbol  numeratorDF  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return  numeratorDF.isSupportLowerBoundInclusive();  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return  numeratorDF.isSupportLowerBoundInclusive();	return  true;  	non-compiled	[CE]  cannot  find  symbol  numeratorDF	1	None	replace
9	[BUG]  [BUGGY]    if(isSupportLowerBoundInclusive())  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(isSupportLowerBoundInclusive())  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(isSupportLowerBoundInclusive())  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
10	[BUG]  [BUGGY]    if(isSupportLowerBoundInclusive())  {  if(numeratorDegreesOfFreedom!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(isSupportLowerBoundInclusive())  {  if(numeratorDegreesOfFreedom!=  null)  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(isSupportLowerBoundInclusive())  {  if(numeratorDegreesOfFreedom!=  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
11	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return!isSupportLowerBoundInclusive();  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	return!isSupportLowerBoundInclusive();	return  true;  	compilable	  [FE]  StackOverflowError  	1	2	replace
12	[BUG]  [BUGGY]  return!isSupportLowerBoundInclusive();  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return!isSupportLowerBoundInclusive();  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return!isSupportLowerBoundInclusive();	return  true;  	compilable	  [FE]  StackOverflowError  	1	2	replace
13	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	return  true;  	non-compiled	[CE]  ')'  expected	1	None	replace
14	[BUG]  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
15	[BUG]  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
16	[BUG]  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;		non-compiled	[CE]  illegal  start  of  expression	2	None	add
