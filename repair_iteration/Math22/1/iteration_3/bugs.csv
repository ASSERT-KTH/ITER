bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }	  for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.size();    i    <    len;    ++i)    {    numericalVarianceIsCalculated    =    true;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
2	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	                if(!isSupportLowerBoundInclusive())        {        return        false;        }        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	13	2	add
3	[BUG]  [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(!isSupportLowerBoundInclusive())        {        return        false;        }        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	13	2	add
4	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	                if(!isSupportLowerBoundInclusive())        {        return        false;        }        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	13	2	add
5	[BUG]  [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(!isSupportLowerBoundInclusive())        {        return        false;        }        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	13	2	add
6	[BUG]  [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(!isSupportLowerBoundInclusive())        {        return        false;        }        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
7	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin	  return(numeratorDegreesOfFreedom    >=    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denomin    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
8	[BUG]  [BUGGY]  null  =  numeratorDegreesOfFreedom.isSupportLowerBoundInclusive();  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  null  =  numeratorDegreesOfFreedom.isSupportLowerBoundInclusive();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	null  =  numeratorDegreesOfFreedom.isSupportLowerBoundInclusive();	  return    false;    if(numeratorDegreesOfFreedom    ==    null)    {    return    false;    }    	non-compiled	[CE]  unexpected  type	33	None	replace
9	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [CE]  missing  return  statement  [FE]        StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }	  return!isSupportLowerBoundInclusive();    return!isSupportLowerBoundInclusive();    	non-compiled	[CE]  missing  return  statement	16	None	replace
10	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	                if(isSupportLowerBoundInclusive())        {        return        false;        }        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	10	2	add
11	[BUG]  [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(isSupportLowerBoundInclusive())        {        return        false;        }        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	10	2	add
12	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	                if(isSupportLowerBoundInclusive())        {        return        false;        }        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	10	2	add
13	[BUG]  [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(isSupportLowerBoundInclusive())        {        return        false;        }        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	10	2	add
14	[BUG]  [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(isSupportLowerBoundInclusive())        {        return        false;        }        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
15	[BUG]  [BUGGY]  null  =  false;  if(isSupportLowerBoundInclusive())  {  return  true;  }  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  null  =  false;  if(isSupportLowerBoundInclusive())  {  return  true;  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	null  =  false;  if(isSupportLowerBoundInclusive())  {  return  true;  }	  return    false;    if(isSupportLowerBoundInclusive())    {    return    true;    }    	non-compiled	[CE]  unexpected  type	31	None	replace
16	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin	  return(numeratorDegreesOfFreedom    >    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF    >    denomin    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
17	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive())  {  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(isSupportLowerBoundInclusive())  {  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive())  {  if(!isSupportLowerBoundInclusive())  {  return  false;  }	          if(!isSupportLowerBoundInclusive())    {    return    false;    }    If(!isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive()  ||  isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  missing  return  statement  [FE]        StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(isSupportLowerBoundInclusive()  ||  isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive()  ||  isSupportLowerBoundInclusive())  {  return  false;  }	  if(isSupportLowerBoundInclusive())    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	1	None	replace
19	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  return  true;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  return  true;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom  ==  null)  {  return  true;  }	  if(numeratorDegreesOfFreedom    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	4	None	replace
20	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom)  {  return  false;  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(numeratorDegreesOfFreedom)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom)  {  return  false;  }	  if(!numeratorDegreesOfFreedom)    {    return    false;    }    	non-compiled	[CE]  incompatible  types	24	None	replace
21	[BUG]  [BUGGY]  if(!numeratorDegreesOfFreedom  &&  numeratorDF  <  denominatorDF)  {  return  false;  }  [CE]  bad  operand  type  double  for  unary  operator  '!'  [FE]                  AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(!numeratorDegreesOfFreedom  &&  numeratorDF  <  denominatorDF)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(!numeratorDegreesOfFreedom  &&  numeratorDF  <  denominatorDF)  {  return  false;  }	  if(!numeratorDegreesOfFreedom)    {    return    false;    }    	non-compiled	[CE]  bad  operand  type  double  for  unary  operator  '!'	24	None	replace
22	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive()  ||  denominatorDegreesOfFreedom)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(isSupportLowerBoundInclusive()  ||  denominatorDegreesOfFreedom)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive()  ||  denominatorDegreesOfFreedom)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }	  if(isSupportLowerBoundInclusive()    ||    numericalVarianceIsCalculated)    {    if(numeratorDegreesOfFreedom    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
23	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  <  =  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  <  =  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  <  =  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	  return(numeratorDegreesOfFreedom    <    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
24	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  <  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  <  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  <  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	  return(numeratorDegreesOfFreedom    <    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
25	[BUG]  [BUGGY]  if(!isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(!isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(!isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }	  return!isSupportLowerBoundInclusive();    if(!isSupportLowerBoundInclusive())    {    return!isSupportLowerBoundInclusive();    }    	non-compiled	[CE]  missing  return  statement	18	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }	  for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.size();    i    <    len;    ++i)    {    numericalVarianceIsCalculated    =    false;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
27	[BUG]  [BUGGY]  if(!isSupportLowerBoundInclusive())  {  return  true;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(!isSupportLowerBoundInclusive())  {  return  true;  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(!isSupportLowerBoundInclusive())  {  return  true;  }	  return    false;    if(!isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	23	None	replace
28	[BUG]  [BUGGY]  null  =  false;  if(isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  null  =  false;  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	null  =  false;  if(isSupportLowerBoundInclusive())  {  return  false;  }	  return    false;    if(isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  unexpected  type	21	None	replace
29	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	  return(numeratorDegreesOfFreedom    >=    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
30	[BUG]  [BUGGY]  return(numeratorDF!=  denominatorDF)||(null!=  denominatorDF);  [CE]  cannot  find  symbol  numeratorDF  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDF!=  denominatorDF)||(null!=  denominatorDF);  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDF!=  denominatorDF)||(null!=  denominatorDF);	  return(null!=    denominatorDF)||(null!=    denominatorDF);    	non-compiled	[CE]  cannot  find  symbol  numeratorDF	35	None	replace
31	[BUG]  [BUGGY]  return(numeratorDF  ==  denominatorDF)&&(null!=  denominatorDF);  [CE]  cannot  find  symbol  numeratorDF  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDF  ==  denominatorDF)&&(null!=  denominatorDF);  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDF  ==  denominatorDF)&&(null!=  denominatorDF);	  return(null    ==    numeratorDF)&&(null!=    denominatorDF);    	non-compiled	[CE]  cannot  find  symbol  numeratorDF	2	None	replace
32	[BUG]  [BUGGY]  return(null  ==  denominatorDF)&&(null!=  denominatorDF);  [CE]  cannot  find  symbol  denominatorDF  [FE]          AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(null  ==  denominatorDF)&&(null!=  denominatorDF);  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(null  ==  denominatorDF)&&(null!=  denominatorDF);	  return(null    ==    numeratorDF)&&(null!=    denominatorDF);    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	2	None	replace
33	[BUG]  [BUGGY]  ||  isSupportLowerBoundInclusive())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  ||  isSupportLowerBoundInclusive())  {  return  true;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	||  isSupportLowerBoundInclusive())  {  return  true;  }	  ||    isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  return(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  incomparable  types:  <null>  and  double  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  return(null!=    denominatorDF)||(null!=    denominatorDF);    	non-compiled	[CE]  incomparable  types:  <null>  and  double	35	None	replace
35	[BUG]  [BUGGY]  if(isSupportOverflowError())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(isSupportOverflowError())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportOverflowError())  {  return  false;  }	          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
36	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  return  true;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  return  true;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom!=  null)  {  return  true;  }	  if(numeratorDegreesOfFreedom    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	4	None	replace
37	[BUG]  [BUGGY]  return(null  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)&&(null!=  denominatorDF);  [CE]  incomparable  types:  <null>  and  double  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(null  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)&&(null!=  denominatorDF);  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(null  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)&&(null!=  denominatorDF);	  return(null    ==    numeratorDF)&&(null!=    denominatorDF);    	non-compiled	[CE]  incomparable  types:  <null>  and  double	2	None	replace
38	[BUG]  [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(isSupportLowerBoundInclusive())        {        return        false;        }        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
39	[BUG]  [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]          if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	                if(!isSupportLowerBoundInclusive())        {        return        false;        }        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
40	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive()  ||  isSupportLowerBoundInclusive())  {  return  true;  }  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(isSupportLowerBoundInclusive()  ||  isSupportLowerBoundInclusive())  {  return  true;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive()  ||  isSupportLowerBoundInclusive())  {  return  true;  }	          if(isSupportLowerBoundInclusive())    {    return    false;    }    If(isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	12	None	replace
41	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  if(isSupportLowerBoundInclusive()  ||  numericalVarianceIsCalculated)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  if(isSupportLowerBoundInclusive()  ||  numericalVarianceIsCalculated)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom!=  null)  {  if(isSupportLowerBoundInclusive()  ||  numericalVarianceIsCalculated)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return	  if(isSupportLowerBoundInclusive()    ||    numericalVarianceIsCalculated)    {    if(numeratorDegreesOfFreedom    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
42	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >	  return(numeratorDegreesOfFreedom    >=    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
43	[BUG]  [BUGGY]  ||  isSupportLowerBoundInclusive(denominatorDF))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  ||  isSupportLowerBoundInclusive(denominatorDF))  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	||  isSupportLowerBoundInclusive(denominatorDF))  {  return  false;  }	  ||    isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >  0)&&(numeratorDegreesOfFreedom  >  0)&&(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >  0)&&(numeratorDegreesOfFreedom  >  0)&&(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >  0)&&(numeratorDegreesOfFreedom  >  0)&&(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >	  return(numeratorDegreesOfFreedom    >    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF    >    denomin    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
45	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  return  false;  }  [CE]  cannot  find  symbol  denominatorDF  [FE]          AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  return  false;  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  return  false;  }	  return    false;    return    false;    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	22	None	replace
46	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  null  ||  numericalVarianceIsCalculated)  {  return  false;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(numeratorDegreesOfFreedom  ==  null  ||  numericalVarianceIsCalculated)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom  ==  null  ||  numericalVarianceIsCalculated)  {  return  false;  }	  if(numeratorDegreesOfFreedom    ==    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	4	None	replace
47	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	  return(numeratorDegreesOfFreedom    >=    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
48	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin	  return(numeratorDegreesOfFreedom    >=    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denomin    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
49	[BUG]  [BUGGY]  if(!isSupportLowerBoundInclusive()  ||!isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(!isSupportLowerBoundInclusive()  ||!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(!isSupportLowerBoundInclusive()  ||!isSupportLowerBoundInclusive())  {  return  false;  }	          if(!isSupportLowerBoundInclusive())    {    return    false;    }    If(!isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
50	[BUG]  [BUGGY]  if(!numeratorDegreesOfFreedom)  {  return  true;  }  [CE]  bad  operand  type  double  for  unary  operator  '!'  [FE]                AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(!numeratorDegreesOfFreedom)  {  return  true;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(!numeratorDegreesOfFreedom)  {  return  true;  }	  if(!numeratorDegreesOfFreedom)    {    return    false;    }    	non-compiled	[CE]  bad  operand  type  double  for  unary  operator  '!'	24	None	replace
51	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom)  {  return  true;  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  if(numeratorDegreesOfFreedom)  {  return  true;  }  [BUGGY]      return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom)  {  return  true;  }	  if(!numeratorDegreesOfFreedom)    {    return    false;    }    	non-compiled	[CE]  incompatible  types	24	None	replace
52	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  <  0)||(numeratorDF  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  <  0)||(numeratorDF  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  <  0)||(numeratorDF  >  0)||(numeratorDF  <  =  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	  return(numeratorDegreesOfFreedom    <    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
53	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >  0)&&(numeratorDegreesOfFreedom  >  0)&&(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(numeratorDegreesOfFreedom  >  0)&&(numeratorDegreesOfFreedom  >  0)&&(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >  0)&&(numeratorDegreesOfFreedom  >  0)&&(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin	  return(numeratorDegreesOfFreedom    >    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF    >    denomin    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
54	[BUG]  [BUGGY]  return(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(null!=  denominatorDF);  [CE]  incomparable  types:  <null>  and  double  [FE]        AssertionError      [CONTEXT]      public  boolean  isSupportLowerBoundInclusive()  {      [BUGGY]  return(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(null!=  denominatorDF);  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(null!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(null!=  denominatorDF);	  return(null!=    denominatorDF)||(null!=    denominatorDF);    	non-compiled	[CE]  incomparable  types:  <null>  and  double	35	None	replace
