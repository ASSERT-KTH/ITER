bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive())  {  return  true;  }  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(isSupportLowerBoundInclusive())  {  return  true;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive())  {  return  true;  }	      if(!isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
2	[BUG]  [BUGGY]  return(null  ==  numeratorDF)&&(null!=  denominatorDF);  [CE]  cannot  find  symbol  numeratorDF  [FE]    AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return(null  ==  numeratorDF)&&(null!=  denominatorDF);  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(null  ==  numeratorDF)&&(null!=  denominatorDF);	  return    false;    	non-compiled	[CE]  cannot  find  symbol  numeratorDF	7	None	replace
3	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  return  false;  }  [CE]  incomparable  types:  double  and  <null>  [FE]          AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom!=  null)  {  return  false;  }	      if(isSupportLowerBoundInclusive())    {    if(numeratorDegreesOfFreedom!=    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	replace
4	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [CE]  incomparable  types:  double  and  <null>  [FE]            AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }	      if(isSupportLowerBoundInclusive())    {    if(numeratorDegreesOfFreedom!=    null)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	replace
5	[BUG]  [BUGGY]  return  denominatorDF.isSupportLowerBoundInclusive();  [CE]  cannot  find  symbol  denominatorDF  [FE]          AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  denominatorDF.isSupportLowerBoundInclusive();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return  denominatorDF.isSupportLowerBoundInclusive();	  return    numeratorDF.isSupportLowerBoundInclusive();    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	8	None	replace
6	[BUG]  [BUGGY]  return  this.denominatorDF.isSupportLowerBoundInclusive();  [CE]  cannot  find  symbol  denominatorDF  [FE]            AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  this.denominatorDF.isSupportLowerBoundInclusive();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return  this.denominatorDF.isSupportLowerBoundInclusive();	  return    numeratorDF.isSupportLowerBoundInclusive();    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	8	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.size();    i    <    len;    ++i)    {    numericalVarianceIsCalculated    =    true;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.size();    i    <    len;    ++i)    {    numericalVarianceIsCalculated    =    false;    }    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
9	[BUG]  [BUGGY]  ||  isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  ||  isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	||  isSupportLowerBoundInclusive())  {  return  false;  }	      if(isSupportLowerBoundInclusive())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]      if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	1	2	add
11	[BUG]  [BUGGY]      if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]      if(isSupportLowerBoundInclusive())  {  return  false;  }  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	        if(isSupportLowerBoundInclusive())    {    return    false;    }    if(isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	1	2	add
12	[BUG]  [BUGGY]      if(isSupportLowerBoundInclusive())  {  return  false;  }  If(isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]      if(isSupportLowerBoundInclusive())  {  return  false;  }  If(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	        if(isSupportLowerBoundInclusive())    {    return    false;    }    If(isSupportLowerBoundInclusive())  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
13	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]      if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	3	2	add
14	[BUG]  [BUGGY]      if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]      if(!isSupportLowerBoundInclusive())  {  return  false;  }  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	        if(!isSupportLowerBoundInclusive())    {    return    false;    }    if(!isSupportLowerBoundInclusive())  {  return  false;  }	  	compilable	  [FE]  StackOverflowError  	3	2	add
15	[BUG]  [BUGGY]      if(!isSupportLowerBoundInclusive())  {  return  false;  }  If(!isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]      if(!isSupportLowerBoundInclusive())  {  return  false;  }  If(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	        if(!isSupportLowerBoundInclusive())    {    return    false;    }    If(!isSupportLowerBoundInclusive())  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	3	None	add
16	[BUG]  [BUGGY]  return!isSupportLowerBoundInclusive();  return!isSupportLowerBoundInclusive();  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return!isSupportLowerBoundInclusive();  return!isSupportLowerBoundInclusive();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return!isSupportLowerBoundInclusive();    return!isSupportLowerBoundInclusive();	  	non-compiled	[CE]  unreachable  statement	11	None	add
17	[BUG]  [BUGGY]  return!isSupportLowerBoundInclusive();  if(isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return!isSupportLowerBoundInclusive();  if(isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return!isSupportLowerBoundInclusive();    if(isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
18	[BUG]  [BUGGY]  return!isSupportLowerBoundInclusive();  if(!isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return!isSupportLowerBoundInclusive();  if(!isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return!isSupportLowerBoundInclusive();    if(!isSupportLowerBoundInclusive())  {  return!isSupportLowerBoundInclusive();  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
19	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	  return(numeratorDegreesOfFreedom    >    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  ')'  expected	13	None	replace
20	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  <  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return(numeratorDegreesOfFreedom  <  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  <  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denominator	  return(numeratorDegreesOfFreedom    >    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  ')'  expected	13	None	replace
21	[BUG]  [BUGGY]  return  false;  if(isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  false;  if(isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return    false;    if(isSupportLowerBoundInclusive())  {  return  false;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
22	[BUG]  [BUGGY]  return  false;  return  false;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  false;  return  false;  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return    false;    return  false;	  	non-compiled	[CE]  unreachable  statement	6	None	add
23	[BUG]  [BUGGY]  return  false;  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  false;  if(!isSupportLowerBoundInclusive())  {  return  false;  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return    false;    if(!isSupportLowerBoundInclusive())  {  return  false;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
24	[BUG]  [BUGGY]  if(!numeratorDegreesOfFreedom)  {  return  false;  }  [CE]  bad  operand  type  double  for  unary  operator  '!'  [FE]            AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(!numeratorDegreesOfFreedom)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(!numeratorDegreesOfFreedom)  {  return  false;  }	      if(isSupportLowerBoundInclusive())    {    if(!numeratorDegreesOfFreedom)    {    return    false;    }    	non-compiled	[CE]  bad  operand  type  double  for  unary  operator  '!'	5	None	replace
25	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  false;  }	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.size();    i    <    len;    ++i)    {    numericalVarianceIsCalculated    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
26	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive()  ||  numericalVarianceIsCalculated)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(isSupportLowerBoundInclusive()  ||  numericalVarianceIsCalculated)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive()  ||  numericalVarianceIsCalculated)  {  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }	      if(isSupportLowerBoundInclusive())    {    if(numeratorDegreesOfFreedom    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.size();  i  <  len;  ++i)  {  numericalVarianceIsCalculated  =  true;  }	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.size();    i    <    len;    ++i)    {    numericalVarianceIsCalculated    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
28	[BUG]  [BUGGY]  return  this.supportLowerBoundInclusive;  [CE]  cannot  find  symbol  supportLowerBoundInclusive  [FE]    AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  this.supportLowerBoundInclusive;  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return  this.supportLowerBoundInclusive;	  return    false;    	non-compiled	[CE]  cannot  find  symbol  supportLowerBoundInclusive	7	None	replace
29	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >=  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  denominatorDF)||(numeratorDF  >  denominatorDF)||(numeratorDF  >  denomin	  return(numeratorDegreesOfFreedom    >    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  ')'  expected	13	None	replace
30	[BUG]  [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return(numeratorDegreesOfFreedom  >  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(numeratorDegreesOfFreedom  >  0)||(numeratorDegreesOfFreedom  >  0)||(numeratorDF  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||(numeratorDF  >  denomin	  return(numeratorDegreesOfFreedom    >    0)||(numeratorDegreesOfFreedom    >    0)||(numeratorDF    <    denominatorDF)||(numeratorDF    >    denominatorDF)||(numeratorDF    >    denominator    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  return  false;  if(isSupportLowerBoundInclusive())  {  return  true;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  false;  if(isSupportLowerBoundInclusive())  {  return  true;  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return    false;    if(isSupportLowerBoundInclusive())  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
32	[BUG]  [BUGGY]  return  this.numeratorDF.isSupportLowerBoundInclusive();  [CE]  cannot  find  symbol  numeratorDF  [FE]          AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  this.numeratorDF.isSupportLowerBoundInclusive();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return  this.numeratorDF.isSupportLowerBoundInclusive();	  return    numeratorDF.isSupportLowerBoundInclusive();    	non-compiled	[CE]  cannot  find  symbol  numeratorDF	8	None	replace
33	[BUG]  [BUGGY]  return  false;  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [CE]  incomparable  types:  double  and  <null>  [FE]    AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return  false;  if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return    false;    if(numeratorDegreesOfFreedom  ==  null)  {  return  false;  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	6	None	add
34	[BUG]  [BUGGY]  if(isSupportLowerBoundInclusive()  ||!numeratorDegreesOfFreedom)  {  return  false;  }  [CE]  bad  operand  type  double  for  unary  operator  '!'  [FE]            AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  if(isSupportLowerBoundInclusive()  ||!numeratorDegreesOfFreedom)  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	if(isSupportLowerBoundInclusive()  ||!numeratorDegreesOfFreedom)  {  return  false;  }	      if(isSupportLowerBoundInclusive())    {    if(!numeratorDegreesOfFreedom)    {    return    false;    }    	non-compiled	[CE]  bad  operand  type  double  for  unary  operator  '!'	5	None	replace
35	[BUG]  [BUGGY]  return(null!=  denominatorDF)||(null!=  denominatorDF);  [CE]  cannot  find  symbol  denominatorDF  [FE]    AssertionError    [CONTEXT]    public  boolean  isSupportLowerBoundInclusive()  {    [BUGGY]  return(null!=  denominatorDF)||(null!=  denominatorDF);  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(null!=  denominatorDF)||(null!=  denominatorDF);	  return    false;    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	7	None	replace
