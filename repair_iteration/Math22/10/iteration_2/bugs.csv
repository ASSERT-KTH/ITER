bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      double  lower  =  Math.floor(x);  double  lower  =  Math.floor(x);  [CE]  variable  lower  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  lower  =  Math.floor(x);  double  lower  =  Math.floor(x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	        double    lower    =    Math.floor(x);    double  lower  =  Math.floor(x);	  	non-compiled	[CE]  variable  lower  is  already  defined  in  method  density(double)	8	None	add
2	[BUG]  [BUGGY]      double  lower  =  Math.floor(x);  Double  lower  =  Math.floor(x);  [CE]  variable  lower  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  lower  =  Math.floor(x);  Double  lower  =  Math.floor(x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	        double    lower    =    Math.floor(x);    Double  lower  =  Math.floor(x);	  	non-compiled	[CE]  variable  lower  is  already  defined  in  method  density(double)	8	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  lower  =  Math.floor(x);  double  upper  =  Math.floor(x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	add	        double    lower    =    Math.floor(x);    double  upper  =  Math.floor(x);	  	compilable	  [FE]  AssertionError  	8	4	add
4	[BUG]  [BUGGY]      double  lower  =  Math.floor(x);  double  upper  =  Math.floor(x);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  lower  =  Math.floor(x);  double  upper  =  Math.floor(x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	        double    lower    =    Math.floor(x);    double  upper  =  Math.floor(x);	  	compilable	  [FE]  AssertionError  	8	4	add
5	[BUG]  [BUGGY]  double  lower  =  x.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  x.doubleValue();  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  x.doubleValue();	      double    lower    =    this.lower.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  double  lower  =  getLowerCum(lower);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  getLowerCum(lower);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  getLowerCum(lower);	      double    lower    =    getLowerCum(x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  double  lower  =  Math.sqrt(getInitialValue(),  x);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.sqrt(getInitialValue(),  x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.sqrt(getInitialValue(),  x);	      double    lower    =    Math.sqrt(getInitialValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  double  lower  =  Math.log(x);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.log(x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.log(x);	      double    lower    =    Math.floor(x);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  double  lower  =  Math.ceil(x);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.ceil(x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.ceil(x);	      double    lower    =    Math.floor(x);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	add	if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (x    <    lower    ||    x    >    upper    ||    x    >    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	compilable	  [FE]  AssertionError  	13	4	replace
11	[BUG]  [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (x    <    lower    ||    x    >    upper    ||    x    >    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	compilable	  [FE]  AssertionError  	13	4	replace
12	[BUG]  [BUGGY]  if  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  if  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	if    (x    <    lower    ||    x    >    upper    ||    x    >    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    if  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
13	[BUG]  [BUGGY]  if  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  If  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  If  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	if    (x    <    lower    ||    x    >    upper    ||    x    >    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    If  (x  <  lower  ||  x  >  upper  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
14	[BUG]  [BUGGY]  double  lower  =  getLowerCum()  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  getLowerCum()  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  getLowerCum()  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	      double    lower    =    getLowerCum();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  double  lower  =  getLowerCase(x);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  getLowerCase(x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  getLowerCase(x);	      double    lower    =    getLowerCase();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  double  lower  =  Math.sqrt(getUpperCum());  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.sqrt(getUpperCum());  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.sqrt(getUpperCum());	      double    lower    =    Math.sqrt(getLowerCum());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  =  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (x    <    lower    ||    x    >    upper    ||    lower    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	add	if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (x    <    lower    ||    x    >    upper    ||    lower    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	compilable	  [FE]  AssertionError  	2	4	replace
19	[BUG]  [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	if  (x  <  lower  ||  x  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  ||  lower  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (x    <    lower    ||    x    >    upper    ||    lower    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	compilable	  [FE]  AssertionError  	2	4	replace
20	[BUG]  [BUGGY]  double  lower  =  getLowerCum(x)-  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  getLowerCum(x)-  1;  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  getLowerCum(x)-  1;	      double    lower    =    getLowerCum(x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  double  lower  =  Math.floor(x  -  1);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.floor(x  -  1);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.floor(x  -  1);	      double    lower    =    Math.floor(x);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  double  lower  =  getLowerCum()  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  getLowerCum()  -  1;  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  getLowerCum()  -  1;	      double    lower    =    getLowerCum();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  double  lower  =  Math.sqrt(getInitialValue(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.sqrt(getInitialValue(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.sqrt(getInitialValue(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      double    lower    =    Math.sqrt(getInitialValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  double  lower  =  Math.sqrt(getLowerCum(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.sqrt(getLowerCum(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.sqrt(getLowerCum(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      double    lower    =    Math.sqrt(getLowerCum());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  upper  ||  lower  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	add	if  (x  <  lower  ||  x  >  upper  ||  lower  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (x    <    lower    ||    x    >    upper    ||    lower    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	compilable	  [FE]  AssertionError  	2	2	replace
26	[BUG]  [BUGGY]  if  (x  <  lower  ||  x  >  upper  ||  lower  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  if  (x  <  lower  ||  x  >  upper  ||  lower  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  [BUGGY]    return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	if  (x  <  lower  ||  x  >  upper  ||  lower  >=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {	  if    (x    <    lower    ||    x    >    upper    ||    lower    <    =    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    	compilable	  [FE]  AssertionError  	2	2	replace
27	[BUG]  [BUGGY]  double  lower  =  Math.sqrt(getLowerCum(),  x);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  lower  =  Math.sqrt(getLowerCum(),  x);  [BUGGY]    if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	double  lower  =  Math.sqrt(getLowerCum(),  x);	      double    lower    =    Math.sqrt(getLowerCum());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
