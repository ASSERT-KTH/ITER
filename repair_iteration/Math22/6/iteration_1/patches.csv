bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);    [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	final    double    logn    =    FastMath.log(denominatorDegreesOfFreedom);    final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	4	None	add
2	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);    [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	final    double    logn    =    FastMath.log(denominatorDegreesOfFreedom);    final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);	  	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	4	None	add
3	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  logn  =  FastMath.log(dominatorDegreesOfFreedom);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);    [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  logn  =  FastMath.log(dominatorDegreesOfFreedom);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	final    double    logn    =    FastMath.log(denominatorDegreesOfFreedom);    final  double  logn  =  FastMath.log(dominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	4	None	add
4	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);    [BUGGY]  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);	      double    nhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	3	None	replace
5	[BUG]  [BUGGY]  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);    [BUGGY]  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	nhalf  =  FastMath.log(denominatorDegreesOfFreedom);	      nhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	2	None	replace
6	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);    [BUGGY]  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);	      double    nhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	3	None	replace
