bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] public boolean isSupportUpperBoundInclusive() { [BUGGY] return false; [BUGGY] } [CLASS] UniformRealDistribution [METHOD] isSupportUpperBoundInclusive [RETURN_TYPE] boolean  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	1.0	184	184	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isSupportUpperBoundInclusive() { [BUGGY] [BUGGY] return false; } [CLASS] UniformRealDistribution [METHOD] isSupportUpperBoundInclusive [RETURN_TYPE] boolean  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	1.0	184	184	1	add	
3	[BUG] [BUGGY] if (x < lower || x > upper) { [FE] AssertionError [CONTEXT] public double density(double x) { [BUGGY] if (x < lower || x > upper) { [BUGGY] return 0.0; } return 1 / (upper - lower); } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.5	109	109	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { [BUGGY] [BUGGY] if (x < lower || x > upper) { return 0.0; } return 1 / (upper - lower); } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.5	109	109	1	add	
5	[BUG] [BUGGY] return 1 / (upper - lower); [FE] AssertionError [CONTEXT] public double density(double x) { if (x < lower || x > upper) { return 0.0; } [BUGGY] return 1 / (upper - lower); [BUGGY] } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.5	112	112	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { if (x < lower || x > upper) { return 0.0; } [BUGGY] [BUGGY] return 1 / (upper - lower); } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.5	112	112	1	add	
7	[BUG] [BUGGY] return upper; [FE] AssertionError [CONTEXT] public double getSupportUpperBound() { [BUGGY] return upper; [BUGGY] } [CLASS] UniformRealDistribution [METHOD] getSupportUpperBound [RETURN_TYPE] double  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.5	174	174	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getSupportUpperBound() { [BUGGY] [BUGGY] return upper; } [CLASS] UniformRealDistribution [METHOD] getSupportUpperBound [RETURN_TYPE] double  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.5	174	174	1	add	
9	[BUG] [BUGGY] this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { [BUGGY] this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	64	64	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { [BUGGY] [BUGGY] this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	64	64	1	add	
11	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] } [BUGGY]  [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	65	65	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	65	65	1	add	
13	[BUG] [BUGGY] this(newWell19937c(), lower, upper, inverseCumAccuracy); [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] this(newWell19937c(), lower, upper, inverseCumAccuracy); [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	77	77	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] [BUGGY] this(newWell19937c(), lower, upper, inverseCumAccuracy); } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	77	77	1	add	
15	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { this(newWell19937c(), lower, upper, inverseCumAccuracy); [BUGGY] } [BUGGY]  [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	78	78	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { this(newWell19937c(), lower, upper, inverseCumAccuracy); [BUGGY] [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	78	78	1	add	
17	[BUG] [BUGGY] super(rng); [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] super(rng); [BUGGY] if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	95	95	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] [BUGGY] super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	95	95	1	add	
19	[BUG] [BUGGY] if (lower >= upper) { [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); [BUGGY] if (lower >= upper) { [BUGGY] throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	96	96	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); [BUGGY] [BUGGY] if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	96	96	1	add	
21	[BUG] [BUGGY] this.lower = lower; [FE] AssertionError [CONTEXT] double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } [BUGGY] this.lower = lower; [BUGGY] this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	102	102	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } [BUGGY] [BUGGY] this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	102	102	1	add	
23	[BUG] [BUGGY] this.upper = upper; [FE] AssertionError [CONTEXT] double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; [BUGGY] this.upper = upper; [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	103	103	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; [BUGGY] [BUGGY] this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	103	103	1	add	
25	[BUG] [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; [FE] AssertionError [CONTEXT] throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	104	104	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; [BUGGY] [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	104	104	1	add	
27	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] } [BUGGY]  [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	105	105	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.2672612419124244	105	105	1	add	
