bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT] public boolean isSupportLowerBoundInclusive() { [BUGGY] return true; [BUGGY] } [CLASS] FDistribution [METHOD] isSupportLowerBoundInclusive [RETURN_TYPE] boolean  [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denomDFMinusTwo denominatorDF denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx m mhalf n nhalf numeratorDF numeratorDegreesOfFreedom numericalVariance ret solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isSupportLowerBoundInclusive() { [BUGGY] [BUGGY] return true; } [CLASS] FDistribution [METHOD] isSupportLowerBoundInclusive [RETURN_TYPE] boolean  [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denomDFMinusTwo denominatorDF denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx m mhalf n nhalf numeratorDF numeratorDegreesOfFreedom numericalVariance ret solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	
3	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] public boolean isSupportUpperBoundInclusive() { [BUGGY] return false; [BUGGY] } [CLASS] UniformRealDistribution [METHOD] isSupportUpperBoundInclusive [RETURN_TYPE] boolean  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean isSupportUpperBoundInclusive() { [BUGGY] [BUGGY] return false; } [CLASS] UniformRealDistribution [METHOD] isSupportUpperBoundInclusive [RETURN_TYPE] boolean  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	add	
5	[BUG] [BUGGY] final double nhalf = numeratorDegreesOfFreedom / 2; [FE] AssertionError [CONTEXT] public double density(double x) { [BUGGY] final double nhalf = numeratorDegreesOfFreedom / 2; [BUGGY] final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { [BUGGY] [BUGGY] final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	add	
7	[BUG] [BUGGY] final double mhalf = denominatorDegreesOfFreedom / 2; [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; [BUGGY] final double mhalf = denominatorDegreesOfFreedom / 2; [BUGGY] final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; [BUGGY] [BUGGY] final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	add	
9	[BUG] [BUGGY] final double logx = FastMath.log(x); [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; [BUGGY] final double logx = FastMath.log(x); [BUGGY] final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; [BUGGY] [BUGGY] final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	add	
11	[BUG] [BUGGY] final double logn = FastMath.log(numeratorDegreesOfFreedom); [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); [BUGGY] final double logn = FastMath.log(numeratorDegreesOfFreedom); [BUGGY] final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); [BUGGY] [BUGGY] final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	add	
13	[BUG] [BUGGY] final double logm = FastMath.log(denominatorDegreesOfFreedom); [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); [BUGGY] final double logm = FastMath.log(denominatorDegreesOfFreedom); [BUGGY] final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); [BUGGY] [BUGGY] final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	add	
15	[BUG] [BUGGY] final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +   denominatorDegreesOfFreedom); [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); [BUGGY] final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +           denominatorDegreesOfFreedom); [BUGGY] denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); [BUGGY] [BUGGY] final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +           denominatorDegreesOfFreedom); denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	add	
17	[BUG] [BUGGY] return FastMath.exp(nhalf * logn + nhalf * logx - logx +  mhalf * logm - nhalf * lognxm - mhalf * lognxm -    Beta.logBeta(nhalf, mhalf)); [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); [BUGGY] return FastMath.exp(nhalf * logn + nhalf * logx - logx +       mhalf * logm - nhalf * lognxm - mhalf * lognxm -              Beta.logBeta(nhalf, mhalf)); [BUGGY] mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); [BUGGY] [BUGGY] return FastMath.exp(nhalf * logn + nhalf * logx - logx +       mhalf * logm - nhalf * lognxm - mhalf * lognxm -              Beta.logBeta(nhalf, mhalf)); mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	
19	[BUG] [BUGGY] if (x < lower || x > upper) { [FE] AssertionError [CONTEXT] public double density(double x) { [BUGGY] if (x < lower || x > upper) { [BUGGY] return 0.0; } return 1 / (upper - lower); } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { [BUGGY] [BUGGY] if (x < lower || x > upper) { return 0.0; } return 1 / (upper - lower); } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	add	
21	[BUG] [BUGGY] return 1 / (upper - lower); [FE] AssertionError [CONTEXT] public double density(double x) { if (x < lower || x > upper) { return 0.0; } [BUGGY] return 1 / (upper - lower); [BUGGY] } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	112	112	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { if (x < lower || x > upper) { return 0.0; } [BUGGY] [BUGGY] return 1 / (upper - lower); } [CLASS] UniformRealDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	112	112	2	add	
23	[BUG] [BUGGY] return upper; [FE] AssertionError [CONTEXT] public double getSupportUpperBound() { [BUGGY] return upper; [BUGGY] } [CLASS] UniformRealDistribution [METHOD] getSupportUpperBound [RETURN_TYPE] double  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	174	174	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getSupportUpperBound() { [BUGGY] [BUGGY] return upper; } [CLASS] UniformRealDistribution [METHOD] getSupportUpperBound [RETURN_TYPE] double  [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy ul upper x long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	174	174	2	add	
25	[BUG] [BUGGY] return 0; [FE] AssertionError [CONTEXT] public double getSupportLowerBound() { [BUGGY] return 0; [BUGGY] } [CLASS] FDistribution [METHOD] getSupportLowerBound [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denomDFMinusTwo denominatorDF denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx m mhalf n nhalf numeratorDF numeratorDegreesOfFreedom numericalVariance ret solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double getSupportLowerBound() { [BUGGY] [BUGGY] return 0; } [CLASS] FDistribution [METHOD] getSupportLowerBound [RETURN_TYPE] double  [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denomDFMinusTwo denominatorDF denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx m mhalf n nhalf numeratorDF numeratorDegreesOfFreedom numericalVariance ret solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	add	
27	[BUG] [BUGGY] this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { [BUGGY] this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	64	64	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { [BUGGY] [BUGGY] this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	64	64	2	add	
29	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] } [BUGGY]  [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	65	65	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException { this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double)  double lower double upper [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	65	65	2	add	
31	[BUG] [BUGGY] this(newWell19937c(), lower, upper, inverseCumAccuracy); [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] this(newWell19937c(), lower, upper, inverseCumAccuracy); [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	77	77	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] [BUGGY] this(newWell19937c(), lower, upper, inverseCumAccuracy); } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	77	77	2	add	
33	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { this(newWell19937c(), lower, upper, inverseCumAccuracy); [BUGGY] } [BUGGY]  [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	78	78	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { this(newWell19937c(), lower, upper, inverseCumAccuracy); [BUGGY] [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] UniformRealDistribution(double,double,double)  double lower double upper double inverseCumAccuracy [VARIABLES] double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	78	78	2	add	
35	[BUG] [BUGGY] super(rng); [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] super(rng); [BUGGY] if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	95	95	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { [BUGGY] [BUGGY] super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	95	95	2	add	
37	[BUG] [BUGGY] if (lower >= upper) { [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); [BUGGY] if (lower >= upper) { [BUGGY] throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	96	96	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); [BUGGY] [BUGGY] if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	96	96	2	add	
39	[BUG] [BUGGY] this.lower = lower; [FE] AssertionError [CONTEXT] double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } [BUGGY] this.lower = lower; [BUGGY] this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	102	102	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } [BUGGY] [BUGGY] this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	102	102	2	add	
41	[BUG] [BUGGY] this.upper = upper; [FE] AssertionError [CONTEXT] double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; [BUGGY] this.upper = upper; [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	103	103	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double inverseCumAccuracy) throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; [BUGGY] [BUGGY] this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	103	103	2	add	
43	[BUG] [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; [FE] AssertionError [CONTEXT] throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	104	104	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; [BUGGY] [BUGGY] solverAbsoluteAccuracy = inverseCumAccuracy; } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	104	104	2	add	
45	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] } [BUGGY]  [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	105	105	2	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy; [BUGGY] [BUGGY] } [CLASS] UniformRealDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double,double,double)  RandomGenerator rng double lower double upper double inverseCumAccuracy [VARIABLES] boolean double DEFAULT_INVERSE_ABSOLUTE_ACCURACY inverseCumAccuracy lower solverAbsoluteAccuracy upper long serialVersionUID RandomGenerator rng  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.1889822365046136	105	105	2	add	
47	[BUG] [BUGGY] this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [FE] AssertionError [CONTEXT] public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) throws NotStrictlyPositiveException { [BUGGY] this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } [CLASS] FDistribution [METHOD] <init> [RETURN_TYPE] FDistribution(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.17149858514250882	65	66	2	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) throws NotStrictlyPositiveException { [BUGGY] [BUGGY] this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY); DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } [CLASS] FDistribution [METHOD] <init> [RETURN_TYPE] FDistribution(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.17149858514250882	65	66	2	add	
49	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) throws NotStrictlyPositiveException { this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] } [BUGGY]  [CLASS] FDistribution [METHOD] <init> [RETURN_TYPE] FDistribution(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.17149858514250882	67	67	2	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) throws NotStrictlyPositiveException { this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); [BUGGY] [BUGGY] } [CLASS] FDistribution [METHOD] <init> [RETURN_TYPE] FDistribution(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.17149858514250882	67	67	2	add	
