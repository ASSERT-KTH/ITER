bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(nhalf);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	add	final  double  logm  =  FastMath.log(nhalf);	  final    double    logm    =    FastMath.log(x);    	compilable	  [FE]  AssertionError  	7	4	replace
2	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(nhalf);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(nhalf);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final  double  logm  =  FastMath.log(nhalf);	  final    double    logm    =    FastMath.log(x);    	compilable	  [FE]  AssertionError  	7	4	replace
3	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);	      double    nhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	11	None	replace
4	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  logm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final    double    logm    =    FastMath.log(numeratorDegreesOfFreedom);    final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);	  	non-compiled	[CE]  variable  logm  is  already  defined  in  method  density(double)	4	None	add
5	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  logm  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final    double    logm    =    FastMath.log(numeratorDegreesOfFreedom);    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  logm  is  already  defined  in  method  density(double)	4	None	add
6	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(nhalf);  [CE]  variable  logm  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(nhalf);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final    double    logm    =    FastMath.log(numeratorDegreesOfFreedom);    final  double  logm  =  FastMath.log(nhalf);	  	non-compiled	[CE]  variable  logm  is  already  defined  in  method  density(double)	4	None	add
7	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(nhalf);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logn  =  FastMath.log(nhalf);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final  double  logn  =  FastMath.log(nhalf);	      final    double    nhalf    =    FastMath.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	9	None	replace
8	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(x);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logn  =  FastMath.log(x);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final  double  logn  =  FastMath.log(x);	      final    double    nhalf    =    FastMath.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	9	None	replace
9	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(x);  final  double  logm  =  FastMath.log(x);  [CE]  variable  logm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(x);  final  double  logm  =  FastMath.log(x);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final    double    logm    =    FastMath.log(x);    final  double  logm  =  FastMath.log(x);	  	non-compiled	[CE]  variable  logm  is  already  defined  in  method  density(double)	6	None	add
10	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(x);  static  final  double  logm  =  FastMath.log(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(x);  static  final  double  logm  =  FastMath.log(x);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final    double    logm    =    FastMath.log(x);    static  final  double  logm  =  FastMath.log(x);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(x);  final  double  logm  =  FastMath.log(y);  [CE]  variable  logm  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(x);  final  double  logm  =  FastMath.log(y);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final    double    logm    =    FastMath.log(x);    final  double  logm  =  FastMath.log(y);	  	non-compiled	[CE]  variable  logm  is  already  defined  in  method  density(double)	6	None	add
12	[BUG]  [BUGGY]  final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);	      final    double    nhalf    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	8	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	add	final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);	  final    double    logm    =    FastMath.log(numeratorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	5	4	replace
14	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final  double  logm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);	  final    double    logm    =    FastMath.log(numeratorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	5	4	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(logn);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	add	final  double  logm  =  FastMath.log(logn);	  final    double    logm    =    FastMath.log(x);    	compilable	  [FE]  AssertionError  	7	4	replace
16	[BUG]  [BUGGY]  final  double  logm  =  FastMath.log(logn);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logm  =  FastMath.log(logn);  [BUGGY]    final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final  double  logm  =  FastMath.log(logn);	  final    double    logm    =    FastMath.log(x);    	compilable	  [FE]  AssertionError  	7	4	replace
17	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	final  double  logn  =  FastMath.log(denominatorDegreesOfFreedom);	      final    double    nhalf    =    FastMath.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	9	None	replace
18	[BUG]  [BUGGY]  double  logn  =  FastMath.log(logn);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  double  logn  =  FastMath.log(logn);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	double  logn  =  FastMath.log(logn);	      nhalf    =    FastMath.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	10	None	replace
19	[BUG]  [BUGGY]  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);	      double    nhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	11	None	replace
