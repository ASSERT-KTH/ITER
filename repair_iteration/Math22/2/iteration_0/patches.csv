bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return  true;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	add	return  true;	return  false;  	compilable	  [FE]  AssertionError  	3	1	replace
2	[BUG]  [BUGGY]  return  true;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return  true;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return  true;	return  false;  	compilable	  [FE]  AssertionError  	3	1	replace
3	[BUG]  [BUGGY]  return(this.upper!=  null);  [CE]  incomparable  types:  double  and  <null>  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return(this.upper!=  null);  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return(this.upper!=  null);	return  false;  	non-compiled	[CE]  incomparable  types:  double  and  <null>	3	None	replace
4	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]        AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	  	return  false;  	non-compiled	[CE]  missing  return  statement	3	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(isSupportUpperBoundInclusive())  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	add	    if(isSupportUpperBoundInclusive())  {  return  true;  }		compilable	  [FE]  AssertionError  	4	2	add
6	[BUG]  [BUGGY]    if(isSupportUpperBoundInclusive())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(isSupportUpperBoundInclusive())  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(isSupportUpperBoundInclusive())  {  return  true;  }		compilable	  [FE]  AssertionError  	4	2	add
7	[BUG]  [BUGGY]    if(isSupportUpperBoundInclusive())  {  double  upper  =  getLowerBound();  if(upper  ==  lower)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(isSupportUpperBoundInclusive())  {  double  upper  =  getLowerBound();  if(upper  ==  lower)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(isSupportUpperBoundInclusive())  {  double  upper  =  getLowerBound();  if(upper  ==  lower)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
8	[BUG]  [BUGGY]    if(isSupportUpperBoundInclusive())  {  double  upper  =  getLowerBound();  if(upper!=  lower)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(isSupportUpperBoundInclusive())  {  double  upper  =  getLowerBound();  if(upper!=  lower)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(isSupportUpperBoundInclusive())  {  double  upper  =  getLowerBound();  if(upper!=  lower)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]    if(this.upper  ==  null)  {  if(this.upper!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(this.upper  ==  null)  {  if(this.upper!=  null)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(this.upper  ==  null)  {  if(this.upper!=  null)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]    if(this.upper!=  null)  {  if(this.upper  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(this.upper!=  null)  {  if(this.upper  ==  null)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(this.upper!=  null)  {  if(this.upper  ==  null)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]    if(this.upper!=  null)  {  if(this.upper  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(this.upper!=  null)  {  if(this.upper  ==  null)  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(this.upper!=  null)  {  if(this.upper  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  return  this.upper!=  null;  [CE]  incomparable  types:  double  and  <null>  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return  this.upper!=  null;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return  this.upper!=  null;	return  false;  	non-compiled	[CE]  incomparable  types:  double  and  <null>	3	None	replace
13	[BUG]  [BUGGY]    this.lower  =  Math.max(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  assign  a  value  to  final  variable  lower  [FE]    AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    this.lower  =  Math.max(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    this.lower  =  Math.max(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  lower	4	None	add
14	[BUG]  [BUGGY]    this.lower  =  Math.max(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY).doubleValue();  [CE]  cannot  assign  a  value  to  final  variable  lower  [FE]      AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    this.lower  =  Math.max(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY).doubleValue();  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    this.lower  =  Math.max(DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY).doubleValue();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  lower	4	None	add
15	[BUG]  [BUGGY]    double  lower  =  getLowerBound();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    double  lower  =  getLowerBound();  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    double  lower  =  getLowerBound();		non-compiled	[CE]  cannot  find  symbol	4	None	add
