bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  FastMath.convert(denominatorDegreesOfFreedom,  x);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  FastMath.convert(denominatorDegreesOfFreedom,  x);  [BUGGY]    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	double  denominatorDegreesOfFreedom  =  FastMath.convert(denominatorDegreesOfFreedom,  x);	      double    denominatorDegreesOfFreedom    =    FastMath.convert(x,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  cannot  find  symbol  nhalf  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  denominatorDegreesOfFreedom  =  FastMath.log(x);	      double    denominatorDegreesOfFreedom    =    FastMath.log(x);    	non-compiled	[CE]  cannot  find  symbol  nhalf	2	None	replace
3	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	add
4	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  nhalf  =  desominatorDegreesOfFreedom  /  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  nhalf  =  desominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    final  double  nhalf  =  desominatorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	add
5	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	add	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	9	4	replace
7	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	9	4	replace
8	[BUG]  [BUGGY]  final  double  nhalf  =  desominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [CE]  cannot  find  symbol  desominatorDegreesOfFreedom  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  desominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  desominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    	non-compiled	[CE]  cannot  find  symbol  desominatorDegreesOfFreedom	9	None	replace
9	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	        double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  denominatorDegreesOfFreedom  =  FastMath.log(x);	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)	1	None	add
10	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  Double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  Double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	        double    denominatorDegreesOfFreedom    =    FastMath.log(x);    Double  denominatorDegreesOfFreedom  =  FastMath.log(x);	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)	1	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	add	        double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);	  	compilable	  [FE]  AssertionError  	1	4	add
12	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	        double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);	  	compilable	  [FE]  AssertionError  	1	4	add
13	[BUG]  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	8	None	add
14	[BUG]  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  desominatorDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	8	None	add
15	[BUG]  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorsOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorsOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorsOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	8	None	add
16	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  final  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  FastMath.log(x);  final  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	        double    denominatorDegreesOfFreedom    =    FastMath.log(x);    final  double  denominatorDegreesOfFreedom  =  FastMath.log(x);	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)	1	None	add
17	[BUG]  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  DEDENOMINATORDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  DEDENOMINATORDegreesOfFreedom;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  DEDENOMINATORDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	8	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  x  /  2;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	add	final  double  nhalf  =  x  /  2;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    	compilable	  [FE]  AssertionError  	6	4	replace
19	[BUG]  [BUGGY]  final  double  nhalf  =  x  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {    [BUGGY]  final  double  nhalf  =  x  /  2;  [BUGGY]    final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  x  /  2;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    	compilable	  [FE]  AssertionError  	6	4	replace
