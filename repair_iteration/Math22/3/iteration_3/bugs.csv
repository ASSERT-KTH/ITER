bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  numeratorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	add	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  numeratorDegreesOfFreedom;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	7	4	replace
2	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  numeratorDegreesOfFreedom;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  numeratorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  numeratorDegreesOfFreedom;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	7	4	replace
3	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorsOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [CE]  cannot  find  symbol  denominatorsOfFreedom  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorsOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  denominatorsOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorsOfFreedom;    	non-compiled	[CE]  cannot  find  symbol  denominatorsOfFreedom	15	None	replace
4	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    denominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	6	None	add
5	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    denominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    final  double  nhalf  =  numeratorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	6	None	add
6	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  final  double  nhalf  =  desominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  final  double  nhalf  =  desominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    denominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    final  double  nhalf  =  desominatorDegreesOfFreedom  /  2  +  numeratorDegreesOfFreedom;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	6	None	add
7	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  nhalf  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]      final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);	  final    double    denominatorDegreesOfFreedom    =    FastMath.log(x);    	non-compiled	[CE]  cannot  find  symbol  nhalf	2	None	replace
8	[BUG]  [BUGGY]  final  double  nhalf  =  x  /  2;  final  double  nhalf  =  x  /  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  x  /  2;  final  double  nhalf  =  x  /  2;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    x    /    2;    final  double  nhalf  =  x  /  2;	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
9	[BUG]  [BUGGY]  final  double  nhalf  =  x  /  2;  Final  double  nhalf  =  x  /  2;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  x  /  2;  Final  double  nhalf  =  x  /  2;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final    double    nhalf    =    x    /    2;    Final  double  nhalf  =  x  /  2;	  	non-compiled	[CE]  not  a  statement	18	None	add
10	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]      final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	                double        denominatorDegreesOfFreedom        =        FastMath.log(x);        double    desominatorDegreesOfFreedom    =    FastMath.log(x);    double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)	11	None	add
11	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  Double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  Double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]      final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	                double        denominatorDegreesOfFreedom        =        FastMath.log(x);        double    desominatorDegreesOfFreedom    =    FastMath.log(x);    Double  denominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)	11	None	add
12	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  variable  desominatorDegreesOfFreedom  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]      final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	                double        denominatorDegreesOfFreedom        =        FastMath.log(x);        double    desominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  desominatorDegreesOfFreedom  =  FastMath.log(x);	  	non-compiled	[CE]  variable  desominatorDegreesOfFreedom  is  already  defined  in  method  density(double)	11	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  0,  denominatorDegreesOfFreedom  =  0;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	add	final  double  nhalf  =  0,  denominatorDegreesOfFreedom  =  0;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    	compilable	  [FE]  AssertionError  	3	4	replace
14	[BUG]  [BUGGY]  final  double  nhalf  =  0,  denominatorDegreesOfFreedom  =  0;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  0,  denominatorDegreesOfFreedom  =  0;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  0,  denominatorDegreesOfFreedom  =  0;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    final    double    nhalf    =    denominatorDegreesOfFreedom    /    2;    	compilable	  [FE]  AssertionError  	3	4	replace
15	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  FastMath.convert(numeratorDegreesOfFreedom,  x);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  FastMath.convert(numeratorDegreesOfFreedom,  x);  [BUGGY]      final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	double  denominatorDegreesOfFreedom  =  FastMath.convert(numeratorDegreesOfFreedom,  x);	  double    denominatorDegreesOfFreedom    =    FastMath.convert(denominatorDegreesOfFreedom,    x);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	add	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  final    double    nhalf    =    desominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	8	4	replace
17	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  denominatorDegreesOfFreedom;	  final    double    nhalf    =    desominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    	compilable	  [FE]  AssertionError  	8	4	replace
18	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  density;  [CE]  cannot  find  symbol  density  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  density;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  *  density;	  final    double    nhalf    =    denominatorDegreesOfFreedom    /    2    +    numeratorDegreesOfFreedom;    	non-compiled	[CE]  cannot  find  symbol  density	7	None	replace
19	[BUG]  [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  DEDENOMINATORDegreesOfFreedom;  [CE]  cannot  find  symbol  DEDENOMINATORDegreesOfFreedom  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {      [BUGGY]  final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  DEDENOMINATORDegreesOfFreedom;  [BUGGY]      final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  denominatorDegreesOfFreedom  /  2  +  DEDENOMINATORDegreesOfFreedom;	  final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    denominatorDegreesOfFreedom;    final    double    nhalf    =    numeratorDegreesOfFreedom    /    2    +    DEDENOMINATORDegreesOfFreedom;    	non-compiled	[CE]  cannot  find  symbol  DEDENOMINATORDegreesOfFreedom	17	None	replace
20	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    FastMath.log(x);    double  desominatorDegreesOfFreedom  =  FastMath.log(x);  double  denominatorDegreesOfFreedom  =  FastMath.log(x);  [BUGGY]      final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	                double        denominatorDegreesOfFreedom        =        FastMath.log(x);        double    desominatorDegreesOfFreedom    =    FastMath.log(x);    double  denominatorDegreesOfFreedom  =  FastMath.log(x);	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  density(double)	11	None	add
