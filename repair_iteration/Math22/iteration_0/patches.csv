bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }		compilable	  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive	2	2
2	[BUG]  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }		compilable	  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive	2	2
2	[BUG]  [BUGGY]  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalStateException( " ");  }		compilable	  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive	2	2
3	[BUG]  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalStateException( " ");  }  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalStateException( " ");  }		compilable	  [FE]  StackOverflowError  testIsSupportLowerBoundInclusive	2	2
3	[BUG]  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive  ==  false);  }  [CE]  cannot  find  symbol  supportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive  ==  false);  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive  ==  false);  }		non-compiled	[CE]  cannot  find  symbol  supportLowerBoundInclusive	2	None
4	[BUG]  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive!=  false);  }  [CE]  cannot  find  symbol  supportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive!=  false);  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive!=  false);  }		non-compiled	[CE]  cannot  find  symbol  supportLowerBoundInclusive	2	None
5	[BUG]  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive  ==  false);  return  false;  }  [CE]  cannot  find  symbol  supportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive  ==  false);  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	    if(!isSupportLowerBoundInclusive())  {  throw  new  IllegalArgumentException( " ");  }  else  {  Preconditions.checkState(this.supportLowerBoundInclusive  ==  false);  return  false;  }		non-compiled	[CE]  cannot  find  symbol  supportLowerBoundInclusive	2	None
11	[BUG]  [BUGGY]    final  double  lognxm  =  FastMath.log(lognxm  *  x);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  lognxm  =  FastMath.log(lognxm  *  x);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  lognxm  =  FastMath.log(lognxm  *  x);		non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	18	None
12	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(lognxm  *  x);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(lognxm  *  x);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  mhalf  =  FastMath.log(lognxm  *  x);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	18	None
13	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(lognxm);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(lognxm);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  mhalf  =  FastMath.log(lognxm);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	18	None
14	[BUG]  [BUGGY]    final  double  lognxm  =  FastMath.log(lognxm);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  lognxm  =  FastMath.log(lognxm);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  lognxm  =  FastMath.log(lognxm);		non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	18	None
15	[BUG]  [BUGGY]    final  double  lognxm  =  FastMath.log(lognxm  /  logn);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  lognxm  =  FastMath.log(lognxm  /  logn);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  lognxm  =  FastMath.log(lognxm  /  logn);		non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	18	None
23	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(logy);  [CE]  cannot  find  symbol  logy  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]  final  double  logn  =  FastMath.log(logy);  [BUGGY]  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	final  double  logn  =  FastMath.log(logy);	final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  	non-compiled	[CE]  cannot  find  symbol  logy	11	None
24	[BUG]  [BUGGY]  final  double  logn  =  FastMath.log(loggerx);  [CE]  cannot  find  symbol  loggerx  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]  final  double  logn  =  FastMath.log(loggerx);  [BUGGY]  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	final  double  logn  =  FastMath.log(loggerx);	final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  	non-compiled	[CE]  cannot  find  symbol  loggerx	11	None
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  logn  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    [BUGGY]  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	  	final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  	non-compiled	[CE]  cannot  find  symbol  logn	11	None
34	[BUG]  [BUGGY]  static  final  double  logm  =  FastMath.log(logn);  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]  static  final  double  logm  =  FastMath.log(logn);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	static  final  double  logm  =  FastMath.log(logn);	final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  	non-compiled	[CE]  illegal  start  of  expression	13	None
35	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  logm  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	  	final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  	non-compiled	[CE]  cannot  find  symbol  logm	13	None
41	[BUG]  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0.0)  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0.0)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0.0)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
42	[BUG]  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0.0)  {  return  upper  >  0.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0.0)  {  return  upper  >  0.0;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0.0)  {  return  upper  >  0.0;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
43	[BUG]  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0  ||  lower  >  0)  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0  ||  lower  >  0)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0  ||  lower  >  0)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
44	[BUG]  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0  ||  lower  >  0)  {  return  upper  >  0.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0  ||  lower  >  0)  {  return  upper  >  0.0;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBound();  if(upper  >  0  ||  lower  >  0)  {  return  upper  >  0.0;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
45	[BUG]  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBoundInclusive();  if(upper  >  0.0)  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBoundInclusive();  if(upper  >  0.0)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(!isSupportUpperBoundInclusive())  {  double  lower  =  getLowerBoundInclusive();  if(upper  >  0.0)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
55	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  mhalf  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  [BUGGY]    [BUGGY]  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	130	130	2	replace	  	final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  	non-compiled	[CE]  cannot  find  symbol  mhalf	7	None
61	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf);  [BUGGY]  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	replace	    final  double  nhalf  =  FastMath.log(nhalf);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	10	None
62	[BUG]  [BUGGY]  [FE]  AssertionError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  nh  =  FastMath.log(nhalf);  [BUGGY]  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	add	    final  double  nh  =  FastMath.log(nhalf);		compilable	  [FE]  AssertionError  testIsSupportLowerBoundInclusive	10	2
63	[BUG]  [BUGGY]    final  double  nh  =  FastMath.log(nhalf);  [FE]  AssertionError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  nh  =  FastMath.log(nhalf);  [BUGGY]  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	replace	    final  double  nh  =  FastMath.log(nhalf);		compilable	  [FE]  AssertionError  testIsSupportLowerBoundInclusive	10	2
63	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	replace	    final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	10	None
64	[BUG]  [BUGGY]    final  Double  nhalf  =  FastMath.log(nhalf);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  Double  nhalf  =  FastMath.log(nhalf);  [BUGGY]  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	replace	    final  Double  nhalf  =  FastMath.log(nhalf);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	10	None
65	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf)/  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf)/  2;  [BUGGY]  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	131	131	2	replace	    final  double  nhalf  =  FastMath.log(nhalf)/  2;		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	10	None
81	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(logn);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  nhalf  =  FastMath.log(logn);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    final  double  nhalf  =  FastMath.log(logn);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	16	None
82	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(logn);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(logn);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    final  double  mhalf  =  FastMath.log(logn);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	16	None
83	[BUG]  [BUGGY]    logn  =  FastMath.log(logn);  [CE]  cannot  assign  a  value  to  final  variable  logn  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    logn  =  FastMath.log(logn);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    logn  =  FastMath.log(logn);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	16	None
84	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(logx);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  nhalf  =  FastMath.log(logx);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    final  double  nhalf  =  FastMath.log(logx);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	16	None
85	[BUG]  [BUGGY]    logn  =  FastMath.log(logx);  [CE]  cannot  assign  a  value  to  final  variable  logn  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    logn  =  FastMath.log(logx);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    logn  =  FastMath.log(logx);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	16	None
91	[BUG]  [BUGGY]  [FE]  AssertionError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return  true;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	add	return  true;	return  false;  	compilable	  [FE]  AssertionError  testIsSupportLowerBoundInclusive	3	1
92	[BUG]  [BUGGY]  return  true;  [FE]  AssertionError  testIsSupportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return  true;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return  true;	return  false;  	compilable	  [FE]  AssertionError  testIsSupportLowerBoundInclusive	3	1
92	[BUG]  [BUGGY]  return  this.supportUpperBoundInclusive!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  supportUpperBoundInclusive  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return  this.supportUpperBoundInclusive!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return  this.supportUpperBoundInclusive!=  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	return  false;  	non-compiled	[CE]  cannot  find  symbol  supportUpperBoundInclusive	3	None
93	[BUG]  [BUGGY]  return(this.supportUpperBoundInclusive  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||  this.upperBoundInclusive  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  supportUpperBoundInclusive  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return(this.supportUpperBoundInclusive  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||  this.upperBoundInclusive  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return(this.supportUpperBoundInclusive  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||  this.upperBoundInclusive  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	return  false;  	non-compiled	[CE]  cannot  find  symbol  supportUpperBoundInclusive	3	None
94	[BUG]  [BUGGY]  return(this.supportUpperBoundInclusive  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||  this.upperBoundInclusive  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [CE]  cannot  find  symbol  supportUpperBoundInclusive  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return(this.supportUpperBoundInclusive  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||  this.upperBoundInclusive  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return(this.supportUpperBoundInclusive  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)||  this.upperBoundInclusive  <  DEFAULT_INVERSE_ABSOLUTE_ACCURACY;	return  false;  	non-compiled	[CE]  cannot  find  symbol  supportUpperBoundInclusive	3	None
101	[BUG]  [BUGGY]  [FE]  AssertionError  testIsSupportUpperBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	add	return  false;	return  true;  	compilable	  [FE]  AssertionError  testIsSupportUpperBoundInclusive	1	1
102	[BUG]  [BUGGY]  return  false;  [FE]  AssertionError  testIsSupportUpperBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return  false;	return  true;  	compilable	  [FE]  AssertionError  testIsSupportUpperBoundInclusive	1	1
102	[BUG]  [BUGGY]  return(this.supportLowerBoundInclusive)!=  false;  [CE]  cannot  find  symbol  supportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return(this.supportLowerBoundInclusive)!=  false;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(this.supportLowerBoundInclusive)!=  false;	return  true;  	non-compiled	[CE]  cannot  find  symbol  supportLowerBoundInclusive	1	None
103	[BUG]  [BUGGY]  return(this.supportLowerBoundInclusive)!=  true;  [CE]  cannot  find  symbol  supportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return(this.supportLowerBoundInclusive)!=  true;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(this.supportLowerBoundInclusive)!=  true;	return  true;  	non-compiled	[CE]  cannot  find  symbol  supportLowerBoundInclusive	1	None
104	[BUG]  [BUGGY]  return(this.supportLowerBoundInclusive)!=  0;  [CE]  cannot  find  symbol  supportLowerBoundInclusive  [CONTEXT]  public  boolean  isSupportLowerBoundInclusive()  {  [BUGGY]  return(this.supportLowerBoundInclusive)!=  0;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  isSupportLowerBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.7071067811865475	275	275	2	replace	return(this.supportLowerBoundInclusive)!=  0;	return  true;  	non-compiled	[CE]  cannot  find  symbol  supportLowerBoundInclusive	1	None
111	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(logx);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  nhalf  =  FastMath.log(logx);  [BUGGY]  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	    final  double  nhalf  =  FastMath.log(logx);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	14	None
112	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(logn);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  nhalf  =  FastMath.log(logn);  [BUGGY]  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	    final  double  nhalf  =  FastMath.log(logn);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	14	None
114	[BUG]  [BUGGY]    final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  denominatorDegreesOfFreedom  might  not  have  been  initialized  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	133	133	2	replace	    final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);		non-compiled	[CE]  variable  denominatorDegreesOfFreedom  might  not  have  been  initialized	14	None
121	[BUG]  [BUGGY]    final  double  numeratorDegreesOfFreedom  =  Math.abs(numeratorDegreesOfFreedom);  [CE]  variable  numeratorDegreesOfFreedom  might  not  have  been  initialized  [CONTEXT]  public  double  density(double  x)  {  [BUGGY]    final  double  numeratorDegreesOfFreedom  =  Math.abs(numeratorDegreesOfFreedom);  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	    final  double  numeratorDegreesOfFreedom  =  Math.abs(numeratorDegreesOfFreedom);		non-compiled	[CE]  variable  numeratorDegreesOfFreedom  might  not  have  been  initialized	6	None
124	[BUG]  [BUGGY]    final  double  numeratorDegreesOfFreedom  =  Math.exp(0,  x);  [CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  density(double  x)  {  [BUGGY]    final  double  numeratorDegreesOfFreedom  =  Math.exp(0,  x);  [BUGGY]  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	    final  double  numeratorDegreesOfFreedom  =  Math.exp(0,  x);		non-compiled	[CE]  method  exp  in  class  Math  cannot  be  applied  to  given  types;	6	None
132	[BUG]  [BUGGY]    int  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  possible  loss  of  precision  [CONTEXT]  public  double  density(double  x)  {  [BUGGY]    int  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	    int  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  possible  loss  of  precision	20	None
133	[BUG]  [BUGGY]    double  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  ';'  expected  [CONTEXT]  public  double  density(double  x)  {  [BUGGY]    double  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	    double  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  ';'  expected	20	None
135	[BUG]  [BUGGY]    double  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  ';'  expected  [CONTEXT]  public  double  density(double  x)  {  [BUGGY]    double  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  if  (x  <  lower  ||  x  >  upper)  {  return  0.0;  }  return  1  /  (upper  -  lower);  }  [CLASS]  UniformRealDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.35355339059327373	109	109	2	replace	    double  lower  =  Math.min(x,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)/  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  ';'  expected	20	None
153	[BUG]  [BUGGY]  final  double  nhalf  =  numberDegreesOfFreedom  /  2;  [CE]  cannot  find  symbol  numberDegreesOfFreedom  [CONTEXT]  public  double  density(double  x)  {  [BUGGY]  final  double  nhalf  =  numberDegreesOfFreedom  /  2;  [BUGGY]  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	129	129	2	replace	final  double  nhalf  =  numberDegreesOfFreedom  /  2;	final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  	non-compiled	[CE]  cannot  find  symbol  numberDegreesOfFreedom	5	None
161	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(logx);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  FastMath.log(logx);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  double  nhalf  =  FastMath.log(logx);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	12	None
162	[BUG]  [BUGGY]    final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  denominatorDegreesOfFreedom  might  not  have  been  initialized  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  double  denominatorDegreesOfFreedom  =  FastMath.log(denominatorDegreesOfFreedom);		non-compiled	[CE]  variable  denominatorDegreesOfFreedom  might  not  have  been  initialized	12	None
165	[BUG]  [BUGGY]    final  Double  nhalf  =  FastMath.log(logx);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  Double  nhalf  =  FastMath.log(logx);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  Double  nhalf  =  FastMath.log(logx);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	12	None
1	[BUG]  [BUGGY]  final  double  lognxm  =  FastMath.log(delta  *  x  +  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  delta  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]  final  double  lognxm  =  FastMath.log(delta  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	final  double  lognxm  =  FastMath.log(delta  *  x  +  denominatorDegreesOfFreedom);	final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +      denominatorDegreesOfFreedom);  	non-compiled	[CE]  cannot  find  symbol  delta	15	None
21	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(mhalf);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(mhalf);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    final  double  mhalf  =  FastMath.log(mhalf);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	16	None
22	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    final  double  nhalf  =  FastMath.log(nhalf);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	16	None
23	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(mhalf);  denominatorDegreesOfFreedom  =  Math.log(mhalf);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(mhalf);  denominatorDegreesOfFreedom  =  Math.log(mhalf);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    final  double  mhalf  =  FastMath.log(mhalf);  denominatorDegreesOfFreedom  =  Math.log(mhalf);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	16	None
25	[BUG]  [BUGGY]    denominatorDegreesOfFreedom  =  Math.abs(logn  -  logx);  [CE]  cannot  assign  a  value  to  final  variable  denominatorDegreesOfFreedom  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    denominatorDegreesOfFreedom  =  Math.abs(logn  -  logx);  [BUGGY]  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +            denominatorDegreesOfFreedom);  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	134	135	2	replace	    denominatorDegreesOfFreedom  =  Math.abs(logn  -  logx);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  denominatorDegreesOfFreedom	16	None
101	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	18	None
102	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	18	None
103	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	18	None
104	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x  +  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	18	None
105	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x)/  denominatorDegreesOfFreedom;  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x)/  denominatorDegreesOfFreedom;  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    final  double  mhalf  =  FastMath.log(denominatorDegreesOfFreedom  *  x)/  denominatorDegreesOfFreedom;		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	18	None
122	[BUG]  [BUGGY]  return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy));  [CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy));  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy));	return  false;  	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INVERSE_ABSOLUTE_ACCURacy	3	None
123	[BUG]  [BUGGY]  return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  ')'  expected  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);	return  false;  	non-compiled	[CE]  ')'  expected	3	None
124	[BUG]  [BUGGY]  return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [CE]  ')'  expected  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]  return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);  [BUGGY]  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	return(isSupportUpperBoundInclusive()  ||(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy  &&  this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy);	return  false;  	non-compiled	[CE]  ')'  expected	3	None
141	[BUG]  [BUGGY]    super.isSupportUpperBoundInclusive();  [CE]  abstract  method  isSupportUpperBoundInclusive()  in  RealDistribution  cannot  be  accessed  directly  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    super.isSupportUpperBoundInclusive();  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    super.isSupportUpperBoundInclusive();		non-compiled	[CE]  abstract  method  isSupportUpperBoundInclusive()  in  RealDistribution  cannot  be  accessed  directly	4	None
142	[BUG]  [BUGGY]    if(isSupportUpperBoundInclusive())  {  if(!this.isSupportUpperBoundInclusive())  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(isSupportUpperBoundInclusive())  {  if(!this.isSupportUpperBoundInclusive())  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(isSupportUpperBoundInclusive())  {  if(!this.isSupportUpperBoundInclusive())  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
143	[BUG]  [BUGGY]    if(isSupportUpperBoundInclusive())  {  this.upper  =  true;  if(this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(isSupportUpperBoundInclusive())  {  this.upper  =  true;  if(this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(isSupportUpperBoundInclusive())  {  this.upper  =  true;  if(this.upper  >  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
144	[BUG]  [BUGGY]    if(isSupportUpperBoundInclusive())  {  this.upper  =  true;  if(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  return  true;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    if(isSupportUpperBoundInclusive())  {  this.upper  =  true;  if(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    if(isSupportUpperBoundInclusive())  {  this.upper  =  true;  if(this.upper!=  DEFAULT_INVERSE_ABSOLUTE_ACCURacy)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None
145	[BUG]  [BUGGY]    Preconditions.checkArgument(isSupportUpperBoundInclusive());  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  public  boolean  isSupportUpperBoundInclusive()  {  [BUGGY]    Preconditions.checkArgument(isSupportUpperBoundInclusive());  [BUGGY]  return  false;  }  [CLASS]  UniformRealDistribution  [METHOD]  isSupportUpperBoundInclusive  [RETURN_TYPE]  boolean  [VARIABLES]  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  inverseCumAccuracy  lower  solverAbsoluteAccuracy  ul  upper  x  long  serialVersionUID  boolean  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java	0.7071067811865475	184	184	2	replace	    Preconditions.checkArgument(isSupportUpperBoundInclusive());		non-compiled	[CE]  cannot  find  symbol  Preconditions	4	None
161	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  FastMath.log(nhalf);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  double  nhalf  =  FastMath.log(nhalf);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	12	None
162	[BUG]  [BUGGY]    final  double  mhalf  =  FastMath.log(mhalf);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  double  mhalf  =  FastMath.log(mhalf);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  double  mhalf  =  FastMath.log(mhalf);		non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	12	None
163	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  double  nhalf  =  FastMath.log(numeratorDegreesOfFreedom);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	12	None
164	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  double  nhalf  =  FastMath.log(denominatorDegreesOfFreedom);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	12	None
165	[BUG]  [BUGGY]    final  double  nhalf  =  FastMath.log(mhalf);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  [BUGGY]    final  double  nhalf  =  FastMath.log(mhalf);  [BUGGY]  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	132	132	2	replace	    final  double  nhalf  =  FastMath.log(mhalf);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	12	None
