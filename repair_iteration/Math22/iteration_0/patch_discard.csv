increase failing tests,132,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double logn = FastMath.log(numeratorDegreesOfFreedom); ,final double logn = FastMath.log(logx);
increase failing tests,132,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double logn = FastMath.log(numeratorDegreesOfFreedom); ,final double logn = FastMath.log(mhalf);
increase failing tests,133,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double logm = FastMath.log(denominatorDegreesOfFreedom); ,final double logm = FastMath.log(logn);
increase failing tests,133,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double logm = FastMath.log(denominatorDegreesOfFreedom); ,final double logm = FastMath.log(logx);
increase failing tests,133,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double logm = FastMath.log(denominatorDegreesOfFreedom); ,final Double logm = FastMath.log(logn);
increase failing tests,130,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double mhalf = denominatorDegreesOfFreedom / 2; ,final double mhalf = denominatorDegreesOfFreedom * 2;
increase failing tests,130,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double mhalf = denominatorDegreesOfFreedom / 2; ,final double mhalf = denominatorDegreesOfFreedom / 2 + 1;
increase failing tests,130,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double mhalf = denominatorDegreesOfFreedom / 2; ,final double mhalf = DEFAULT_INVERSE_ABSOLUTE_ACCURACY / 2;
increase failing tests,131,replace, [FE] AssertionError testDensities,final double logx = FastMath.log(x); ,final double logx = FastMath.log(nhalf);
increase failing tests,131,replace, [FE] AssertionError testDensities,final double logx = FastMath.log(x); ,final double logx = FastMath.log(numeratorDegreesOfFreedom);
increase failing tests,131,replace, [FE] AssertionError testDensities,final double logx = FastMath.log(x); ,final double logx = FastMath.log(mhalf);
increase failing tests,131,replace, [FE] AssertionError testDensities,final double logx = FastMath.log(x); ,final double logx = FastMath.log(denominatorDegreesOfFreedom);
increase failing tests,133,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double denominatorDegreesOfFreedom = FastMath.log(logn);
increase failing tests,129,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double numeratorDegreesOfFreedom = Math.abs(x);
increase failing tests,129,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double numeratorDegreesOfFreedom = Math.exp(-x);
increase failing tests,129,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double numeratorDegreesOfFreedom = Math.log(x);
increase failing tests,109,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  double lower = Math.min(x, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
increase failing tests,109,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  double lower = Math.min(x, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)/ DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
increase failing tests,134,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +   denominatorDegreesOfFreedom); ,final double lognxm = FastMath.log(logx * x + denominatorDegreesOfFreedom);
increase failing tests,134,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +   denominatorDegreesOfFreedom); ,final double lognxm = FastMath.log(logn * x + denominatorDegreesOfFreedom);
increase failing tests,134,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +   denominatorDegreesOfFreedom); ,final double lognxm = FastMath.log(logn * x + DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
increase failing tests,134,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +   denominatorDegreesOfFreedom); ,final double lognxm = FastMath.log(logx * x + DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
increase failing tests,129,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double nhalf = numeratorDegreesOfFreedom / 2; ,final double nhalf = denominatorDegreesOfFreedom / 2;
increase failing tests,132,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double denominatorDegreesOfFreedom = FastMath.log(logx);
increase failing tests,130,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double denominatorDegreesOfFreedom = FastMath.log(nhalf);
increase failing tests,130,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double denominatorDegreesOfFreedom = Math.abs(nhalf);
increase failing tests,130,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double denominatorDegreesOfFreedom = FastMath.log(x);
increase failing tests,130,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double denominatorDegreesOfFreedom = FastMath.log(numeratorDegreesOfFreedom);
increase failing tests,130,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double denominatorDegreesOfFreedom = Math.abs(numeratorDegreesOfFreedom);
increase failing tests,136,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,return FastMath.exp(nhalf * logn + nhalf * logx - logx +  mhalf * logm - nhalf * lognxm - mhalf * lognxm -    Beta.logBeta(nhalf, mhalf)); ,return FastMath.exp(logx * logn + mhalf * logx - logx + nhalf * logm - lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf));
increase failing tests,136,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,return FastMath.exp(nhalf * logn + nhalf * logx - logx +  mhalf * logm - nhalf * lognxm - mhalf * lognxm -    Beta.logBeta(nhalf, mhalf)); ,return FastMath.exp(logx * logn + nhalf * logx - logx + nhalf * logm - lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf));
increase failing tests,136,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,return FastMath.exp(nhalf * logn + nhalf * logx - logx +  mhalf * logm - nhalf * lognxm - mhalf * lognxm -    Beta.logBeta(nhalf, mhalf)); ,return FastMath.exp(logx * logn + mhalf * logx - logx + nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf));
increase failing tests,136,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,return FastMath.exp(nhalf * logn + nhalf * logx - logx +  mhalf * logm - nhalf * lognxm - mhalf * lognxm -    Beta.logBeta(nhalf, mhalf)); ,return FastMath.exp(logx * logn + nhalf * logx - logx + mhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf));
increase failing tests,109,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,if (x < lower || x > upper) { ,if(x > lower || x > upper) {
increase failing tests,109,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,if (x < lower || x > upper) { ,if(x >= lower || x > upper) {
increase failing tests,109,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,if (x < lower || x > upper) { ,if(x <= lower || x > upper) {
increase failing tests,134,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +   denominatorDegreesOfFreedom); ,final double lognxm = FastMath.log(denominatorDegreesOfFreedom * x + denominatorDegreesOfFreedom);
increase failing tests,134,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +   denominatorDegreesOfFreedom); ,final double lognxm = FastMath.log(logn * denominatorDegreesOfFreedom + denominatorDegreesOfFreedom);
increase failing tests,134,add, [FE] AssertionError testIsSupportLowerBoundInclusive,,  final double xm = FastMath.log(logn);
increase failing tests,132,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double logn = FastMath.log(numeratorDegreesOfFreedom); ,final double logn = FastMath.log(numeratorDegreesOfFreedom / DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
increase failing tests,132,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double logn = FastMath.log(numeratorDegreesOfFreedom); ,final double logn = FastMath.log(numeratorDegreesOfFreedom)/ DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
increase failing tests,130,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double mhalf = denominatorDegreesOfFreedom / 2; ,final double mhalf = denominatorDegreesOfFreedom / 4;
increase failing tests,130,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,final double mhalf = denominatorDegreesOfFreedom / 2; ,final double mhalf = denominatorDegreesOfFreedom / 2 * 3;
increase failing tests,109,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,if (x < lower || x > upper) { ,if(x < upper || x > lower) {
increase failing tests,109,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,if (x < lower || x > upper) { ,if(x < this.lower || x > upper) {
increase failing tests,109,replace, [FE] AssertionError testIsSupportLowerBoundInclusive,if (x < lower || x > upper) { ,if(x < upper || lower > x) {
