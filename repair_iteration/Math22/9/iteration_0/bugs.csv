bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
17	[BUG] [BUGGY] return FastMath.exp(nhalf * logn + nhalf * logx - logx +  mhalf * logm - nhalf * lognxm - mhalf * lognxm -    Beta.logBeta(nhalf, mhalf)); [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); [BUGGY] return FastMath.exp(nhalf * logn + nhalf * logx - logx +       mhalf * logm - nhalf * lognxm - mhalf * lognxm -              Beta.logBeta(nhalf, mhalf)); [BUGGY] mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); [BUGGY] [BUGGY] return FastMath.exp(nhalf * logn + nhalf * logx - logx +       mhalf * logm - nhalf * lognxm - mhalf * lognxm -              Beta.logBeta(nhalf, mhalf)); mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } [CLASS] FDistribution [METHOD] density [RETURN_TYPE] double  double x [VARIABLES] boolean numericalVarianceIsCalculated double DEFAULT_INVERSE_ABSOLUTE_ACCURACY denominatorDegreesOfFreedom inverseCumAccuracy logm logn lognxm logx mhalf nhalf numeratorDegreesOfFreedom numericalVariance solverAbsoluteAccuracy x long serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	
