bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
2	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
4	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]        AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	  	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	non-compiled	[CE]  missing  return  statement	17	None	replace
6	[BUG]  [BUGGY]    Math.sqrt(DenominatorDegreesOfFreedom.doubleValue());  [CE]  cannot  find  symbol  DenominatorDegreesOfFreedom  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    Math.sqrt(DenominatorDegreesOfFreedom.doubleValue());  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    Math.sqrt(DenominatorDegreesOfFreedom.doubleValue());		non-compiled	[CE]  cannot  find  symbol  DenominatorDegreesOfFreedom	18	None	add
7	[BUG]  [BUGGY]    Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy);  [CE]  cannot  find  symbol  DenominatorDegreesOfFreedom  [FE]      AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy);		non-compiled	[CE]  cannot  find  symbol  DenominatorDegreesOfFreedom	18	None	add
8	[BUG]  [BUGGY]    Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy());  [CE]  cannot  find  symbol  DenominatorDegreesOfFreedom  [FE]        AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy());  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy());		non-compiled	[CE]  cannot  find  symbol  DenominatorDegreesOfFreedom	18	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
10	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
11	[BUG]  [BUGGY]    double  nhalf  =  logm  *  Math.log(lognxm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    double  nhalf  =  logm  *  Math.log(lognxm);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    double  nhalf  =  logm  *  Math.log(lognxm);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
12	[BUG]  [BUGGY]    nhalf  =  logm  *  Math.log(lognxm);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]      AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    nhalf  =  logm  *  Math.log(lognxm);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    nhalf  =  logm  *  Math.log(lognxm);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	18	None	add
13	[BUG]  [BUGGY]    double  nhalf  =  logm  *  Math.log(logn);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    double  nhalf  =  logm  *  Math.log(logn);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    double  nhalf  =  logm  *  Math.log(logn);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
14	[BUG]  [BUGGY]    double  nhalf  =  Math.abs(lognxm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    double  nhalf  =  Math.abs(lognxm);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    double  nhalf  =  Math.abs(lognxm);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
15	[BUG]  [BUGGY]    double  nhalf  =  Math.sqrt(logm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    double  nhalf  =  Math.sqrt(logm);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    double  nhalf  =  Math.sqrt(logm);		non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
16	[BUG]  [BUGGY]    nhalf  =  Math.abs(lognxm);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]        AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]    nhalf  =  Math.abs(lognxm);  [BUGGY]  return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	    nhalf  =  Math.abs(lognxm);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	18	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
18	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -        Beta.logBeta(nhalf,  mhalf));  	compilable	  [FE]  AssertionError  	17	3	replace
