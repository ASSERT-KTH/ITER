bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	3	None	add
2	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	3	None	add
3	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  	non-compiled	[CE]  not  a  statement	3	None	add
4	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(logn);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(logn);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  mhalf  =  FastMath.log(logn);	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	9	None	add
5	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logm.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logm.doubleValue();  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logm.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	9	None	add
6	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(nhalf);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(nhalf);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  mhalf  =  FastMath.log(nhalf);	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	9	None	add
7	[BUG]  [BUGGY]  double  nhalf  =  logm.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  logm.doubleValue();  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm.doubleValue();	      	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	replace
8	[BUG]  [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm);	      	non-compiled	[CE]  not  a  statement	5	None	replace
9	[BUG]  [BUGGY]  double  nhalf  =  logn  *  Math.log(logm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  logn  *  Math.log(logm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logn  *  Math.log(logm);	      double    nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	11	None	replace
10	[BUG]  [BUGGY]  double  lognxm  =  logm  *  Math.log(logn);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  lognxm  =  logm  *  Math.log(logn);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  logm  *  Math.log(logn);	      double    nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	11	None	replace
11	[BUG]  [BUGGY]  Math.sqrt(logn.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  Math.sqrt(logn.doubleValue());  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logn.doubleValue());	      Math.sqrt(DenominatorDegreesOfFreedom.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
12	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom.doubleValue());  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom.doubleValue());	      Math.sqrt(DenominatorDegreesOfFreedom.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
13	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	1	None	add
14	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	1	None	add
15	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	1	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	10	3	replace
17	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	10	3	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	10	3	replace
19	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	10	3	replace
20	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());	      Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy());    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
22	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
24	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
25	[BUG]  [BUGGY]  logn  =  Math.abs(logn);  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  logn  =  Math.abs(logn);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  Math.abs(logn);	      nhalf    =    Math.abs(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	16	None	replace
26	[BUG]  [BUGGY]  nhalf  =  Math.abs(logm);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]              AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  nhalf  =  Math.abs(logm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  =  Math.abs(logm);	      nhalf    =    Math.abs(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	16	None	replace
27	[BUG]  [BUGGY]  double  nhalf  =  Math.sqrt(logn);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  Math.sqrt(logn);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.sqrt(logn);	      double    nhalf    =    Math.sqrt(logm);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	15	None	replace
28	[BUG]  [BUGGY]  double  logn  =  Math.sqrt(logm);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  logn  =  Math.sqrt(logm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.sqrt(logm);	      double    nhalf    =    Math.sqrt(logm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	15	None	replace
29	[BUG]  [BUGGY]  logn  =  logm  *  Math.log(lognxm);  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  logn  =  logm  *  Math.log(lognxm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  logm  *  Math.log(lognxm);	      nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	12	None	replace
30	[BUG]  [BUGGY]  double  lognxm  =  logm  *  Math.log(lognxm);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  lognxm  =  logm  *  Math.log(lognxm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  logm  *  Math.log(lognxm);	      nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	12	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	4	3	replace
32	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	4	3	replace
33	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	17	None	add
34	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	17	None	add
35	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  logn  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  logn  =  FastMath.log(numeratorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	17	None	add
36	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  m  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  m  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  m	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  ')'  expected	18	None	replace
37	[BUG]  [BUGGY]  double  logn  =  logm  *  Math.log(logn);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  logn  =  logm  *  Math.log(logn);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  logm  *  Math.log(logn);	      double    nhalf    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	13	None	replace
38	[BUG]  [BUGGY]  Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  DenominatorDegreesOfFreedom  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy,  denominatorDegreesOfFreedom);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy,  denominatorDegreesOfFreedom);	      Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy);    	non-compiled	[CE]  cannot  find  symbol  DenominatorDegreesOfFreedom	7	None	replace
39	[BUG]  [BUGGY]  double  nhalf  =  Math.abs(logm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  Math.abs(logm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.abs(logm);	      double    nhalf    =    Math.abs(lognxm);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	14	None	replace
40	[BUG]  [BUGGY]  double  lognxm  =  Math.abs(logn);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  lognxm  =  Math.abs(logn);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  Math.abs(logn);	      double    nhalf    =    Math.abs(lognxm);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	14	None	replace
41	[BUG]  [BUGGY]  Math.sqrt(logm.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  Math.sqrt(logm.doubleValue());  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logm.doubleValue());	      Math.sqrt(DenominatorDegreesOfFreedom.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	10	3	replace
43	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	10	3	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
45	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
46	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	1	None	add
47	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	1	None	add
48	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	1	None	add
49	[BUG]  [BUGGY]  double  nhalf  =  Math.sqrt(logm,  denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  Math.sqrt(logm,  denominatorDegreesOfFreedom);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.sqrt(logm,  denominatorDegreesOfFreedom);	      double    nhalf    =    Math.sqrt(logm);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	15	None	replace
50	[BUG]  [BUGGY]  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom);	      nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	12	None	replace
51	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(lognxm,  denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  logm  *  Math.log(lognxm,  denominatorDegreesOfFreedom);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(lognxm,  denominatorDegreesOfFreedom);	      double    nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	11	None	replace
52	[BUG]  [BUGGY]  double  logn  =  logm  *  Math.log(lognxm);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  logn  =  logm  *  Math.log(lognxm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  logm  *  Math.log(lognxm);	      double    nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	11	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	18	3	replace
54	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	18	3	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	18	3	replace
56	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	18	3	replace
57	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom);	      double    nhalf    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	13	None	replace
58	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  logx  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  logx  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  logx  =  FastMath.log(denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	17	None	add
59	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	17	None	add
60	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	17	None	add
61	[BUG]  [BUGGY]  double  nhalf  =  Math.abs(logn);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  Math.abs(logn);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.abs(logn);	      double    nhalf    =    Math.abs(lognxm);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	14	None	replace
62	[BUG]  [BUGGY]  nhalf  =  Math.abs(logn);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  nhalf  =  Math.abs(logn);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  =  Math.abs(logn);	      nhalf    =    Math.abs(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	16	None	replace
63	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	3	None	add
64	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	3	None	add
65	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	3	None	add
66	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	9	None	add
67	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	9	None	add
68	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	9	None	add
69	[BUG]  [BUGGY]  Math.sqrt(logm,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  Math.sqrt(logm,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logm,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	      Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	7	None	replace
70	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  ')'  expected	4	None	replace
71	[BUG]  [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy());  [CE]  cannot  find  symbol  Factory  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy());  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(Factory.inverseCumAccuracy());	      Math.sqrt(DenominatorDegreesOfFreedom.inverseCumAccuracy());    	non-compiled	[CE]  cannot  find  symbol  Factory	8	None	replace
72	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	1	None	add
73	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	1	None	add
74	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	1	None	add
75	[BUG]  [BUGGY]  double  nhalf  =  Math.abs(lognxm)/  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  Math.abs(lognxm)/  2;  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.abs(lognxm)/  2;	      	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	5	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	18	3	replace
77	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	18	3	replace
78	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  ')'  expected	18	None	replace
79	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	3	None	add
80	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	3	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
82	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
83	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	17	None	add
84	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(logm  *  logn  +  nhalf  *  logx  -  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	17	None	add
85	[BUG]  [BUGGY]  double  nhalf  =  logn  *  Math.log(lognxm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  logn  *  Math.log(lognxm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logn  *  Math.log(lognxm);	      double    nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	11	None	replace
86	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(x);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  double  nhalf  =  logm  *  Math.log(x);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(x);	      double    nhalf    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	13	None	replace
87	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	9	None	add
88	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	9	None	add
89	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);  [BUGGY]    mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);	  	non-compiled	[CE]  unexpected  type	9	None	add
90	[BUG]  [BUGGY]  nhalf  =  logn  *  Math.log(lognxm);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]          AssertionError    [CONTEXT]    public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);    [BUGGY]  nhalf  =  logn  *  Math.log(lognxm);  [BUGGY]    return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  =  logn  *  Math.log(lognxm);	      nhalf    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	12	None	replace
