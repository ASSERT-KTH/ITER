bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  logn  =  logm  *  Math.log(x);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  logm  *  Math.log(x);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  logm  *  Math.log(x);	  double    logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	52	None	replace
2	[BUG]  [BUGGY]  double  logn  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  logm  *  Math.log(denominatorDegreesOfFreedom);	  double    logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	52	None	replace
3	[BUG]  [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	65	None	replace
4	[BUG]  [BUGGY]  mhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	65	None	replace
5	[BUG]  [BUGGY]  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logn.doubleValue();	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    nhalf    =    logn.doubleValue();    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	64	None	replace
6	[BUG]  [BUGGY]  double  lognxm  =  logn  *  Math.log(logn);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  logn  *  Math.log(logn);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  logn  *  Math.log(logn);	  double    nhalf    =    logn    *    Math.log(lognxm);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	85	None	replace
7	[BUG]  [BUGGY]  double  lognxm  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  logm  *  Math.log(denominatorDegreesOfFreedom);	  double    lognxm    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	10	None	replace
8	[BUG]  [BUGGY]  double  lognxm  =  logm  /  Math.log(logn);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  logm  /  Math.log(logn);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  logm  /  Math.log(logn);	  double    lognxm    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	10	None	replace
9	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	55	None	add
10	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	55	None	add
11	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	55	None	add
12	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  not  a  statement	73	None	replace
13	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  not  a  statement	73	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	54	3	replace
15	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	54	3	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	77	3	replace
17	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	77	3	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	77	3	replace
19	[BUG]  [BUGGY]  return  FastMath.exp(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	77	3	replace
20	[BUG]  [BUGGY]  mhalf  *  logn  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  logn  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  logn  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    logn    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	35	None	replace
21	[BUG]  [BUGGY]  mhalf  *  logn  =  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  logn  =  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  logn  =  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    logn    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	35	None	replace
22	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	18	None	add
23	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	18	None	add
24	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	18	None	add
25	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	63	None	replace
26	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  not  a  statement	63	None	replace
27	[BUG]  [BUGGY]  logn  =  Math.abs(logm);  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  logn  =  Math.abs(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  Math.abs(logm);	  logn    =    Math.abs(logn);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	25	None	replace
28	[BUG]  [BUGGY]  logm  =  Math.abs(logn);  [CE]  cannot  assign  a  value  to  final  variable  logm  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  logm  =  Math.abs(logn);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logm  =  Math.abs(logn);	  logn    =    Math.abs(logn);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logm	25	None	replace
29	[BUG]  [BUGGY]  Math.sqrt(logn,  denominatorDegreesOfFreedom.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(logn,  denominatorDegreesOfFreedom.doubleValue());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logn,  denominatorDegreesOfFreedom.doubleValue());	  Math.sqrt(logn.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
30	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  ')'  expected	70	None	replace
31	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  ')'  expected	70	None	replace
32	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	13	None	replace
33	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	13	None	replace
34	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(logn);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  mhalf  =  FastMath.log(logn);	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	16	None	add
35	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logm.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logm.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logm.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	16	None	add
36	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(nhalf);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(nhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  mhalf  =  FastMath.log(nhalf);	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	16	None	add
37	[BUG]  [BUGGY]  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	33	None	replace
38	[BUG]  [BUGGY]  double  lognxm  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	33	None	replace
39	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf);    	non-compiled	[CE]  not  a  statement	3	None	replace
40	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf);    	non-compiled	[CE]  not  a  statement	3	None	replace
41	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.exp(x  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  unexpected  type	79	None	replace
42	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  not  a  statement	79	None	replace
43	[BUG]  [BUGGY]  double  logn  =  Math.abs(logm);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.abs(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.abs(logm);	  double    nhalf    =    Math.abs(logm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	39	None	replace
44	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  logm  +  nhalf  *  logx  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  logm  +  nhalf  *  logx  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.exp(x  *  logm  +  nhalf  *  logx  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  unexpected  type	88	None	replace
45	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  not  a  statement	84	None	replace
46	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	15	None	replace
47	[BUG]  [BUGGY]  double  mhalf  =  FastMath.log(nhalf  *  logm  +  nhalf  *  logx  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  mhalf  =  FastMath.log(nhalf  *  logm  +  nhalf  *  logx  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  mhalf  =  FastMath.log(nhalf  *  logm  +  nhalf  *  logx  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	6	None	replace
48	[BUG]  [BUGGY]  double  mhalf  =  FastMath.log(nhalf  *  logm  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  mhalf  =  FastMath.log(nhalf  *  logm  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  mhalf  =  FastMath.log(nhalf  *  logm  +  nhalf  *  logx  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	6	None	replace
49	[BUG]  [BUGGY]  double  nhalf  =  Math.abs(logn)/  2;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  Math.abs(logn)/  2;  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.abs(logn)/  2;	  double    nhalf    =    Math.abs(lognxm)/    2;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	75	None	replace
50	[BUG]  [BUGGY]  double  nhalf  =  Math.sqrt(logn,  denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  Math.sqrt(logn,  denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.sqrt(logn,  denominatorDegreesOfFreedom);	  double    nhalf    =    Math.sqrt(logm,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	49	None	replace
51	[BUG]  [BUGGY]  double  nhalf  =  Math.sqrt(logn,  logm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  Math.sqrt(logn,  logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.sqrt(logn,  logm);	  double    nhalf    =    Math.sqrt(logm,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	49	None	replace
52	[BUG]  [BUGGY]  double  logn  =  Math.abs(logn);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.abs(logn);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.abs(logn);	  double    nhalf    =    Math.abs(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	61	None	replace
53	[BUG]  [BUGGY]  nhalf  *  logx  =  FastMath.exp(nhalf  *  logm  +  nhalf  *  logx  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logx  =  FastMath.exp(nhalf  *  logm  +  nhalf  *  logx  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logx  =  FastMath.exp(nhalf  *  logm  +  nhalf  *  logx  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    logx    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	58	None	replace
54	[BUG]  [BUGGY]  nhalf  *  logx  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logx  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logx  =  FastMath.exp(logm  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    logx    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	58	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	17	3	replace
56	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	17	3	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	17	3	replace
58	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	17	3	replace
59	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	66	None	replace
60	[BUG]  [BUGGY]  nhalf  *  logm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	66	None	replace
61	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
62	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
63	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  cannot  find  symbol  beta  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  cannot  find  symbol  beta	32	None	replace
64	[BUG]  [BUGGY]  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x);	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom    *    x);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	34	None	replace
65	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  not  a  statement	87	None	replace
66	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  not  a  statement	87	None	replace
67	[BUG]  [BUGGY]  double  logn  =  Math.sqrt(logm,  denominatorDegreesOfFreedom);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.sqrt(logm,  denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.sqrt(logm,  denominatorDegreesOfFreedom);	  double    logn    =    Math.sqrt(logm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	28	None	replace
68	[BUG]  [BUGGY]  double  logn  =  Math.sqrt(logm,  x);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.sqrt(logm,  x);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.sqrt(logm,  x);	  double    logn    =    Math.sqrt(logm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	28	None	replace
69	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    +    lognxm);    	non-compiled	[CE]  not  a  statement	89	None	replace
70	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(denominatorDegreesOfFreedom  +  lognxm);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    +    lognxm);    	non-compiled	[CE]  not  a  statement	89	None	replace
71	[BUG]  [BUGGY]  logn  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  logn  =  logm  *  Math.log(denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  logm  *  Math.log(denominatorDegreesOfFreedom);	  logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	29	None	replace
72	[BUG]  [BUGGY]  logn  =  FastMath.log(lognxm  *  Math.log(lognxm));  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  logn  =  FastMath.log(lognxm  *  Math.log(lognxm));  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  FastMath.log(lognxm  *  Math.log(lognxm));	  logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	29	None	replace
73	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  logn.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  logn.doubleValue());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom,  logn.doubleValue());	  Math.sqrt(denominatorDegreesOfFreedom.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
74	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  x.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  x.doubleValue());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom,  x.doubleValue());	  Math.sqrt(denominatorDegreesOfFreedom.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
75	[BUG]  [BUGGY]  double  nhalf  =  logn  *  Math.log(denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logn  *  Math.log(denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logn  *  Math.log(denominatorDegreesOfFreedom);	  double    nhalf    =    logm    *    Math.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	57	None	replace
76	[BUG]  [BUGGY]  double  nhalf  =  denominatorDegreesOfFreedom  *  Math.log(logm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  denominatorDegreesOfFreedom  *  Math.log(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  denominatorDegreesOfFreedom  *  Math.log(logm);	  double    nhalf    =    logm    *    Math.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	57	None	replace
77	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	44	None	add
78	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	44	None	add
79	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	44	None	add
80	[BUG]  [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm));    	non-compiled	[CE]  not  a  statement	48	None	replace
81	[BUG]  [BUGGY]  mhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm));    	non-compiled	[CE]  not  a  statement	48	None	replace
82	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  cannot  find  symbol  beta  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  cannot  find  symbol  beta	19	None	replace
83	[BUG]  [BUGGY]  mhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    nhalf    =    logn.doubleValue();    	non-compiled	[CE]  not  a  statement	60	None	replace
84	[BUG]  [BUGGY]  Math.sqrt(logm,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  denominatorDegreesOfFreedom);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(logm,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logm,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY,  denominatorDegreesOfFreedom);	  Math.sqrt(logm,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	69	None	replace
85	[BUG]  [BUGGY]  Math.sqrt(logn,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(logn,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logn,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  Math.sqrt(logm,    DEFAULT_INVERSE_ABSOLUTE_ACCURACY);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	69	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	56	3	replace
87	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	56	3	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	56	3	replace
89	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	56	3	replace
90	[BUG]  [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  logn);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  -  Beta.logBeta(nhalf,  logn);	  nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm);    	non-compiled	[CE]  not  a  statement	8	None	replace
91	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(lognxm);    	non-compiled	[CE]  not  a  statement	80	None	replace
92	[BUG]  [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy(),  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  Factory  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy(),  denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(Factory.inverseCumAccuracy(),  denominatorDegreesOfFreedom);	  Math.sqrt(Factory.inverseCumAccuracy());    	non-compiled	[CE]  cannot  find  symbol  Factory	71	None	replace
93	[BUG]  [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  Factory  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(Factory.inverseCumAccuracy(),  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  Math.sqrt(Factory.inverseCumAccuracy());    	non-compiled	[CE]  cannot  find  symbol  Factory	71	None	replace
94	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	31	None	add
95	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	31	None	add
96	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	31	None	add
97	[BUG]  [BUGGY]  nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    nhalf    =    logm.doubleValue();    	non-compiled	[CE]  not  a  statement	5	None	replace
98	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  cannot  find  symbol  beta  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  cannot  find  symbol  beta	43	None	replace
99	[BUG]  [BUGGY]  Math.sqrt(logm,  denominatorDegreesOfFreedom.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(logm,  denominatorDegreesOfFreedom.doubleValue());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logm,  denominatorDegreesOfFreedom.doubleValue());	  Math.sqrt(logm.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
100	[BUG]  [BUGGY]  double  logn  =  Math.sqrt(logn);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.sqrt(logn);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.sqrt(logn);	  double    nhalf    =    Math.sqrt(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	27	None	replace
101	[BUG]  [BUGGY]  Math.sqrt(numeratorDegreesOfFreedom.inverseCumAccuracy());  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(numeratorDegreesOfFreedom.inverseCumAccuracy());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(numeratorDegreesOfFreedom.inverseCumAccuracy());	  Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());    	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	replace
102	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  x.inverseCumAccuracy());  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  x.inverseCumAccuracy());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom,  x.inverseCumAccuracy());	  Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());    	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	replace
103	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	1	None	replace
104	[BUG]  [BUGGY]  double  lognxm  =  Math.abs(logm);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  Math.abs(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  Math.abs(logm);	  double    lognxm    =    Math.abs(logn);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	40	None	replace
105	[BUG]  [BUGGY]  lognxm  =  Math.abs(logm);  [CE]  cannot  assign  a  value  to  final  variable  lognxm  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  lognxm  =  Math.abs(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	lognxm  =  Math.abs(logm);	  double    lognxm    =    Math.abs(logn);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  lognxm	40	None	replace
106	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  m  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  m  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  m	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    m    	non-compiled	[CE]  ')'  expected	36	None	replace
107	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    m    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
108	[BUG]  [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm));    	non-compiled	[CE]  not  a  statement	68	None	replace
109	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logm.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logm.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logm.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	42	None	add
110	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(logn);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  mhalf  =  FastMath.log(logn);	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	42	None	add
111	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(nhalf);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  mhalf  =  FastMath.log(nhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  mhalf  =  FastMath.log(nhalf);	  	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	42	None	add
112	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  double    nhalf    =    logm    *    Math.log(lognxm,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	51	None	replace
113	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(x,  denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logm  *  Math.log(x,  denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(x,  denominatorDegreesOfFreedom);	  double    nhalf    =    logm    *    Math.log(lognxm,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	51	None	replace
114	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	23	None	add
115	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	23	None	add
116	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	23	None	add
117	[BUG]  [BUGGY]  double  nhalf  =  logn  *  Math.log(x);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logn  *  Math.log(x);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logn  *  Math.log(x);	  double    nhalf    =    logm    *    Math.log(x);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	86	None	replace
118	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	76	None	add
119	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);	  	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	76	None	add
120	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	76	None	add
121	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	53	None	add
122	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	53	None	add
123	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	53	None	add
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	82	3	replace
125	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	82	3	replace
126	[BUG]  [BUGGY]  nhalf  =  logn  *  Math.log(denominatorDegreesOfFreedom);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  =  logn  *  Math.log(denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  =  logn  *  Math.log(denominatorDegreesOfFreedom);	  nhalf    =    logm    *    Math.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	50	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	22	3	replace
128	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	22	3	replace
129	[BUG]  [BUGGY]  double  lognxm  =  logm  /  Math.log(lognxm);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  logm  /  Math.log(lognxm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  logm  /  Math.log(lognxm);	  double    lognxm    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	30	None	replace
130	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	81	None	add
131	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	81	None	add
132	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	81	None	add
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	24	3	replace
134	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	24	3	replace
135	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	21	None	add
136	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	21	None	add
137	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	21	None	add
138	[BUG]  [BUGGY]  double  mhalf  =  FastMath.log(logn);  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  mhalf  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  mhalf  =  FastMath.log(logn);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(logn);    	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	4	None	replace
139	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  cannot  find  symbol  beta  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  cannot  find  symbol  beta	56	None	replace
140	[BUG]  [BUGGY]  double  logn  =  Math.sqrt(logm  /  2.0);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.sqrt(logm  /  2.0);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.sqrt(logm  /  2.0);	  double    logn    =    Math.sqrt(logm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	28	None	replace
141	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
142	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBe  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBe  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBe	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  ')'  expected	70	None	replace
143	[BUG]  [BUGGY]  nhalf  =  logm  *  Math.floor(denominatorDegreesOfFreedom);  [CE]  cannot  assign  a  value  to  final  variable  nhalf  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  =  logm  *  Math.floor(denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  =  logm  *  Math.floor(denominatorDegreesOfFreedom);	  nhalf    =    logm    *    Math.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nhalf	50	None	replace
144	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  ')'  expected	78	None	replace
145	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  m  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  m  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  m	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  ')'  expected	78	None	replace
146	[BUG]  [BUGGY]  double  logn  =  Math.log(lognxm);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.log(lognxm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.log(lognxm);	  double    logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	52	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm));    	compilable	  [FE]  AssertionError  	68	3	replace
148	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm));    	compilable	  [FE]  AssertionError  	68	3	replace
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(numeratorDegreesOfFreedom,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(numeratorDegreesOfFreedom,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	19	3	replace
150	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(numeratorDegreesOfFreedom,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(numeratorDegreesOfFreedom,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(numeratorDegreesOfFreedom,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	19	3	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(logn);    	compilable	  [FE]  AssertionError  	4	3	replace
152	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(logn);    	compilable	  [FE]  AssertionError  	4	3	replace
153	[BUG]  [BUGGY]  double  mhalf  =  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  mhalf  =  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  mhalf  =  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(logn);    	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	4	None	replace
154	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	42	None	add
155	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	42	None	add
156	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	42	None	add
157	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	81	None	add
158	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	81	None	add
159	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	81	None	add
160	[BUG]  [BUGGY]  double  logn  =  Math.log(logm);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  Math.log(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  Math.log(logm);	  double    logn    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	37	None	replace
161	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    +    lognxm);    	non-compiled	[CE]  unexpected  type	89	None	replace
162	[BUG]  [BUGGY]  mhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom    +    lognxm);    	non-compiled	[CE]  unexpected  type	89	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
164	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	2	3	replace
165	[BUG]  [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(lognxm,  logn);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(lognxm,  logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  -  Beta.logBeta(lognxm,  logn);	  nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm);    	non-compiled	[CE]  not  a  statement	8	None	replace
166	[BUG]  [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(logn,  lognxm);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  -  Beta.logBeta(logn,  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  -  Beta.logBeta(logn,  lognxm);	  nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm);    	non-compiled	[CE]  not  a  statement	8	None	replace
167	[BUG]  [BUGGY]  double  nhalf  =  Math.sqrt(denominatorDegreesOfFreedom,  logm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  Math.sqrt(denominatorDegreesOfFreedom,  logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.sqrt(denominatorDegreesOfFreedom,  logm);	  double    nhalf    =    Math.sqrt(logm,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	49	None	replace
168	[BUG]  [BUGGY]  Math.sqrt(numeratorDegreesOfFreedom,  solverAbsoluteAccuracy());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(numeratorDegreesOfFreedom,  solverAbsoluteAccuracy());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(numeratorDegreesOfFreedom,  solverAbsoluteAccuracy());	  Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
169	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  logn.inverseCumAccuracy());  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  logn.inverseCumAccuracy());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom,  logn.inverseCumAccuracy());	  Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());    	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	replace
170	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	18	None	add
171	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  denominatorDegreesOfFreedom  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	18	None	add
172	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	compilable	  [FE]  AssertionError  	79	3	replace
174	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	compilable	  [FE]  AssertionError  	79	3	replace
175	[BUG]  [BUGGY]  double  nhalf  =  Math.abs(lognxm)/  2  +  denominatorDegreesOfFreedom;  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  Math.abs(lognxm)/  2  +  denominatorDegreesOfFreedom;  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  Math.abs(lognxm)/  2  +  denominatorDegreesOfFreedom;	  double    nhalf    =    Math.abs(lognxm)/    2;    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	75	None	replace
176	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	23	None	add
177	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	23	None	add
178	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom;  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  not  a  statement	23	None	add
179	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  cannot  find  symbol  beta  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  cannot  find  symbol  beta	15	None	replace
180	[BUG]  [BUGGY]  double  lognxm  =  FastMath.log(logm  *  Math.log(x));  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.log(logm  *  Math.log(x));  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.log(logm  *  Math.log(x));	  double    lognxm    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	10	None	replace
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  1  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  1  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	17	3	replace
182	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  1  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  1  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  1  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	17	3	replace
183	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	55	None	add
184	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom;  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  not  a  statement	55	None	add
185	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom.doubleValue();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  denominatorDegreesOfFreedom.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  denominatorDegreesOfFreedom.doubleValue();	  	non-compiled	[CE]  not  a  statement	55	None	add
186	[BUG]  [BUGGY]  double  logn  =  logn  *  Math.log(lognxm);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  logn  *  Math.log(lognxm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  logn  *  Math.log(lognxm);	  nhalf    =    logn    *    Math.log(lognxm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	90	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	59	3	replace
188	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	59	3	replace
189	[BUG]  [BUGGY]  logn  =  FastMath.log(lognxm);  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  logn  =  FastMath.log(lognxm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  FastMath.log(lognxm);	  logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	29	None	replace
190	[BUG]  [BUGGY]  logn  =  Math.log(lognxm);  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  logn  =  Math.log(lognxm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  Math.log(lognxm);	  logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	29	None	replace
191	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	63	None	replace
192	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	16	None	add
193	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	16	None	add
194	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	16	None	add
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    logx    =    FastMath.log(denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	58	3	replace
196	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  logx  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    logx    =    FastMath.log(denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	58	3	replace
197	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	44	None	add
198	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	44	None	add
199	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	44	None	add
200	[BUG]  [BUGGY]  double  mhalf  =  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  mhalf  =  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  mhalf  =  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	6	None	replace
201	[BUG]  [BUGGY]  Math.sqrt(logm,  logn.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(logm,  logn.doubleValue());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logm,  logn.doubleValue());	  Math.sqrt(logn.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  x  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(logm  *  x  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	77	3	replace
203	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  x  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  x  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(logm  *  x  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	77	3	replace
204	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom,  x);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom,  x);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(denominatorDegreesOfFreedom,  x);	  double    nhalf    =    logm    *    Math.log(lognxm,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	51	None	replace
205	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(lognxm);    	non-compiled	[CE]  ')'  expected	80	None	replace
206	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logn  +  nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	65	3	replace
207	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	65	3	replace
208	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	21	None	add
209	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	21	None	add
210	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	21	None	add
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	compilable	  [FE]  AssertionError  	88	3	replace
212	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	compilable	  [FE]  AssertionError  	88	3	replace
213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	46	3	replace
214	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	46	3	replace
215	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  logm.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  logm.doubleValue());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom,  logm.doubleValue());	  Math.sqrt(denominatorDegreesOfFreedom.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  /  2  +  nhalf  *  lognxm  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  /  2  +  nhalf  *  lognxm  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	82	3	replace
217	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  /  2  +  nhalf  *  lognxm  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  /  2  +  nhalf  *  lognxm  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  /  2  +  nhalf  *  lognxm  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	82	3	replace
218	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	76	None	add
219	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	76	None	add
220	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	76	None	add
221	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	31	None	add
222	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	31	None	add
223	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	31	None	add
224	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  logn  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  logn  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	45	3	replace
225	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  logn  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  logn  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  logn  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	45	3	replace
226	[BUG]  [BUGGY]  Math.sqrt(logm.doubleValue()  /  2.0);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(logm.doubleValue()  /  2.0);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logm.doubleValue()  /  2.0);	  Math.sqrt(logm.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
227	[BUG]  [BUGGY]  double  lognxm  =  Math.abs(logm  /  2);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  Math.abs(logm  /  2);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  Math.abs(logm  /  2);	  double    lognxm    =    Math.abs(logn);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	40	None	replace
228	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    m    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
229	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    m    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(nhalf  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(nhalf  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	83	3	replace
231	[BUG]  [BUGGY]  return  FastMath.exp(nhalf  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(nhalf  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(nhalf  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	compilable	  [FE]  AssertionError  	83	3	replace
232	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  	non-compiled	[CE]  not  a  statement	53	None	add
233	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  logn.doubleValue();  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  logn.doubleValue();	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	53	None	add
234	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));	  	non-compiled	[CE]  not  a  statement	53	None	add
235	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf);    	non-compiled	[CE]  ')'  expected	3	None	replace
236	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [CE]  cannot  find  symbol  beta  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  cannot  find  symbol  beta	54	None	replace
237	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  ')'  expected	79	None	replace
238	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	19	3	replace
240	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	19	3	replace
241	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	31	None	add
242	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);	  	non-compiled	[CE]  unexpected  type	31	None	add
243	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	31	None	add
244	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  ')'  expected	82	None	replace
245	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	32	3	replace
246	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	32	3	replace
247	[BUG]  [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	59	None	replace
248	[BUG]  [BUGGY]  double  mhalf  =  FastMath.log(lognxm  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  variable  mhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  mhalf  =  FastMath.log(lognxm  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  mhalf  =  FastMath.log(lognxm  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    mhalf    =    FastMath.log(nhalf);    	non-compiled	[CE]  variable  mhalf  is  already  defined  in  method  density(double)	6	None	replace
249	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(numeratorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logm  *  Math.log(numeratorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(numeratorDegreesOfFreedom);	  double    nhalf    =    logm    *    Math.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	57	None	replace
250	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  denominatorDegreesOfFreedom);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	63	None	replace
251	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	81	None	add
252	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	81	None	add
253	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);	  	non-compiled	[CE]  unexpected  type	81	None	add
254	[BUG]  [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  lognxm	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm));    	non-compiled	[CE]  not  a  statement	48	None	replace
255	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	55	None	add
256	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	55	None	add
257	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);	  	non-compiled	[CE]  unexpected  type	55	None	add
258	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	72	None	replace
259	[BUG]  [BUGGY]  double  logn  =  FastMath.log(lognm  *  Math.log(x));  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  FastMath.log(lognm  *  Math.log(x));  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  FastMath.log(lognm  *  Math.log(x));	  double    logn    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	37	None	replace
260	[BUG]  [BUGGY]  double  logn  =  FastMath.log(logm);  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  FastMath.log(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  FastMath.log(logm);	  double    logn    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	37	None	replace
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  1  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  1  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	45	3	replace
262	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  1  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  1  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  1  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	45	3	replace
263	[BUG]  [BUGGY]  double  lognxm  =  FastMath.log(logm  *  Math.log(x),  logn);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.log(logm  *  Math.log(x),  logn);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.log(logm  *  Math.log(x),  logn);	  double    lognxm    =    logm    *    Math.log(logn);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	10	None	replace
264	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(lognxm);    	non-compiled	[CE]  ')'  expected	74	None	replace
265	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(lognxm);    	non-compiled	[CE]  unexpected  type	74	None	replace
266	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
267	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	16	None	add
268	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	16	None	add
269	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(lognxm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  Math.abs(lognxm);	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	16	None	add
270	[BUG]  [BUGGY]  double  lognxm  =  FastMath.abs(logm);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.abs(logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.abs(logm);	  double    lognxm    =    Math.abs(logn);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	40	None	replace
271	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(logn  *  Math.abs(x));  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(logn  *  Math.abs(x));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  Math.abs(logn  *  Math.abs(x));	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
272	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(logn);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  Math.abs(logn);	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
273	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(lognxm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  Math.abs(lognxm);	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	18	None	add
274	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  logm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  logm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(nhalf  *  logm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(logn);    	non-compiled	[CE]  unexpected  type	88	None	replace
275	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBe  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBe  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBe	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    m    	non-compiled	[CE]  ')'  expected	36	None	replace
276	[BUG]  [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  x);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(denominatorDegreesOfFreedom,  x);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(denominatorDegreesOfFreedom,  x);	  Math.sqrt(denominatorDegreesOfFreedom.doubleValue());    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	12	None	replace
277	[BUG]  [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    logm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    +    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  not  a  statement	66	None	replace
278	[BUG]  [BUGGY]  double  logn  =  FastMath.log(lognxm  *  Math.log(x));  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  FastMath.log(lognxm  *  Math.log(x));  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  FastMath.log(lognxm  *  Math.log(x));	  double    logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	52	None	replace
279	[BUG]  [BUGGY]  double  logn  =  FastMath.log(logm  *  Math.log(x));  [CE]  variable  logn  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  logn  =  FastMath.log(logm  *  Math.log(x));  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  logn  =  FastMath.log(logm  *  Math.log(x));	  double    logn    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  logn  is  already  defined  in  method  density(double)	52	None	replace
280	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  denominatorDegreesOfFreedom  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  denominatorDegreesOfFreedom  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  lognxm  +  denominatorDegreesOfFreedom  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	83	None	replace
281	[BUG]  [BUGGY]  logn  =  logn  *  Math.log(lognxm);  [CE]  cannot  assign  a  value  to  final  variable  logn  [FE]              AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  logn  =  logn  *  Math.log(lognxm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	logn  =  logn  *  Math.log(lognxm);	  nhalf    =    logn    *    Math.log(lognxm);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  logn	90	None	replace
282	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
283	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(n  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(n  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(n	  return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf    	non-compiled	[CE]  ')'  expected	78	None	replace
284	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	53	None	add
285	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  +  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  	non-compiled	[CE]  not  a  statement	53	None	add
286	[BUG]  [BUGGY]  nhalf  *  logm  -  Beta.logBeta(lognxm,  logn);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logm  -  Beta.logBeta(lognxm,  logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logm  -  Beta.logBeta(lognxm,  logn);	  nhalf    *    lognxm    -    Beta.logBeta(nhalf,    lognxm);    	non-compiled	[CE]  not  a  statement	8	None	replace
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	43	3	replace
288	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	43	3	replace
289	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	21	None	add
290	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	21	None	add
291	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);	  	non-compiled	[CE]  unexpected  type	21	None	add
292	[BUG]  [BUGGY]  nhalf  *  logx  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logx  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logx  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    logx    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	58	None	replace
293	[BUG]  [BUGGY]  nhalf  *  logx  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  logx  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  logx  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    logx    =    FastMath.log(denominatorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	58	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	56	3	replace
295	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    lognxm    -    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	56	3	replace
296	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(nhalf  *  lognxm  +  nhalf  *  logx  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(lognxm);    	non-compiled	[CE]  ')'  expected	80	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	24	3	replace
298	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	compilable	  [FE]  AssertionError  	24	3	replace
299	[BUG]  [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  lognxm  +  nhalf  *  logm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf	  return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  ')'  expected	24	None	replace
300	[BUG]  [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy()  +  logm);  [CE]  cannot  find  symbol  Factory  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(Factory.inverseCumAccuracy()  +  logm);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(Factory.inverseCumAccuracy()  +  logm);	  Math.sqrt(Factory.inverseCumAccuracy());    	non-compiled	[CE]  cannot  find  symbol  Factory	71	None	replace
301	[BUG]  [BUGGY]  mhalf  *  logn  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [CE]  unexpected  type  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  logn  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  logn  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    logn    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  unexpected  type	35	None	replace
302	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  1  +  nhalf  *  lognxm  -  1  -  nhalf  *  lognxm  -  1  -  mhalf  *  lognxm  -  Beta.logBeta(n  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  1  +  nhalf  *  lognxm  -  1  -  nhalf  *  lognxm  -  1  -  mhalf  *  lognxm  -  Beta.logBeta(n  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  1  +  nhalf  *  lognxm  -  1  -  nhalf  *  lognxm  -  1  -  mhalf  *  lognxm  -  Beta.logBeta(n	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  ')'  expected	22	None	replace
303	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  1  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(	  return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
304	[BUG]  [BUGGY]  double  lognxm  =  FastMath.log(lognxm  *  Math.log(x));  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.log(lognxm  *  Math.log(x));  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.log(lognxm  *  Math.log(x));	  double    lognxm    =    logm    *    Math.log(lognxm);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	30	None	replace
305	[BUG]  [BUGGY]  Math.sqrt(logn,  logm.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(logn,  logm.doubleValue());  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(logn,  logm.doubleValue());	  Math.sqrt(logm.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
306	[BUG]  [BUGGY]  Math.sqrt(numeratorDegreesOfFreedom,  numericalVarianceIsCalculated);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  Math.sqrt(numeratorDegreesOfFreedom,  numericalVarianceIsCalculated);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	Math.sqrt(numeratorDegreesOfFreedom,  numericalVarianceIsCalculated);	  Math.sqrt(denominatorDegreesOfFreedom.inverseCumAccuracy());    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
307	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  ')'  expected	84	None	replace
308	[BUG]  [BUGGY]  nhalf  *  lognxm  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  nhalf  *  lognxm  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	nhalf  *  lognxm  =  FastMath.log(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf    *    lognxm    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  ')'  expected	84	None	replace
309	[BUG]  [BUGGY]  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [CE]  variable  lognxm  is  already  defined  in  method  density(double)  [FE]        AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom);	  return    FastMath.exp(logm    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    lognxm    =    FastMath.log(numeratorDegreesOfFreedom);    	non-compiled	[CE]  variable  lognxm  is  already  defined  in  method  density(double)	33	None	replace
310	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    nhalf    =    logn.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
311	[BUG]  [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(logm  *  lognxm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(logm    *    lognxm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  -  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf);	  	non-compiled	[CE]  not  a  statement	76	None	add
312	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	add	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    nhalf    =    logn.doubleValue();    	compilable	  [FE]  AssertionError  	64	3	replace
313	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double    nhalf    =    logn.doubleValue();    	compilable	  [FE]  AssertionError  	64	3	replace
314	[BUG]  [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  mhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	mhalf  *  lognxm  -  nhalf  *  lognxm  -  beta.logBeta(nhalf,  mhalf);	  return    FastMath.exp(x    *    logn    +    nhalf    *    logx    -    lognxm    +    mhalf    *    logm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf);    	non-compiled	[CE]  not  a  statement	3	None	replace
315	[BUG]  [BUGGY]  double  nhalf  =  logm  *  Math.log(numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]            AssertionError      [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  double  nhalf  =  logm  *  Math.log(numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]      return  FastMath.exp(nhalf  *  logn  +  nhalf  *  logx  -  logx  +        mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -              Beta.logBeta(nhalf,  mhalf));  mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	double  nhalf  =  logm  *  Math.log(numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  double    nhalf    =    logm    *    Math.log(lognxm,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	51	None	replace
316	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	23	None	add
317	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	23	None	add
318	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logn  +  nhalf  *  logm  -  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logn    +    nhalf    *    logm    -    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);	  	non-compiled	[CE]  unexpected  type	23	None	add
319	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  +  denominatorDegreesOfFreedom);	  	non-compiled	[CE]  unexpected  type	44	None	add
320	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	44	None	add
321	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  +  mhalf  *  lognxm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    +    mhalf    *    lognxm    -    nhalf    *    lognxm    -    mhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm  *  lognxm);	  	non-compiled	[CE]  unexpected  type	44	None	add
322	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [CE]  unexpected  type  [FE]    AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(lognxm);	  	non-compiled	[CE]  unexpected  type	42	None	add
323	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [CE]  unexpected  type  [FE]      AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  nhalf  *  lognxm  =  FastMath.log(logn);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    nhalf  *  lognxm  =  FastMath.log(logn);	  	non-compiled	[CE]  unexpected  type	42	None	add
324	[BUG]  [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(lognxm);  [CE]  variable  nhalf  is  already  defined  in  method  density(double)  [FE]        AssertionError    [CONTEXT]      public  double  density(double  x)  {  final  double  nhalf  =  numeratorDegreesOfFreedom  /  2;  final  double  mhalf  =  denominatorDegreesOfFreedom  /  2;  final  double  logx  =  FastMath.log(x);  final  double  logn  =  FastMath.log(numeratorDegreesOfFreedom);  final  double  logm  =  FastMath.log(denominatorDegreesOfFreedom);  final  double  lognxm  =  FastMath.log(numeratorDegreesOfFreedom  *  x  +  denominatorDegreesOfFreedom);      [BUGGY]  return  FastMath.exp(x  *  logm  +  nhalf  *  lognxm  -  logm  +  nhalf  *  lognxm  -  nhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  double  nhalf  =  Math.abs(lognxm);  [BUGGY]      mhalf  *  logm  -  nhalf  *  lognxm  -  mhalf  *  lognxm  -  Beta.logBeta(nhalf,  mhalf));  }  [CLASS]  FDistribution  [METHOD]  density  [RETURN_TYPE]  double  double  x  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  mhalf  nhalf  numeratorDegreesOfFreedom  numericalVariance  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.35355339059327373	136	138	2	replace	return    FastMath.exp(x    *    logm    +    nhalf    *    lognxm    -    logm    +    nhalf    *    lognxm    -    nhalf    *    lognxm    -    Beta.logBeta(nhalf,    mhalf));    double  nhalf  =  Math.abs(lognxm);	  	non-compiled	[CE]  variable  nhalf  is  already  defined  in  method  density(double)	42	None	add
