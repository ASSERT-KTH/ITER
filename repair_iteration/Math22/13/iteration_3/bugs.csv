bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  getSupportLowerBound();  getSupportLowerBound();  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getSupportLowerBound();  getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    getSupportLowerBound();    getSupportLowerBound();	  	non-compiled	[CE]  unreachable  statement	17	None	add
2	[BUG]  [BUGGY]  return  getSupportLowerBound();  if(getSupportLowerBound()!=  null)  {  return  getSupportLowerBound();  }  [CE]  incomparable  types:  double  and  <null>  [FE]      StackOverflowError    [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getSupportLowerBound();  if(getSupportLowerBound()!=  null)  {  return  getSupportLowerBound();  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    getSupportLowerBound();    if(getSupportLowerBound()!=  null)  {  return  getSupportLowerBound();  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	17	None	add
3	[BUG]  [BUGGY]  return  getSupportLowerBound();  if(getSupportLowerBound()  ==  null)  {  return  getSupportLowerBound();  }  [CE]  incomparable  types:  double  and  <null>  [FE]        StackOverflowError    [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getSupportLowerBound();  if(getSupportLowerBound()  ==  null)  {  return  getSupportLowerBound();  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    getSupportLowerBound();    if(getSupportLowerBound()  ==  null)  {  return  getSupportLowerBound();  }	  	non-compiled	[CE]  incomparable  types:  double  and  <null>	17	None	add
4	[BUG]  [BUGGY]  n  =  getSupportLowerBound();  [CE]  cannot  find  symbol  n  [FE]        NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  n  =  getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	n  =  getSupportLowerBound();	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  cannot  find  symbol  n	28	None	replace
5	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >>  ';';  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >>  ';';  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >>  ';';	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
6	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >=  ';';  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >=  ';';  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >=  ';';	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
7	[BUG]  [BUGGY]  if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [CE]  ';'  expected  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound	  return    1;    if(numeratorDF    ==    numeratorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  expected  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  expected  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  expected	  nominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	22	None	replace
9	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  ==  ')'  expected  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  ==  ')'  expected  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  new  Double(numerator  ==  ')'  expected	  nominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	22	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDFMinusTwo.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  cannot  find  symbol  denominatorDFMinusTwo  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDFMinusTwo.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDFMinusTwo.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }	  nominatorDF    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  denominatorDFMinusTwo	23	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  +  ';'  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  +  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  +  ';'	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    >>    ';'    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  >>  ';'  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  >>  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  numeratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  >>  ';'	  for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  ';'  expected	12	None	replace
13	[BUG]  [BUGGY]  return  getNumberOfSupports();  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getNumberOfSupports();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  getNumberOfSupports();	  return    getSupportLowerBound();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
14	[BUG]  [BUGGY]  double  numeratorDF  =  getSupportLowerBound();  [CE]  missing  return  statement  [FE]            NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  double  numeratorDF  =  getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	double  numeratorDF  =  getSupportLowerBound();	  return    1;    if(numeratorDF    ==    numeratorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound();    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportL  >>  ';'  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportL  >>  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportL  >>  ';'	  if(numeratorDegreesOfFreedom    ==    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportL    	non-compiled	[CE]  ';'  expected	24	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDFMinusTwo.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [CE]  cannot  find  symbol  denominatorDFMinusTwo  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDFMinusTwo.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDFMinusTwo.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportUpperBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  denominatorDFMinusTwo	11	None	replace
17	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	21	None	replace
18	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  ==  ')'  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  ==  ')'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  ==  ')'	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	21	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  return  1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  return  1;  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  return  1;  }	  for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    >>    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  return  this.symbol1.getSupportLowerBound();  [CE]  cannot  find  symbol  symbol1  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  this.symbol1.getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.symbol1.getSupportLowerBound();	  return    this.symbol.getSupportLowerBound();    	non-compiled	[CE]  cannot  find  symbol  symbol1	5	None	replace
21	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  this.numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	add	return  this.numeratorDegreesOfFreedom;	  return    1;    if(numeratorDegreesOfFreedom    ==    1)    {    return    1;    }    	compilable	  [FE]  NumberIsTooLargeException  	15	7	replace
22	[BUG]  [BUGGY]  return  this.numeratorDegreesOfFreedom;  [FE]  NumberIsTooLargeException  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  this.numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.numeratorDegreesOfFreedom;	  return    1;    if(numeratorDegreesOfFreedom    ==    1)    {    return    1;    }    	compilable	  [FE]  NumberIsTooLargeException  	15	7	replace
23	[BUG]  [BUGGY]  this.numeratorDegreesOfFreedom  =  numeratorDegreesOfFreedom;  [CE]  cannot  assign  a  value  to  final  variable  numeratorDegreesOfFreedom  [FE]            NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  this.numeratorDegreesOfFreedom  =  numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	this.numeratorDegreesOfFreedom  =  numeratorDegreesOfFreedom;	  return    1;    if(numeratorDegreesOfFreedom    ==    1)    {    return    1;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  numeratorDegreesOfFreedom	15	None	replace
24	[BUG]  [BUGGY]  return  getSupportLowerB();  [CE]  cannot  find  symbol  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getSupportLowerB();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  getSupportLowerB();	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    return    getSupportLowerB    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
25	[BUG]  [BUGGY]  return  this.supportLowerB;  [CE]  cannot  find  symbol  supportLowerB  [FE]            NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  this.supportLowerB;  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.supportLowerB;	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    return    getSupportLowerB    	non-compiled	[CE]  cannot  find  symbol  supportLowerB	29	None	replace
26	[BUG]  [BUGGY]  return  this.supportLowerBound.getSupportLowerBound();  [CE]  cannot  find  symbol  supportLowerBound  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  this.supportLowerBound.getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.supportLowerBound.getSupportLowerBound();	  return    this.node.getSupportLowerBound();    	non-compiled	[CE]  cannot  find  symbol  supportLowerBound	7	None	replace
27	[BUG]  [BUGGY]  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'	  if(denominatorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	26	None	replace
28	[BUG]  [BUGGY]  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  expected;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  expected;  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  expected;	  if(denominatorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	26	None	replace
29	[BUG]  [BUGGY]  nullDegreesOfFreedom  =  getDestination  >>  ';'  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nullDegreesOfFreedom  =  getDestination  >>  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nullDegreesOfFreedom  =  getDestination  >>  ';'	  nominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  ';'  expected	19	None	replace
30	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  getDestination  >>  ';';  [CE]  cannot  find  symbol  nominatorDegreesOfFreedom  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nominatorDegreesOfFreedom  =  getDestination  >>  ';';  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  getDestination  >>  ';';	  nominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  cannot  find  symbol  nominatorDegreesOfFreedom	19	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  -  ';'  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  -  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  -  ';'	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    >>    ';'    	non-compiled	[CE]  ';'  expected	6	None	replace
32	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  <  <  ';'  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  <  <  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  <  <  ';'	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
33	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')';  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')';  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')';	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	21	None	replace
34	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numeratorDegreesOfFreedom  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numeratorDegreesOfFreedom  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numeratorDegreesOfFreedom  /  DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
35	[BUG]  [BUGGY]  return  0;  this.supportLowerBound  =  getSupportLowerBound();  [CE]  cannot  find  symbol  supportLowerBound  [FE]        NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  0;  this.supportLowerBound  =  getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  0;  this.supportLowerBound  =  getSupportLowerBound();	  return    1;    this.supportLowerBound    =    getSupportLowerBound();    	non-compiled	[CE]  cannot  find  symbol  supportLowerBound	14	None	replace
36	[BUG]  [BUGGY]  return  2;  this.supportLowerBound  =  getSupportLowerBound();  [CE]  cannot  find  symbol  supportLowerBound  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  2;  this.supportLowerBound  =  getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  2;  this.supportLowerBound  =  getSupportLowerBound();	  return    1;    this.supportLowerBound    =    getSupportLowerBound();    	non-compiled	[CE]  cannot  find  symbol  supportLowerBound	14	None	replace
37	[BUG]  [BUGGY]  double  null  =  getSupportLowerBound();  [CE]  not  a  statement  [FE]            NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  double  null  =  getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	double  null  =  getSupportLowerBound();	  return    1;    if(numeratorDF    ==    numeratorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound();    }    	non-compiled	[CE]  not  a  statement	4	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'	  for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	8	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  numeratorDF.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [CE]  cannot  find  symbol  numeratorDF  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  numeratorDF.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  numeratorDF.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportUpperBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  numeratorDF	11	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  this.numeratorDegrees.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [CE]  cannot  find  symbol  numeratorDegrees  [FE]                  AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  this.numeratorDegrees.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  this.numeratorDegrees.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportUpperBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  numeratorDegrees	11	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  numeratorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  cannot  find  symbol  numeratorDF  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  numeratorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  numeratorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  numeratorDF	10	None	replace
42	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupport  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupport  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupport	  if(numeratorDegreesOfFreedom    ==    DEFAULT_INVERSE_ABSOLUTE_ACCURACY)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportL    	non-compiled	[CE]  ';'  expected	24	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  -  ';'  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  -  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  -  ';'	  for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  ';'  expected	12	None	replace
44	[BUG]  [BUGGY]  return  0;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds  [CE]  ')'  expected  [FE]            NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  0;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  0;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0;    i    <    denominatorDegreesOfFreedom;    i++)    {    if(getNumberOfBounds(i)>    	non-compiled	[CE]  ')'  expected	16	None	replace
45	[BUG]  [BUGGY]  return  0;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds(i)>  [CE]  illegal  start  of  expression  [FE]              NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  0;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds(i)>  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  0;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds(i)>	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0;    i    <    denominatorDegreesOfFreedom;    i++)    {    if(getNumberOfBounds(i)>    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  this.numeratorDegrees.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  cannot  find  symbol  numeratorDegrees  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  this.numeratorDegrees.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  this.numeratorDegrees.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }	  for(int    i    =    0,    len    =    denominatorD.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  numeratorDegrees	30	None	replace
47	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  ')'	  if(denominatorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	26	None	replace
48	[BUG]  [BUGGY]  return  getDefaultSupportLowerBound();  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getDefaultSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  getDefaultSupportLowerBound();	  return    getSupportLowerBound();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
49	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'	  nominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	22	None	replace
50	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  expected;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  expected;  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  new  Double(numerator  >>  ')'  expected;	  nominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	22	None	replace
51	[BUG]  [BUGGY]  if(denominatorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(denominatorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(denominatorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator	  if(denominatorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	27	None	replace
52	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB  [CE]  ';'  expected  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    return    getSupportLowerB    	non-compiled	[CE]  ';'  expected	29	None	replace
53	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound  [CE]  ';'  expected  [FE]        NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  ';'  expected	28	None	replace
54	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  +  ')'  expected  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  +  ')'  expected  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(numerator  +  ')'  expected	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	21	None	replace
55	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB  [CE]  ';'  expected  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    return    getSupportLowerB    	non-compiled	[CE]  ';'  expected	29	None	replace
56	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination()  ==  ';'  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination()  ==  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination()  ==  ';'	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  ';'  expected	20	None	replace
57	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination()!=  ';';  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination()!=  ';';  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination()!=  ';';	  DeseratorDegreesOfFreedom    denominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
58	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  getDestination()  ==  ';'  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nominatorDegreesOfFreedom  =  getDestination()  ==  ';'  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  getDestination()  ==  ';'	  nominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  ';'  expected	19	None	replace
59	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  getDestination()!=  ';';  [CE]  cannot  find  symbol  nominatorDegreesOfFreedom  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  nominatorDegreesOfFreedom  =  getDestination()!=  ';';  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  getDestination()!=  ';';	  nominatorDegreesOfFreedom    =    getDestination    >>    ';'    	non-compiled	[CE]  cannot  find  symbol  nominatorDegreesOfFreedom	19	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  -  1;  }  [CE]  cannot  find  symbol  denominatorDF  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  -  1;  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  -  1;  }	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    >>    ';'    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	6	None	replace
61	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound  [CE]  ';'  expected  [FE]        NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    denominatorDegreesOfFreedom.length;    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  ';'  expected	28	None	replace
62	[BUG]  [BUGGY]  return  getSupportLowerBound();  return  getSupportLowerBound();  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getSupportLowerBound();  return  getSupportLowerBound();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    getSupportLowerBound();    return  getSupportLowerBound();	  	non-compiled	[CE]  unreachable  statement	17	None	add
63	[BUG]  [BUGGY]  return  getSupportLowerBound();  if(getSupportLowerBound()  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  getSupportLowerBound();  }  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  getSupportLowerBound();  if(getSupportLowerBound()  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  getSupportLowerBound();  }  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    getSupportLowerBound();    if(getSupportLowerBound()  >  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  return  getSupportLowerBound();  }	  	non-compiled	[CE]  unreachable  statement	17	None	add
64	[BUG]  [BUGGY]  double  numeratorDegrees  =  getNumberOfBounds();  [CE]  cannot  find  symbol  [FE]            NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  double  numeratorDegrees  =  getNumberOfBounds();  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	double  numeratorDegrees  =  getNumberOfBounds();	  return    1;    if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0;    i    <    denominatorDegreesOfFreedom;    i++)    {    if(getNumberOfBounds(i)>    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
65	[BUG]  [BUGGY]  if(denominatorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(denominatorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(denominatorDegreesOfFreedom!=  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator	  if(denominatorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	26	None	replace
66	[BUG]  [BUGGY]  if(numeratorDF  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [CE]  ';'  expected  [FE]          NumberIsTooLargeException      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  if(numeratorDF  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDF  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound	  return    1;    if(numeratorDF    ==    numeratorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  ';'  expected	3	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDim.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  cannot  find  symbol  denominatorDim  [FE]              AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  for(int  i  =  0,  len  =  denominatorDim.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]      return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDim.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }	  for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  denominatorDim	10	None	replace
68	[BUG]  [BUGGY]  return  this.symbol,  this.supportLowerBound;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  getSupportLowerBound()  {      [BUGGY]  return  this.symbol,  this.supportLowerBound;  [BUGGY]      }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.symbol,  this.supportLowerBound;	  return    this.symbol.getSupportLowerBound();    	non-compiled	[CE]  ';'  expected	5	None	replace
