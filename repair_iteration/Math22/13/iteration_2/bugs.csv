bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this.supportBound;  [CE]  cannot  find  symbol  supportBound  [FE]    NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  this.supportBound;  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.supportBound;	  return    1;    	non-compiled	[CE]  cannot  find  symbol  supportBound	3	None	replace
2	[BUG]  [BUGGY]  return  1;  return  1;  [CE]  unreachable  statement  [FE]    NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  return  1;  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    return  1;	  	non-compiled	[CE]  unreachable  statement	2	None	add
3	[BUG]  [BUGGY]  return  1;  if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [CE]  ';'  expected  [FE]      NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound	  	non-compiled	[CE]  ';'  expected	2	None	add
4	[BUG]  [BUGGY]  return  1;  if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound();  }  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound();  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    if(numeratorDF  ==  numeratorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound();  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
5	[BUG]  [BUGGY]  return  this.symbol.getSupportLowerBound();  [CE]  cannot  find  symbol  symbol  [FE]        AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  this.symbol.getSupportLowerBound();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.symbol.getSupportLowerBound();	  return    this.supportLowerBound;    	non-compiled	[CE]  cannot  find  symbol  symbol	1	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  >>  ';'  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  >>  ';'  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  >>  ';'	      if(numeratorDegreesOfFreedom    ==    denominatorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  ';'  expected	10	None	replace
7	[BUG]  [BUGGY]  return  this.node.getSupportLowerBound();  [CE]  cannot  find  symbol  node  [FE]            AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  this.node.getSupportLowerBound();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.node.getSupportLowerBound();	      	non-compiled	[CE]  cannot  find  symbol  node	4	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	9	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  return  0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  return  0;  }  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  >>  return  0;  }	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  cannot  find  symbol  denominatorDF  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }	      if(numeratorDegreesOfFreedom    ==    denominatorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	11	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [CE]  cannot  find  symbol  denominatorDF  [FE]            AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportUpperBound(i);  }	      if(numeratorDegreesOfFreedom    ==    denominatorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  denominatorDF	11	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  >>  ';'  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  >>  ';'  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  >>  ';'	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    getDestination    	non-compiled	[CE]  ';'  expected	8	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination!=  ';'  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination!=  ';'  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination!=  ';'	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    getDestination    	non-compiled	[CE]  ';'  expected	8	None	replace
14	[BUG]  [BUGGY]  return  1;  this.supportLowerBound  =  getSupportLowerBound();  [CE]  cannot  find  symbol  supportLowerBound  [FE]    NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  this.supportLowerBound  =  getSupportLowerBound();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    this.supportLowerBound  =  getSupportLowerBound();	  	non-compiled	[CE]  cannot  find  symbol  supportLowerBound	2	None	add
15	[BUG]  [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  1)  {  return  1;  }  [CE]  unreachable  statement  [FE]      NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  1)  {  return  1;  }  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    if(numeratorDegreesOfFreedom  ==  1)  {  return  1;  }	  	non-compiled	[CE]  unreachable  statement	2	None	add
16	[BUG]  [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds(i)>  [CE]  illegal  start  of  expression  [FE]        NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds(i)>  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0;  i  <  denominatorDegreesOfFreedom;  i++)  {  if(getNumberOfBounds(i)>	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
17	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  getSupportLowerBound();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	add	return  getSupportLowerBound();	      	compilable	  [FE]  StackOverflowError  	4	8	replace
18	[BUG]  [BUGGY]  return  getSupportLowerBound();  [FE]  StackOverflowError  [FE]            AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  getSupportLowerBound();  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  getSupportLowerBound();	      	compilable	  [FE]  StackOverflowError  	4	8	replace
19	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  getDestination  >>  ';'  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  nominatorDegreesOfFreedom  =  getDestination  >>  ';'  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  getDestination  >>  ';'	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    getDestination    	non-compiled	[CE]  ';'  expected	8	None	replace
20	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >>  ';'  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >>  ';'  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  getDestination  >>  ';'	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    getDestination    	non-compiled	[CE]  ';'  expected	8	None	replace
21	[BUG]  [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	DeseratorDegreesOfFreedom  denominatorDegreesOfFreedom  =  new  Double(denominator	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	9	None	replace
22	[BUG]  [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  nominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDegreesOfFreedom  =  new  Double(denominator	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	9	None	replace
23	[BUG]  [BUGGY]  nominatorDF  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  nominatorDF  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	nominatorDF  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }	      if(numeratorDegreesOfFreedom    ==    denominatorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
24	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportL  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportL  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportL	      if(numeratorDegreesOfFreedom    ==    denominatorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLo  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLo  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(numeratorDegreesOfFreedom  ==  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLo	      if(numeratorDegreesOfFreedom    ==    denominatorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  if(denominatorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  if(denominatorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(denominatorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	9	None	replace
27	[BUG]  [BUGGY]  if(denominatorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  if(denominatorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	if(denominatorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator	      if(numeratorDegreesOfFreedom    ==    null)    {    for(int    i    =    0,    len    =    deseratorDegreesOfFreedom.length;    i    <    len;    ++i)    {    denominatorDegreesOfFreedom    =    new    Double(denominator    	non-compiled	[CE]  ')'  expected	9	None	replace
28	[BUG]  [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound  [CE]  ';'  expected  [FE]    NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerBound	  	non-compiled	[CE]  ';'  expected	2	None	add
29	[BUG]  [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB  [CE]  ';'  expected  [FE]      NumberIsTooLargeException    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  return  1;  if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB  [BUGGY]    }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return    1;    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  denominatorDegreesOfFreedom.length;  i  <  len;  ++i)  {  return  getSupportLowerB	  	non-compiled	[CE]  ';'  expected	2	None	add
30	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  denominatorD.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  cannot  find  symbol  denominatorD  [FE]          AssertionError    [CONTEXT]    public  double  getSupportLowerBound()  {    [BUGGY]  for(int  i  =  0,  len  =  denominatorD.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]    return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	for(int  i  =  0,  len  =  denominatorD.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }	      if(numeratorDegreesOfFreedom    ==    denominatorDF)    {    for(int    i    =    0,    len    =    denominatorDF.length();    i    <    len;    ++i)    {    return    getSupportLowerBound(i);    }    	non-compiled	[CE]  cannot  find  symbol  denominatorD	11	None	replace
