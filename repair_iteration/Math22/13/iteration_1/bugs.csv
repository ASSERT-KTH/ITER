bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this.supportLowerBound;  [CE]  cannot  find  symbol  supportLowerBound  [FE]    AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]  return  this.supportLowerBound;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  this.supportLowerBound;	return  0;  	non-compiled	[CE]  cannot  find  symbol  supportLowerBound	25	None	replace
2	[BUG]  [BUGGY]  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]  return  1;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	add	return  1;	return  0;  	compilable	  [FE]  NumberIsTooLargeException  	25	7	replace
3	[BUG]  [BUGGY]  return  1;  [FE]  NumberIsTooLargeException  [FE]      AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]  return  1;  [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	return  1;	return  0;  	compilable	  [FE]  NumberIsTooLargeException  	25	7	replace
4	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]        AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    [BUGGY]  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	  	return  0;  	non-compiled	[CE]  missing  return  statement	25	None	replace
5	[BUG]  [BUGGY]    this.supportLowerBound  =  getSupportLowerBound();  [CE]  cannot  find  symbol  supportLowerBound  [FE]    AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    this.supportLowerBound  =  getSupportLowerBound();  [BUGGY]  return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	    this.supportLowerBound  =  getSupportLowerBound();		non-compiled	[CE]  cannot  find  symbol  supportLowerBound	26	None	add
6	[BUG]  [BUGGY]    this.supportLowerBound  =  getBase().getSupportLowerBound();  [CE]  cannot  find  symbol  supportLowerBound  [FE]      AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    this.supportLowerBound  =  getBase().getSupportLowerBound();  [BUGGY]  return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	    this.supportLowerBound  =  getBase().getSupportLowerBound();		non-compiled	[CE]  cannot  find  symbol  supportLowerBound	26	None	add
7	[BUG]  [BUGGY]    this.supportLowerBound  =  getBase().getSupportLowerBound();  return  this.supportLowerBound;  [CE]  cannot  find  symbol  supportLowerBound  [FE]        AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    this.supportLowerBound  =  getBase().getSupportLowerBound();  return  this.supportLowerBound;  [BUGGY]  return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	    this.supportLowerBound  =  getBase().getSupportLowerBound();  return  this.supportLowerBound;		non-compiled	[CE]  cannot  find  symbol  supportLowerBound	26	None	add
8	[BUG]  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination  [BUGGY]  return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  getDestination		non-compiled	[CE]  ';'  expected	26	None	add
9	[BUG]  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator  [BUGGY]  return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	    if(numeratorDegreesOfFreedom  ==  null)  {  for(int  i  =  0,  len  =  deseratorDegreesOfFreedom.length;  i  <  len;  ++i)  {  denominatorDegreesOfFreedom  =  new  Double(denominator		non-compiled	[CE]  ')'  expected	26	None	add
10	[BUG]  [BUGGY]    if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound  [BUGGY]  return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	    if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound		non-compiled	[CE]  ';'  expected	26	None	add
11	[BUG]  [BUGGY]    if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  double  getSupportLowerBound()  {  [BUGGY]    if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }  [BUGGY]  return  0;  }  [CLASS]  FDistribution  [METHOD]  getSupportLowerBound  [RETURN_TYPE]  double  [VARIABLES]  boolean  numericalVarianceIsCalculated  double  DEFAULT_INVERSE_ABSOLUTE_ACCURACY  denomDFMinusTwo  denominatorDF  denominatorDegreesOfFreedom  inverseCumAccuracy  logm  logn  lognxm  logx  m  mhalf  n  nhalf  numeratorDF  numeratorDegreesOfFreedom  numericalVariance  ret  solverAbsoluteAccuracy  x  long  serialVersionUID  	projects/Math22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java	0.2672612419124244	258	258	2	replace	    if(numeratorDegreesOfFreedom  ==  denominatorDF)  {  for(int  i  =  0,  len  =  denominatorDF.length();  i  <  len;  ++i)  {  return  getSupportLowerBound(i);  }		non-compiled	[CE]  illegal  start  of  expression	26	None	add
