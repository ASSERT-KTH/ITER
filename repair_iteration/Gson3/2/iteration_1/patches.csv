bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>  [CE]  '('  or  '['  expected  [FE]        ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
2	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  ')'  expected  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  ')'  expected	11	None	replace
3	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [CE]  ')'  expected  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  if(rawType  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(rawType  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(rawType  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  return  new  TreeMap  <  Object,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  TreeMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  TreeMap  <  Object,  Object>()  {	  return    new    ParameterizedMap    <    Object,    Object>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	10	None	replace
6	[BUG]  [BUGGY]  return  new  SortedHashMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  SortedHashMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  SortedHashMap  <  Object,  Object>()  {	  return    new    ParameterizedMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
7	[BUG]  [BUGGY]  return  new  ParameterizedMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  ParameterizedMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  ParameterizedMap  <  Object,  Object>();	  return    new    ParameterizedMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  return  new  SortedMap  <  Object,  Object>()  {  [CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$10>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap  [FE]                      ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  SortedMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  SortedMap  <  Object,  Object>()  {	  return    new    ParameterizedMap    <    Object,    Object>()    {    	non-compiled	[CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$10>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap	10	None	replace
9	[BUG]  [BUGGY]  return(T)new  TreeMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  TreeMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  TreeMap  <  Object,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  return(T)new  LinkedTreeMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  LinkedTreeMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  LinkedTreeMap  <  Object,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
11	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
14	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  else  if(type  instanceof  ParameterizedType  &&  type.getActualTypeArguments().length  >  0)  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  else  if(type  instanceof  ParameterizedType  &&  type.getActualTypeArguments().length  >  0)  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  else  if(type  instanceof  ParameterizedType  &&  type.getActualTypeArguments().length  >  0)  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  if(rawType  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(rawType  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(rawType  instanceof  ParameterizedType)  {  return(T)new  LinkedHashMap  <  Object,  Object>();  }	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  return  new  Constructor  <  T>()  {  [CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  Constructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  Constructor  <  T>()  {	  return    new    ArrayConstructor    <    T>()    {    	non-compiled	[CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;	7	None	replace
17	[BUG]  [BUGGY]  return  new  LinkedHashMap  <  T>()  {  [CE]  wrong  number  of  type  arguments;  required  2  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedHashMap  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedHashMap  <  T>()  {	  return    new    ArrayConstructor    <    T>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	7	None	replace
18	[BUG]  [BUGGY]  return  new  ClassConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  ClassConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  ClassConstructor  <  T>()  {	  return    new    ArrayConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  ||  type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  ||  type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	||  type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  if(type  instanceof  CharacterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  CharacterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  CharacterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [CE]  '('  or  '['  expected  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  '('  or  '['  expected	2	None	replace
22	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [1]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [1]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [1]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
23	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  }  [CE]  ')'  expected  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  }	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    }    	non-compiled	[CE]  ')'  expected	12	None	replace
24	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>()  {  }  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>()  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>()  {  }	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    }    	non-compiled	[CE]  ';'  expected	12	None	replace
25	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
28	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor  <  T>();  }  [CE]  illegal  start  of  expression  [FE]                      ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor  <  T>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor  <  T>();  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
29	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " "));  }  [CE]  illegal  start  of  expression  [FE]                        ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " "));  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  return(T)new  LinkedTreeMap  <  Object,  Object>()  {  [CE]  cannot  inherit  from  final  LinkedTreeMap  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  LinkedTreeMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  LinkedTreeMap  <  Object,  Object>()  {	  return    new    LinkedTreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  inherit  from  final  LinkedTreeMap	9	None	replace
31	[BUG]  [BUGGY]  return  new  ArrayHashMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  ArrayHashMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  ArrayHashMap  <  Object,  Object>()  {	  return    new    LinkedTreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
32	[BUG]  [BUGGY]  return  new  ArrayList  <  Object,  Object>()  {  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  ArrayList  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  ArrayList  <  Object,  Object>()  {	  return    new    LinkedTreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	9	None	replace
33	[BUG]  [BUGGY]  return  new  LinkedTreeMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedTreeMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedTreeMap  <  Object,  Object>();	  return    new    LinkedTreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	9	None	replace
34	[BUG]  [BUGGY]  if(type  instanceof  CharacterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>  [CE]  '('  or  '['  expected  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  CharacterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  CharacterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
35	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  DefaultImplementationConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  DefaultImplementationConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  DefaultImplementationConstructor  <  T>()  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  DefaultImplementationConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  DefaultImplementationConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  DefaultImplementationConstructor  <  T>()  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
37	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  DefaultImplementationConstructor  <  T>()  {  }  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  DefaultImplementationConstructor  <  T>()  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  DefaultImplementationConstructor  <  T>()  {  }	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	8	None	replace
38	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  DefaultImplementationConstructor  <  T>()  {  }  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  DefaultImplementationConstructor  <  T>()  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  DefaultImplementationConstructor  <  T>()  {  }	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  if(rawType  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(rawType  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(rawType  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  if(rawType  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [CE]  '('  or  '['  expected  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(rawType  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(rawType  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&    rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
41	[BUG]  [BUGGY]  if(rawType  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(rawType  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(rawType  instanceof  ParameterizedType  &&  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [CE]  '('  or  '['  expected  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&    rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
43	[BUG]  [BUGGY]  ||  type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [CE]  illegal  start  of  expression  [FE]                      ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  ||  type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	||  type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>	  if(type    instanceof    ParameterizedType    &&    rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  return  new  LinkedHashMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedHashMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedHashMap  <  Object,  Object>();	  return    new    LinkedHashMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	1	None	replace
45	[BUG]  [BUGGY]  return(T)new  LinkedHashMap  <  Object,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  LinkedHashMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  LinkedHashMap  <  Object,  Object>()  {	  return    new    LinkedHashMap    <    Object,    Object>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	1	None	replace
46	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [1]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [1]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [1]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    rawType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  return(T)new  ArrayList  <  Object,  Object>();  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  ArrayList  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  ArrayList  <  Object,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  return(T)new  LinkedTreeMap  <  String,  Object>();  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  LinkedTreeMap  <  String,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  LinkedTreeMap  <  String,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
49	[BUG]  [BUGGY]  return(T)create  LinkedHashMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)create  LinkedHashMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)create  LinkedHashMap  <  Object,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
50	[BUG]  [BUGGY]  return(T)new  ArrayHashMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  ArrayHashMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  ArrayHashMap  <  Object,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
51	[BUG]  [BUGGY]  return  new  LocalizedMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LocalizedMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LocalizedMap  <  Object,  Object>()  {	  return    new    ParameterizedMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
52	[BUG]  [BUGGY]  return(T)new  DefaultImplementationConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  DefaultImplementationConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  DefaultImplementationConstructor  <  T>()  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
53	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(rawType)  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(rawType)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  DefaultImplementationConstructor  <  T>(rawType)  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
54	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>();  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  DefaultImplementationConstructor  <  T>();	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  Return  new  DefaultImplementationConstructor  <  T>()  {  [CE]  not  a  statement  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  Return  new  DefaultImplementationConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	Return  new  DefaultImplementationConstructor  <  T>()  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  not  a  statement	8	None	replace
56	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(type)  {  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(type)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  DefaultImplementationConstructor  <  T>(type)  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
57	[BUG]  [BUGGY]  return  new  LinkedListConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedListConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedListConstructor  <  T>()  {	  return    new    ArrayConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
58	[BUG]  [BUGGY]  return  new  LinkedTreeMap  <  T>()  {  [CE]  wrong  number  of  type  arguments;  required  2  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedTreeMap  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedTreeMap  <  T>()  {	  return    new    ArrayConstructor    <    T>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	7	None	replace
59	[BUG]  [BUGGY]  if(type  instanceof  Class  <?>  &&  type.isAssignableFrom(TypeToken.get(((Class  <?>)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  Class  <?>  &&  type.isAssignableFrom(TypeToken.get(((Class  <?>)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  Class  <?>  &&  type.isAssignableFrom(TypeToken.get(((Class  <?>)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
60	[BUG]  [BUGGY]  return  new  LinkedHashMap  <  String,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedHashMap  <  String,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedHashMap  <  String,  Object>()  {	  return    new    LinkedTreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	9	None	replace
61	[BUG]  [BUGGY]  return  new  HashMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  HashMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  HashMap  <  Object,  Object>()  {	  return    new    LinkedTreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
62	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  [CE]  <identifier>  expected  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType  [CE]  ')'  expected  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType	      	non-compiled	[CE]  ')'  expected	5	None	replace
64	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()  [CE]  ')'  expected  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type  instanceof  ParameterizedType)  {  if(!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()	      	non-compiled	[CE]  ')'  expected	5	None	replace
65	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  LinkedHashMap  <  Object,  Object>();  }  [CE]  illegal  start  of  expression  [FE]                      ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  LinkedHashMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  LinkedHashMap  <  Object,  Object>();  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  ObjectConstructor  <  T>();  }  [CE]  illegal  start  of  expression  [FE]                        ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  ObjectConstructor  <  T>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  ObjectConstructor  <  T>();  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  if(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [CE]  illegal  start  of  expression  [FE]                            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  if(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))  {  if(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)type).getActualTypeArguments()	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  ==  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  ==  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  DefaultImplementationConstructor  <  T>()  ==	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(type);  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(type);  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  DefaultImplementationConstructor  <  T>(type);	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  if(rawType  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(rawType  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(rawType  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType())))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
72	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  ||  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  ||  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  ||  type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  elementType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  elementType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  elementType.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.equals(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&  type.equals(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&  type.equals(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {	  if(type    instanceof    ParameterizedType    &&    type.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  ||(type  instanceof  ParameterizedType  &&!String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  }  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  ||(type  instanceof  ParameterizedType  &&!String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	||(type  instanceof  ParameterizedType  &&!String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  ObjectConstructor  <  T>()  {  }	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
76	[BUG]  [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  <  return  new  ObjectConstructor  <  T>()  {  }  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  <  return  new  ObjectConstructor  <  T>()  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(type  instanceof  ParameterizedType  &&!(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()  [0]).getRawType()))  <  return  new  ObjectConstructor  <  T>()  {  }	  if(type    instanceof    ParameterizedType    &&!(String.class.isAssignableFrom(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType()))    {    return    new    ObjectConstructor    <    T>()    {    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
77	[BUG]  [BUGGY]  if(!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  LinkedHashMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  LinkedHashMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  LinkedHashMap  <  Object,  Object>();  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
78	[BUG]  [BUGGY]  if(!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  if(!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	if(!(String.class.isAssignableFrom(TypeToken.get(((ParameterizedType)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	5	None	replace
79	[BUG]  [BUGGY]  ((  ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  LinkedHashMap  <  Object,  Object>();  }  [CE]  not  a  statement  [FE]                    ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  ((  ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  LinkedHashMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	((  ParameterizedType)type).getActualTypeArguments()  [0]).getRawType()))  {  return  new  LinkedHashMap  <  Object,  Object>();  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
80	[BUG]  [BUGGY]  return(T)new  LinkedHashMap  <  String,  Object>();  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  LinkedHashMap  <  String,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  LinkedHashMap  <  String,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
81	[BUG]  [BUGGY]  return(T)new  LinkedList  <  Object,  Object>();  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  LinkedList  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  LinkedList  <  Object,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
82	[BUG]  [BUGGY]  return(T)new  List  <  Object,  Object>();  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return(T)new  List  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return(T)new  List  <  Object,  Object>();	  return(T)new    LinkedHashMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	6	None	replace
83	[BUG]  [BUGGY]  return  new  LinkedHashMap  <  T,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]          ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedHashMap  <  T,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedHashMap  <  T,  Object>()  {	  return    new    ArrayConstructor    <    T>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	7	None	replace
84	[BUG]  [BUGGY]  return  new  LinkedHashMap  <  Class  <?>()  {  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]    if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {    [BUGGY]  return  new  LinkedHashMap  <  Class  <?>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  };  }  else  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedTreeMap<String,  Object>();  }  };  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.25	183	183	2	replace	return  new  LinkedHashMap  <  Class  <?>()  {	  return    new    ArrayConstructor    <    T>()    {    	non-compiled	[CE]  >  expected	7	None	replace
