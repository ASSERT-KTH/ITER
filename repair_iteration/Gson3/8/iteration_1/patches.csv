bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(type))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	22	None	replace
2	[BUG]  [BUGGY]  if(type.isAssignableFrom(type)||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(type)||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(type)||  SortedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
3	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)&&  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)&&  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)&&  SortedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	22	None	replace
4	[BUG]  [BUGGY]  if(SortedSet.class.isAssignableFrom(type)||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(SortedSet.class.isAssignableFrom(type)||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(SortedSet.class.isAssignableFrom(type)||  SortedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	22	None	replace
5	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  TypedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]                    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  TypedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)||  TypedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	22	None	replace
6	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  Class.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]                      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  Class.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)||  Class.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	22	None	replace
7	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(type))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	12	None	replace
8	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(type)||  Type.class.isAssignableFrom(rawType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(type)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(type)||  Type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	12	None	replace
9	[BUG]  [BUGGY]  if(type.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
10	[BUG]  [BUGGY]  if(type.isAssignableFrom(rawType)||  type.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(rawType)||  type.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(rawType)||  type.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
11	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	12	2	replace
12	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	12	2	replace
13	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isAssignableFrom(Type.class)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType.isAssignableFrom(Type.class)||  Type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	12	2	replace
14	[BUG]  [BUGGY]  if(rawType.isAssignableFrom(Type.class)||  Type.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isAssignableFrom(Type.class)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isAssignableFrom(Type.class)||  Type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	12	2	replace
15	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
16	[BUG]  [BUGGY]  if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
17	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	18	replace
18	[BUG]  [BUGGY]  if(rawType!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	18	replace
19	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	18	replace
20	[BUG]  [BUGGY]  if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	18	replace
21	[BUG]  [BUGGY]  if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(type))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	16	None	replace
22	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(Type.class.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
23	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
24	[BUG]  [BUGGY]  if(type  ==  null  ||  sortedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  sortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  sortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
25	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(type))  {	  if(TypeUtils.isAssignableFrom(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	21	None	replace
26	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	21	None	replace
27	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  TypeUtils.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  TypeUtils.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)||  TypeUtils.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	21	None	replace
28	[BUG]  [BUGGY]  if(type.isAssignableFrom(type)||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(type)||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(type)||  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
29	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)&&  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)&&  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)&&  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	21	None	replace
30	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
31	[BUG]  [BUGGY]  if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
32	[BUG]  [BUGGY]  if(rawType  ==  null  ||  Collection.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  Collection.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType  ==  null  ||  Collection.class.isAssignableFrom(type))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	5	None	replace
33	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType!=  null  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	5	18	replace
34	[BUG]  [BUGGY]  if(rawType!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType!=  null  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	5	18	replace
35	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  rawType.isAssignableFrom(Collection.class))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type  ==  null  ||  rawType.isAssignableFrom(Collection.class))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
36	[BUG]  [BUGGY]  if(type  ==  null  ||  rawType.isAssignableFrom(Collection.class))  {  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  rawType.isAssignableFrom(Collection.class))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  rawType.isAssignableFrom(Collection.class))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
37	[BUG]  [BUGGY]  if(type  ==  null  ||  type.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  type.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  type.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
38	[BUG]  [BUGGY]  if(rawType!=  null  ||  Collection.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  Collection.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType!=  null  ||  Collection.class.isAssignableFrom(type))  {	  if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	7	None	replace
39	[BUG]  [BUGGY]  if(type.isAssignmentOp(type)||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignmentOp(type)||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignmentOp(type)||  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
40	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(rawType)||  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	14	None	replace
41	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(type)&&  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(type)&&  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(type)&&  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	14	None	replace
42	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  Collection.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  Collection.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(rawType)||  Collection.class.isAssignableFrom(type))  {	  if(TypeUtil.isAssignmentOp(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	14	None	replace
43	[BUG]  [BUGGY]  if(type.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
44	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
45	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
46	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Type.Class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Type.Class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Type.Class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
47	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
48	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  If(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  If(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    If(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	18	None	add
49	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Sort.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Sort.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Sort.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
50	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  Type  type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  Type  type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    Type  type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	18	None	add
51	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  type.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  type.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  type.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
52	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(type))  {	  if(Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	2	None	replace
53	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isAssignableFrom(Type.class))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType.isAssignableFrom(Type.class))  {	  if(Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	2	2	replace
54	[BUG]  [BUGGY]  if(rawType.isAssignableFrom(Type.class))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isAssignableFrom(Type.class))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isAssignableFrom(Type.class))  {	  if(Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	2	2	replace
55	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  type.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||  type.isPrimitive())  {	  if(Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
56	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  type.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  type.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||  type.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
57	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(type))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	20	None	replace
58	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||  Collection.class.isAssignableFrom(type))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	20	None	replace
59	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
60	[BUG]  [BUGGY]  if(elementType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  elementType  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(elementType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(elementType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  elementType	20	None	replace
61	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  collection.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
62	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(Type.class.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	20	2	replace
63	[BUG]  [BUGGY]  if(Type.class.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	20	2	replace
64	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  type.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  type.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()  ||  type.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
65	[BUG]  [BUGGY]  if(Type.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
66	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  elementType.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  elementType  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  elementType.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()  ||  elementType.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  elementType	9	None	replace
67	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isArray()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType.isArray()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
68	[BUG]  [BUGGY]  if(rawType.isArray()  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isArray()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isArray()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
69	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
70	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()  ||  rawType.isAssignableFrom(Collection.class))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
71	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
72	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
73	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  >=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  >=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type  >=  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
74	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type!=  null  ||  collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
75	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  If(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  If(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    If(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
76	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.Class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.Class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type!=  null  ||  Collection.Class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
77	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  Type  type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  Type  type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    Type  type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
78	[BUG]  [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.class.equals(rawType))  {  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.class.equals(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type!=  null  ||  Collection.class.equals(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
79	[BUG]  [BUGGY]  Class  <?  super  T>  rawType  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  Class  <?  super  T>  rawType  =  type.getRawClass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	Class  <?  super  T>  rawType  =  type.getRawClass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  final  Class  <?  super  T>  rawType  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  final  Class  <?  super  T>  rawType  =  type.getRawClass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	final  Class  <?  super  T>  rawType  =  type.getRawClass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
81	[BUG]  [BUGGY]  final  Type  <?  super  T>  rawType  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  final  Type  <?  super  T>  rawType  =  type.getRawClass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	final  Type  <?  super  T>  rawType  =  type.getRawClass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
82	[BUG]  [BUGGY]  Class  <?  super  T>  rawType  =  elementType.getRawClass();  [CE]  illegal  start  of  type  [FE]                            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  Class  <?  super  T>  rawType  =  elementType.getRawClass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	Class  <?  super  T>  rawType  =  elementType.getRawClass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
83	[BUG]  [BUGGY]  Class  <?  super  T>  rawType  =  type.getSuperClass();  [CE]  illegal  start  of  type  [FE]                              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  Class  <?  super  T>  rawType  =  type.getSuperClass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	Class  <?  super  T>  rawType  =  type.getSuperClass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  Type  elementType  =  type.getElementType();  [CE]  illegal  start  of  type  [FE]                                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  Type  elementType  =  type.getElementType();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	Type  elementType  =  type.getElementType();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
85	[BUG]  [BUGGY]  final  Class  <?  super  T>  rawType  =  type.getSuperClass();  [CE]  illegal  start  of  type  [FE]                                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  final  Class  <?  super  T>  rawType  =  type.getSuperClass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	final  Class  <?  super  T>  rawType  =  type.getSuperClass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
86	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
87	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.Class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.Class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType))    {    if(Type.Class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
88	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  If(Type.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  If(Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType))    {    If(Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
89	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.class.equals(rawType))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.class.equals(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType))    {    if(Type.class.equals(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
90	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignedFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignedFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignedFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
91	[BUG]  [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
92	[BUG]  [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    if(type!=  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
93	[BUG]  [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  SortedSet.Class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  SortedSet.Class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  SortedSet.Class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
94	[BUG]  [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  If(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  If(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    If(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	15	None	add
95	[BUG]  [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    if(rawType  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
96	[BUG]  [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  sortedSet.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  sortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  sortedSet.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
97	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
98	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type!=  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
99	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
100	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
101	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  If(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  If(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    If(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
102	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.Class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.Class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Collection.Class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
103	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  Type  type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  Type  type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    Type  type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
104	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.class.equals(rawType))  {  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Collection.class.equals(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Collection.class.equals(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
105	[BUG]  [BUGGY]  if(rawType.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isAssignableFrom(type))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	3	None	replace
106	[BUG]  [BUGGY]  if(type.isAssignableFrom(rawType)||  elementType.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(rawType)||  elementType.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(rawType)||  elementType.isAssignableFrom(rawType))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
107	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(EnumSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(EnumSet.class.isAssignableFrom(rawType))  {	  if(type.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	3	2	replace
108	[BUG]  [BUGGY]  if(EnumSet.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(EnumSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(EnumSet.class.isAssignableFrom(rawType))  {	  if(type.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	3	2	replace
109	[BUG]  [BUGGY]  if(elementType.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  elementType  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(elementType.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(elementType.isAssignableFrom(rawType))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  elementType	3	None	replace
110	[BUG]  [BUGGY]  if(type.isAssignableFrom(rawType)||  rawType.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(rawType)||  rawType.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(rawType)||  rawType.isAssignableFrom(type))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
111	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(type)&&  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(type)&&  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(type)&&  SortedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	17	None	replace
112	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  SortedSet.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  SortedSet.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(rawType)||  SortedSet.class.isAssignableFrom(type))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	17	None	replace
113	[BUG]  [BUGGY]  if(type.isAssignmentOp(type)||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignmentOp(type)||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignmentOp(type)||  SortedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
114	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(rawType)||  SortedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	17	None	replace
115	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  TypedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]                    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  TypedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(type)||  TypedSet.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	17	None	replace
116	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  Class.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]                      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  Class.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(type)||  Class.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	17	None	replace
117	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()  ||  type.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
118	[BUG]  [BUGGY]  if(elementType.isPrimitive()  ||  rawType.isPrimitive())  {  [CE]  cannot  find  symbol  elementType  [FE]                    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(elementType.isPrimitive()  ||  rawType.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(elementType.isPrimitive()  ||  rawType.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  elementType	10	None	replace
119	[BUG]  [BUGGY]  if(resultType.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  resultType  [FE]                      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(resultType.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(resultType.isPrimitive()  ||  type.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  resultType	10	None	replace
120	[BUG]  [BUGGY]  if(rafType.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  rafType  [FE]                        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rafType.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rafType.isPrimitive()  ||  type.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  rafType	10	None	replace
121	[BUG]  [BUGGY]  if(relativeType.isPrimitive()  ||  rawType.isPrimitive())  {  [CE]  cannot  find  symbol  relativeType  [FE]                          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(relativeType.isPrimitive()  ||  rawType.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(relativeType.isPrimitive()  ||  rawType.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  relativeType	10	None	replace
122	[BUG]  [BUGGY]  if(primeType.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  primeType  [FE]                            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(primeType.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(primeType.isPrimitive()  ||  type.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  primeType	10	None	replace
123	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
124	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.Class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.Class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    if(Type.Class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
125	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)||  Type.Class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)||  Type.Class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignableFrom(rawType)||  Type.Class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
126	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)||  type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)||  type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignableFrom(rawType)||  type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
127	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignedFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignedFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignedFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
128	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)&|  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)&|  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignableFrom(rawType)&|  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
129	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  If(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  If(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    If(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
130	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType  ==  null  ||  Type.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	19	2	replace
131	[BUG]  [BUGGY]  if(rawType  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType  ==  null  ||  Type.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	19	2	replace
132	[BUG]  [BUGGY]  if(rawType  ==  null  ||  Type.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  Type.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType  ==  null  ||  Type.class.isAssignableFrom(type))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	19	None	replace
133	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType!=  null  ||  Type.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	19	18	replace
134	[BUG]  [BUGGY]  if(rawType!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType!=  null  ||  Type.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	19	18	replace
135	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	19	18	replace
136	[BUG]  [BUGGY]  if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=  null  ||  Type.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	19	18	replace
137	[BUG]  [BUGGY]  if(type!=  null  ||  type.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  type.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=  null  ||  type.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
138	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
139	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  collection.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType.isPrimitive()  ||  collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
140	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.Class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.Class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType.isPrimitive()  ||  Collection.Class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
141	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  If(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  If(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    If(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	8	None	add
142	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.class.equals(rawType))  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.class.equals(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType.isPrimitive()  ||  Collection.class.equals(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
143	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  List.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  List.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType.isPrimitive()  ||  List.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
144	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Set.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]                ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Set.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType.isPrimitive()  ||  Set.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
145	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(Type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(Type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(Type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
146	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  TreeSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  TreeSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(type)||  TreeSet.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	17	None	replace
147	[BUG]  [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  SortedMap.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignmentOp(type)||  SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignmentOp(type)||  SortedMap.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	17	None	replace
148	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
149	[BUG]  [BUGGY]  if(rawType  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
150	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(rawType!=  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	18	replace
151	[BUG]  [BUGGY]  if(rawType!=  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType!=  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	18	replace
152	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
153	[BUG]  [BUGGY]  if(type  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	9	2	replace
154	[BUG]  [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  Type  type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  Type  type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    Type  type  ==  null  ||  SortedSet.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	15	None	add
155	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  rawType  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type  ==  rawType  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
156	[BUG]  [BUGGY]  if(type  ==  rawType  ||  SortedSet.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  rawType  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  rawType  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
157	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  TreeSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type  ==  null  ||  TreeSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
158	[BUG]  [BUGGY]  if(type  ==  null  ||  TreeSet.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  TreeSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  TreeSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	16	2	replace
159	[BUG]  [BUGGY]  if(type  ==  null  ||  elementType.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  elementType  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  elementType.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  elementType.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  elementType	19	None	replace
160	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  Collections.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  Collections.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  Collections.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
161	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(type)||  Collection.class.isAssignableFrom(rawType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(type)||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(type)||  Collection.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	20	None	replace
162	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  CollectionSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  CollectionSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  CollectionSet.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
163	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  Collection.class.equals(rawType))  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  Collection.class.equals(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  Collection.class.equals(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
164	[BUG]  [BUGGY]  if(type  ==  null  ||  type.isPrimitive()  ||  rawType.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  type.isPrimitive()  ||  rawType.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  type.isPrimitive()  ||  rawType.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
165	[BUG]  [BUGGY]  if(type!=  null  ||  type.isPrimitive()  ||  rawType.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  ||  type.isPrimitive()  ||  rawType.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=  null  ||  type.isPrimitive()  ||  rawType.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
166	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  TreeSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  TreeSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)||  TreeSet.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	22	None	replace
167	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  SortedMap.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]              ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)||  SortedMap.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	22	None	replace
168	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  Type.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType))  {  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType))    {    Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
169	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  &&  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type!=  null  &&  Collection.class.isAssignableFrom(rawType))  {	  if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
170	[BUG]  [BUGGY]  if(type!=  null  &&  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type!=  null  &&  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type!=  null  &&  Collection.class.isAssignableFrom(rawType))  {	  if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
171	[BUG]  [BUGGY]  if(TypeUtil.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isAssignableFrom(type))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	3	None	replace
172	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	3	None	replace
173	[BUG]  [BUGGY]  Class  <?  super  T>  rawType  =  type.getSuperclass();  [CE]  illegal  start  of  type  [FE]                      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  Class  <?  super  T>  rawType  =  type.getSuperclass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	Class  <?  super  T>  rawType  =  type.getSuperclass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
174	[BUG]  [BUGGY]  final  Class  <?  super  T>  rawType  =  type.getSuperclass();  [CE]  illegal  start  of  type  [FE]                        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  final  Class  <?  super  T>  rawType  =  type.getSuperclass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	final  Class  <?  super  T>  rawType  =  type.getSuperclass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
175	[BUG]  [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  List.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtils  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtils.isAssignableFrom(type)||  List.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtils.isAssignableFrom(type)||  List.class.isAssignableFrom(rawType))  {	  if(TypeUtils.isAssignableFrom(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	21	None	replace
176	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  type.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||  type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
177	[BUG]  [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Type.class.equals(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Type.class.isAssignableFrom(rawType))  {  if(type  ==  null  ||  Type.class.equals(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    if(type  ==  null  ||  Type.class.equals(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
178	[BUG]  [BUGGY]  if(type  ==  elementType  ||  SortedSet.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  elementType  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  elementType  ||  SortedSet.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  elementType  ||  SortedSet.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    SortedSet.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  elementType	16	None	replace
179	[BUG]  [BUGGY]  if(type.isAssignableFrom(rawType)&&  rawType.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(rawType)&&  rawType.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(rawType)&&  rawType.isAssignableFrom(type))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
180	[BUG]  [BUGGY]  if(type.isAssignableFrom(rawType)&&  type.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isAssignableFrom(rawType)&&  type.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isAssignableFrom(rawType)&&  type.isAssignableFrom(rawType))  {	  if(type.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
181	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  Collection  <  Class  <?>.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  Collection  <  Class  <?>.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  Collection  <  Class  <?>.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
182	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  CollectionUtil.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  CollectionUtil.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  CollectionUtil.class.isAssignableFrom(rawType))  {	  if(type.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
183	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  type.isArray())  {  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  type.isArray())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()  ||  type.isArray())  {	  if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
184	[BUG]  [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType)||  type.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  null  ||  Collection.class.isAssignableFrom(rawType)||  type.isPrimitive())  {	  if(type    ==    null    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
185	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Class.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(Type.class.isAssignableFrom(rawType)||  Class.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	12	2	replace
186	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Class.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Class.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||  Class.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	12	2	replace
187	[BUG]  [BUGGY]  if(TypeUtil.isEnumType(type)||  Collection.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(TypeUtil.isEnumType(type)||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(TypeUtil.isEnumType(type)||  Collection.class.isAssignableFrom(rawType))  {	  if(TypeUtil.isAssignmentOp(type)||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	14	None	replace
188	[BUG]  [BUGGY]  if(type.isPrimitive()  ||  Type.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type.isPrimitive()  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type.isPrimitive()  ||  Type.class.isAssignableFrom(rawType))  {	  if(Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
189	[BUG]  [BUGGY]  if(primaryType.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  primaryType  [FE]                  ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(primaryType.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(primaryType.isPrimitive()  ||  type.isPrimitive())  {	  if(type.isPrimitive()    ||    rawType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  primaryType	10	None	replace
190	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  type  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	add	if(type  ==  type  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	7	18	replace
191	[BUG]  [BUGGY]  if(type  ==  type  ||  Collection.class.isAssignableFrom(rawType))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  type  ||  Collection.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  type  ||  Collection.class.isAssignableFrom(rawType))  {	  if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    	compilable	  [FE]  ClassCastException  	7	18	replace
192	[BUG]  [BUGGY]  if(rawType!=  null  &&  Collection.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType!=  null  &&  Collection.class.isAssignableFrom(type))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType!=  null  &&  Collection.class.isAssignableFrom(type))  {	  if(type!=    null    ||    Collection.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	7	None	replace
193	[BUG]  [BUGGY]  if(type  ==  elementType  ||  Type.class.isAssignableFrom(rawType))  {  [CE]  cannot  find  symbol  elementType  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(type  ==  elementType  ||  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(type  ==  elementType  ||  Type.class.isAssignableFrom(rawType))  {	  if(type    ==    null    ||    Type.class.isAssignableFrom(rawType))    {    	non-compiled	[CE]  cannot  find  symbol  elementType	19	None	replace
194	[BUG]  [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.class.isAssignedFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(rawType.isPrimitive()  ||  Collection.class.isAssignableFrom(rawType))  {  if(rawType.isPrimitive()  ||  Collection.class.isAssignedFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(rawType.isPrimitive()    ||    Collection.class.isAssignableFrom(rawType))    {    if(rawType.isPrimitive()  ||  Collection.class.isAssignedFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
195	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  if(Type.class.isAssignableFrom(rawType)||  Type.class.isAssignableFrom(rawType))  {  if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	if(Type.class.isAssignableFrom(rawType)||    Type.class.isAssignableFrom(rawType))    {    if(Type.class.isAssignableFrom(rawType)&&  Type.class.isAssignableFrom(rawType))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
196	[BUG]  [BUGGY]  Type  <?  super  T>  rawType  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                      ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  Type  <?  super  T>  rawType  =  type.getRawClass();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	Type  <?  super  T>  rawType  =  type.getRawClass();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
197	[BUG]  [BUGGY]  Class  <?  super  T>  rawType  =  type.getReturnType();  [CE]  illegal  start  of  type  [FE]                        ClassCastException    [CONTEXT]    final  Type  type,  Class<?  super  T>  rawType)  {    [BUGGY]  Class  <?  super  T>  rawType  =  type.getReturnType();  [BUGGY]    if  (SortedSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  TreeSet<Object>();  }  };  }  else  if  (EnumSet.class.isAssignableFrom(rawType))  {  return  new  ObjectConstructor<T>()  {  @SuppressWarnings(   "rawtypes   ")  @Override  public  T  construct()  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.24618298195866545	130	130	2	replace	Class  <?  super  T>  rawType  =  type.getReturnType();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
