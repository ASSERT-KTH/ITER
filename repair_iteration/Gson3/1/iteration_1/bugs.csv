bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  TreeMap  <  Object,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]    ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  TreeMap  <  Object,  Object>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  TreeMap  <  Object,  Object>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	1	None	replace
2	[BUG]  [BUGGY]  return  new  SortedMap  <  Object,  Object>()  {  [CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap  [FE]      ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  SortedMap  <  Object,  Object>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  SortedMap  <  Object,  Object>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap	1	None	replace
3	[BUG]  [BUGGY]  return(T)new  ObjectConstructor  <  T>()  {  [CE]  incompatible  types  [FE]        ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return(T)new  ObjectConstructor  <  T>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ObjectConstructor  <  T>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  incompatible  types	1	None	replace
4	[BUG]  [BUGGY]  return  new  Constructor  <  T>()  {  [CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;  [FE]          ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  Constructor  <  T>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  Constructor  <  T>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;	1	None	replace
5	[BUG]  [BUGGY]  return  new  ArrayList  <  T>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]            ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  ArrayList  <  T>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ArrayList  <  T>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	1	None	replace
6	[BUG]  [BUGGY]  return  new  PropertyConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]              ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  PropertyConstructor  <  T>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  PropertyConstructor  <  T>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
7	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]    [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	  	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]    ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  DefaultImplementationConstructor  <  T>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  return(T)new  TreeMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]    ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return(T)new  TreeMap  <  Object,  Object>();  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  TreeMap  <  Object,  Object>();	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  return  new  PropertyMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]      ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  PropertyMap  <  Object,  Object>()  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  PropertyMap  <  Object,  Object>()  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType)  {  [CE]  anonymous  class  implements  interface;  cannot  have  arguments  [FE]        ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType)  {  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType)  {	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  anonymous  class  implements  interface;  cannot  have  arguments	1	None	replace
12	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>()  ==  [CE]  illegal  start  of  expression  [FE]          ClassCastException  [CONTEXT]  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]  return  new  ObjectConstructor  <  T>()  ==  [BUGGY]  @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>()  ==	return  new  ObjectConstructor<T>()  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
