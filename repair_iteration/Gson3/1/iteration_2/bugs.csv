bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  TreeMap  <  T>()  {  [CE]  wrong  number  of  type  arguments;  required  2  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  TreeMap  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  TreeMap  <  T>()  {	  return    new    ArrayList    <    T>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	5	None	replace
2	[BUG]  [BUGGY]  return  new  LinkedHashMap  <  Object,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  LinkedHashMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  LinkedHashMap  <  Object,  Object>()  {	  return    new    ArrayList    <    T>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	5	None	replace
3	[BUG]  [BUGGY]  return  new  LinkedHashMap  <  T>()  {  [CE]  wrong  number  of  type  arguments;  required  2  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  LinkedHashMap  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  LinkedHashMap  <  T>()  {	  return    new    ArrayList    <    T>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	5	None	replace
4	[BUG]  [BUGGY]  return(T)new  ArrayList  <  T>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  ArrayList  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ArrayList  <  T>()  {	  return    new    ArrayList    <    T>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	5	None	replace
5	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  SortedMap  <  Object,  Object>();  }  [CE]  <identifier>  expected  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  SortedMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  SortedMap  <  Object,  Object>();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  SortedMap  <  Object,  Object>();  }  [CE]  <identifier>  expected  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  SortedMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  SortedMap  <  Object,  Object>();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  SortedMap  <  Object,  Object>();  }  [CE]  <identifier>  expected  [FE]                        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  SortedMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType())))  {  return  new  SortedMap  <  Object,  Object>();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType())))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(TypeToken.get(((SortedMap.Type)type).getActualTypeArguments()[0]).getRawType()))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  if(!SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(!SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(!SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
14	[BUG]  [BUGGY]  if(sortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(sortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(sortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType)||  SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType)||  SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType)||  SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  if(type  instanceof  Class  <?>)  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  if(type  instanceof  Class  <?>)  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  if(type  instanceof  Class  <?>)  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
17	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  if(type  instanceof  Class  <?  extends  T>)  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  if(type  instanceof  Class  <?  extends  T>)  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  if(type  instanceof  Class  <?  extends  T>)  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>();  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>();	  return    new    ObjectConstructor    <    T>()    ==    	non-compiled	[CE]  ';'  expected	12	None	replace
19	[BUG]  [BUGGY]  return(T)new  ObjectConstructor  <  T>();  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  ObjectConstructor  <  T>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ObjectConstructor  <  T>();	  return    new    ObjectConstructor    <    T>()    ==    	non-compiled	[CE]  ';'  expected	12	None	replace
20	[BUG]  [BUGGY]  return  new  TreeMap  <  Object,  Object>()  [CE]  ';'  expected  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  TreeMap  <  Object,  Object>()  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  TreeMap  <  Object,  Object>()	  return    new    ObjectConstructor    <    T>()    ==    	non-compiled	[CE]  ';'  expected	12	None	replace
21	[BUG]  [BUGGY]  return(T)new  ObjectConstructor  <  T>()  [CE]  ';'  expected  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  ObjectConstructor  <  T>()  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ObjectConstructor  <  T>()	  return    new    ObjectConstructor    <    T>()    ==    	non-compiled	[CE]  ';'  expected	12	None	replace
22	[BUG]  [BUGGY]  return(T)new  DefaultImplementationConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  DefaultImplementationConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  DefaultImplementationConstructor  <  T>()  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
23	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(rawType)  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(rawType)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  DefaultImplementationConstructor  <  T>(rawType)  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
24	[BUG]  [BUGGY]  Return  new  DefaultImplementationConstructor  <  T>()  {  [CE]  not  a  statement  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  Return  new  DefaultImplementationConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	Return  new  DefaultImplementationConstructor  <  T>()  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  not  a  statement	8	None	replace
25	[BUG]  [BUGGY]  return  new  StandardImplementationConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  StandardImplementationConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  StandardImplementationConstructor  <  T>()  {	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
26	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  ==  [CE]  illegal  start  of  expression  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  ==  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  DefaultImplementationConstructor  <  T>()  ==	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  Constructor  <  T>  in  class  Constructor  <  T#2>  cannot  be  applied  to  given  types;  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  Constructor  <  T>  in  class  Constructor  <  T#2>  cannot  be  applied  to  given  types;  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	Constructor  <  T>  in  class  Constructor  <  T#2>  cannot  be  applied  to  given  types;	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	4	None	replace
28	[BUG]  [BUGGY]  if(type  instanceof  Constructor  <  T>)  {  return  new  Constructor  <  T>()  {  [CE]  illegal  start  of  expression  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  Constructor  <  T>)  {  return  new  Constructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  Constructor  <  T>)  {  return  new  Constructor  <  T>()  {	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  final  Constructor  <  T>  in  class  Constructor  <  T#2>  cannot  be  applied  to  given  types;  [CE]  ';'  expected  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  final  Constructor  <  T>  in  class  Constructor  <  T#2>  cannot  be  applied  to  given  types;  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	final  Constructor  <  T>  in  class  Constructor  <  T#2>  cannot  be  applied  to  given  types;	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	4	None	replace
30	[BUG]  [BUGGY]  return(Constructor  <  T>)new  Constructor  <  T>()  {  [CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(Constructor  <  T>)new  Constructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(Constructor  <  T>)new  Constructor  <  T>()  {	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;	4	None	replace
31	[BUG]  [BUGGY]  return  new  Constructor  <  T>(rawType)  {  [CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  Constructor  <  T>(rawType)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  Constructor  <  T>(rawType)  {	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  constructor  Constructor  in  class  Constructor<T#2>  cannot  be  applied  to  given  types;	4	None	replace
32	[BUG]  [BUGGY]  if(type  instanceof  Constructor  <  T>)  {  return  new  Constructor  <  T>()  {  }  [CE]  ';'  expected  [FE]                        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  Constructor  <  T>)  {  return  new  Constructor  <  T>()  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  Constructor  <  T>)  {  return  new  Constructor  <  T>()  {  }	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  return  new  SortedHashMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  SortedHashMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  SortedHashMap  <  Object,  Object>()  {	  return    new    PropertyMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
34	[BUG]  [BUGGY]  return(T)new  PropertyMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  PropertyMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  PropertyMap  <  Object,  Object>()  {	  return    new    PropertyMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
35	[BUG]  [BUGGY]  return  new  PropertyMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  PropertyMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  PropertyMap  <  Object,  Object>();	  return    new    PropertyMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	10	None	replace
36	[BUG]  [BUGGY]  return  new  TreeMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  TreeMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  TreeMap  <  Object,  Object>();	  return    new    TreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	1	None	replace
37	[BUG]  [BUGGY]  return(T)new  TreeMap  <  Object,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  TreeMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  TreeMap  <  Object,  Object>()  {	  return    new    TreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	1	None	replace
38	[BUG]  [BUGGY]  return  new  TreeMap  <  Object,  Object>(rawType)  {  [CE]  no  suitable  constructor  found  for  TreeMap(Class<CAP#1>)  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  TreeMap  <  Object,  Object>(rawType)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  TreeMap  <  Object,  Object>(rawType)  {	  return    new    TreeMap    <    Object,    Object>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeMap(Class<CAP#1>)	1	None	replace
39	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  type)  {  [CE]  anonymous  class  implements  interface;  cannot  have  arguments  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  type)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType,  type)  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  anonymous  class  implements  interface;  cannot  have  arguments	11	None	replace
40	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  elementType)  {  [CE]  cannot  find  symbol  elementType  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  elementType)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType,  elementType)  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  cannot  find  symbol  elementType	11	None	replace
41	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  null)  {  [CE]  anonymous  class  implements  interface;  cannot  have  arguments  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  null)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType,  null)  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  anonymous  class  implements  interface;  cannot  have  arguments	11	None	replace
42	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  false)  {  [CE]  anonymous  class  implements  interface;  cannot  have  arguments  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  false)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType,  false)  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  anonymous  class  implements  interface;  cannot  have  arguments	11	None	replace
43	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType.getRawClass())  {  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(rawType.getRawClass())  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType.getRawClass())  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
44	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(type)  {  [CE]  anonymous  class  implements  interface;  cannot  have  arguments  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(type)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(type)  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  anonymous  class  implements  interface;  cannot  have  arguments	11	None	replace
45	[BUG]  [BUGGY]  return(T)new  LinkedHashMap  <  Object,  Object>()  {  [CE]  method  does  not  override  or  implement  a  method  from  a  supertype  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  LinkedHashMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  LinkedHashMap  <  Object,  Object>()  {	  return(T)new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  method  does  not  override  or  implement  a  method  from  a  supertype	3	None	replace
46	[BUG]  [BUGGY]  return(T)new  ObjectConstructor  <  Class  <  T>()  {  [CE]  >  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  ObjectConstructor  <  Class  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ObjectConstructor  <  Class  <  T>()  {	  return(T)new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  >  expected	3	None	replace
47	[BUG]  [BUGGY]  return(T)new  ObjectConstructor  <  Object>()  {  [CE]  incompatible  types  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  ObjectConstructor  <  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ObjectConstructor  <  Object>()  {	  return(T)new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  incompatible  types	3	None	replace
48	[BUG]  [BUGGY]  return(T)new  SortedMap  <  Object,  Object>()  {  [CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  SortedMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  SortedMap  <  Object,  Object>()  {	  return(T)new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap	3	None	replace
49	[BUG]  [BUGGY]  return  new  SortedMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  SortedMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  SortedMap  <  Object,  Object>();	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	2	None	replace
50	[BUG]  [BUGGY]  return(SortedMap  <  Object,  Object>)new  SortedMap  <  Object,  Object>()  {  [CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(SortedMap  <  Object,  Object>)new  SortedMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(SortedMap  <  Object,  Object>)new  SortedMap  <  Object,  Object>()  {	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap	2	None	replace
51	[BUG]  [BUGGY]  return(SortedMap.class.isAssignableFrom(rawType))?  new  SortedMap  <  Object,  Object>()  :  new  SortedMap  <  Object,  Object>()  {  [CE]  SortedMap  is  abstract;  cannot  be  instantiated  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(SortedMap.class.isAssignableFrom(rawType))?  new  SortedMap  <  Object,  Object>()  :  new  SortedMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(SortedMap.class.isAssignableFrom(rawType))?  new  SortedMap  <  Object,  Object>()  :  new  SortedMap  <  Object,  Object>()  {	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  SortedMap  is  abstract;  cannot  be  instantiated	2	None	replace
52	[BUG]  [BUGGY]  return(SortedMap.class.isAssignableFrom(rawType))?  new  TreeMap  <  Object,  Object>()  :  new  SortedMap  <  Object,  Object>()  {  [CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(SortedMap.class.isAssignableFrom(rawType))?  new  TreeMap  <  Object,  Object>()  :  new  SortedMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(SortedMap.class.isAssignableFrom(rawType))?  new  TreeMap  <  Object,  Object>()  :  new  SortedMap  <  Object,  Object>()  {	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  <anonymous  com.google.gson.internal.ConstructorConstructor$9>  is  not  abstract  and  does  not  override  abstract  method  entrySet()  in  SortedMap	2	None	replace
53	[BUG]  [BUGGY]  return(T)new  PropertyConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  PropertyConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  PropertyConstructor  <  T>()  {	  return    new    PropertyConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  return  new  PropertyConstructor  <  Object>()  {  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  PropertyConstructor  <  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  PropertyConstructor  <  Object>()  {	  return    new    PropertyConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
55	[BUG]  [BUGGY]  return  new  PropertyConstructor  <  T>(rawType)  {  [CE]  cannot  find  symbol  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  PropertyConstructor  <  T>(rawType)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  PropertyConstructor  <  T>(rawType)  {	  return    new    PropertyConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
56	[BUG]  [BUGGY]  return(T)new  LinkedHashMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  LinkedHashMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  LinkedHashMap  <  Object,  Object>();	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
57	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
58	[BUG]  [BUGGY]  return(T)new  SortedHashMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  SortedHashMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  SortedHashMap  <  Object,  Object>();	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
59	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType)||  TreeMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType)||  TreeMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType)||  TreeMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
60	[BUG]  [BUGGY]  return(SortedMap  <  Object,  Object>)  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(SortedMap  <  Object,  Object>)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(SortedMap  <  Object,  Object>)  {	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
61	[BUG]  [BUGGY]  return  new  ArrayList  <  Object,  Object>()  {  [CE]  wrong  number  of  type  arguments;  required  1  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ArrayList  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ArrayList  <  Object,  Object>()  {	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	2	None	replace
62	[BUG]  [BUGGY]  return  new  SortedMap  <  Object,  Object>()  ==  [CE]  illegal  start  of  expression  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  SortedMap  <  Object,  Object>()  ==  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  SortedMap  <  Object,  Object>()  ==	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  return  new  SortedMapConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  SortedMapConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  SortedMapConstructor  <  T>()  {	  return    new    PropertyConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
64	[BUG]  [BUGGY]  return  new  LocalizedMapConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  LocalizedMapConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  LocalizedMapConstructor  <  T>()  {	  return    new    PropertyConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
65	[BUG]  [BUGGY]  return  new  ClassConstructor  <  T>()  {  [CE]  cannot  find  symbol  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ClassConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ClassConstructor  <  T>()  {	  return    new    PropertyConstructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
66	[BUG]  [BUGGY]  return  new  TreeMap  <?  super  T>()  {  [CE]  wrong  number  of  type  arguments;  required  2  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  TreeMap  <?  super  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  TreeMap  <?  super  T>()  {	  return    new    ArrayList    <    T>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	5	None	replace
67	[BUG]  [BUGGY]  return  new  Constructor  <  T>(type.getRawClass())  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  Constructor  <  T>(type.getRawClass())  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  Constructor  <  T>(type.getRawClass())  {	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
68	[BUG]  [BUGGY]  return  new  Constructor  <  T>(type);  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  Constructor  <  T>(type);  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  Constructor  <  T>(type);	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	4	None	replace
69	[BUG]  [BUGGY]  return  new  Constructor  <  T>(type.getRawType())  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  Constructor  <  T>(type.getRawType())  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  Constructor  <  T>(type.getRawType())  {	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
70	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>()  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>()  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>()	  return    new    ObjectConstructor    <    T>()    ==    	non-compiled	[CE]  ';'  expected	12	None	replace
71	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>()  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  DefaultImplementationConstructor  <  T>()	  return    new    ObjectConstructor    <    T>()    ==    	non-compiled	[CE]  ';'  expected	12	None	replace
72	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>()  ||  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>()  ||  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>()  ||	  return    new    ObjectConstructor    <    T>()    ==    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  SortedMap  <  Object,  Object>();  }  [CE]  <identifier>  expected  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  SortedMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  SortedMap  <  Object,  Object>();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  if(SortedMap.class.isAssignableFrom(rawType))  {  [CE]  <identifier>  expected  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  if(SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  if(SortedMap.class.isAssignableFrom(rawType))  {	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
75	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  if(SortedMap.class.isAssignableFrom(rawType))  {  }  [CE]  <identifier>  expected  [FE]                        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  if(SortedMap.class.isAssignableFrom(rawType))  {  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  if(SortedMap.class.isAssignableFrom(rawType))  {  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
76	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return  new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]                          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return  new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType))  {  return  new  TreeMap  <  Object,  Object>();  }	      	non-compiled	[CE]  ';'  expected	7	None	replace
77	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]                            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType))  {	      	non-compiled	[CE]  ';'  expected	7	None	replace
78	[BUG]  [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  TreeMap  <  Object,  Object>();  }  [CE]  <identifier>  expected  [FE]                              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(type  instanceof  SortedMap.class.isAssignableFrom(SortedMap.get(((SortedMap)type).getActualTypeArguments()[0]).getRawType()))  {  return  new  TreeMap  <  Object,  Object>();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
79	[BUG]  [BUGGY]  return(T)new  ArrayList  <  Object,  ObjectConstructor  <  T>()  {  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  ArrayList  <  Object,  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ArrayList  <  Object,  ObjectConstructor  <  T>()  {	  return(T)new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  >  expected	3	None	replace
80	[BUG]  [BUGGY]  return(T)new  ArrayList  <  Object,  Object>()  {  [CE]  wrong  number  of  type  arguments;  required  1  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  ArrayList  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  ArrayList  <  Object,  Object>()  {	  return(T)new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	3	None	replace
81	[BUG]  [BUGGY]  return  new  LocalizedMap  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  LocalizedMap  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  LocalizedMap  <  Object,  Object>()  {	  return    new    PropertyMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
82	[BUG]  [BUGGY]  return  new  List  <  Object,  Object>()  {  [CE]  cannot  find  symbol  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  List  <  Object,  Object>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  List  <  Object,  Object>()  {	  return    new    PropertyMap    <    Object,    Object>()    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
83	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  true)  {  [CE]  anonymous  class  implements  interface;  cannot  have  arguments  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  true)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType,  true)  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  anonymous  class  implements  interface;  cannot  have  arguments	11	None	replace
84	[BUG]  [BUGGY]  return  new  Constructor  <  T>(rawType.getRawClass())  {  [CE]  cannot  find  symbol  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  Constructor  <  T>(rawType.getRawClass())  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  Constructor  <  T>(rawType.getRawClass())  {	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
85	[BUG]  [BUGGY]  return  new  Constructor  <  T>(rawType);  [CE]  ';'  expected  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  Constructor  <  T>(rawType);  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  Constructor  <  T>(rawType);	  return    new    Constructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	4	None	replace
86	[BUG]  [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  objectType)  {  [CE]  cannot  find  symbol  objectType  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  ObjectConstructor  <  T>(rawType,  objectType)  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  ObjectConstructor  <  T>(rawType,  objectType)  {	  return    new    ObjectConstructor    <    T>(rawType)    {    	non-compiled	[CE]  cannot  find  symbol  objectType	11	None	replace
87	[BUG]  [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(rawType);  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  DefaultImplementationConstructor  <  T>(rawType);  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  DefaultImplementationConstructor  <  T>(rawType);	  return    new    DefaultImplementationConstructor    <    T>()    {    	non-compiled	[CE]  ';'  expected	8	None	replace
88	[BUG]  [BUGGY]  return  new  SortedMap  <  T>()  {  [CE]  wrong  number  of  type  arguments;  required  2  [FE]                  ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  SortedMap  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  SortedMap  <  T>()  {	  return    new    PropertyConstructor    <    T>()    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	6	None	replace
89	[BUG]  [BUGGY]  return(T)new  TreeMap  <  Object,  ObjectConstructor  <  T>()  {  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(T)new  TreeMap  <  Object,  ObjectConstructor  <  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(T)new  TreeMap  <  Object,  ObjectConstructor  <  T>()  {	  return(T)new    ObjectConstructor    <    T>()    {    	non-compiled	[CE]  >  expected	3	None	replace
90	[BUG]  [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  {  return  new  TreeMap  <  Object,  Object>();  }  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  {  return  new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	if(SortedMap.class.isAssignableFrom(rawType))  {  return(T)new  TreeMap  <  Object,  Object>();  }  else  {  return  new  TreeMap  <  Object,  Object>();  }	  return(T)new    TreeMap    <    Object,    Object>();    	non-compiled	[CE]  ';'  expected	9	None	replace
91	[BUG]  [BUGGY]  TypeToken.get(type).getActualTypeArguments()  [0]).getRawType())  {  return  new  ObjectConstructor  <  T>();  }  [CE]  not  a  statement  [FE]                    ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  TypeToken.get(type).getActualTypeArguments()  [0]).getRawType())  {  return  new  ObjectConstructor  <  T>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	TypeToken.get(type).getActualTypeArguments()  [0]).getRawType())  {  return  new  ObjectConstructor  <  T>();  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
92	[BUG]  [BUGGY]  TypeToken.get(type).getActualTypeArguments()[0]).getRawType()  ==  null)  {  return  new  TreeMap  <  Object,  Object>();  }  [CE]  not  a  statement  [FE]                      ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  TypeToken.get(type).getActualTypeArguments()[0]).getRawType()  ==  null)  {  return  new  TreeMap  <  Object,  Object>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	TypeToken.get(type).getActualTypeArguments()[0]).getRawType()  ==  null)  {  return  new  TreeMap  <  Object,  Object>();  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
93	[BUG]  [BUGGY]  TypeToken.get(type).getActualTypeArguments()[0]).getRawType()  ==  null)  {  return  new  ObjectConstructor  <  T>();  }  [CE]  not  a  statement  [FE]                        ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  TypeToken.get(type).getActualTypeArguments()[0]).getRawType()  ==  null)  {  return  new  ObjectConstructor  <  T>();  }  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	TypeToken.get(type).getActualTypeArguments()[0]).getRawType()  ==  null)  {  return  new  ObjectConstructor  <  T>();  }	      	non-compiled	[CE]  not  a  statement	7	None	replace
94	[BUG]  [BUGGY]  SortedMap.class.isAssignableFrom(rawType))  {  [CE]  ';'  expected  [FE]                          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  SortedMap.class.isAssignableFrom(rawType))  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	SortedMap.class.isAssignableFrom(rawType))  {	      	non-compiled	[CE]  ';'  expected	7	None	replace
95	[BUG]  [BUGGY]  TypeToken.get(type).getActualTypeArguments()  [0]).getRawType())  {  return  new  ObjectConstructor  <  T>();  [CE]  not  a  statement  [FE]                            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  TypeToken.get(type).getActualTypeArguments()  [0]).getRawType())  {  return  new  ObjectConstructor  <  T>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	TypeToken.get(type).getActualTypeArguments()  [0]).getRawType())  {  return  new  ObjectConstructor  <  T>();	      	non-compiled	[CE]  not  a  statement	7	None	replace
96	[BUG]  [BUGGY]  return(SortedMap  <  Object,  Object>)new  TreeMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]          ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(SortedMap  <  Object,  Object>)new  TreeMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(SortedMap  <  Object,  Object>)new  TreeMap  <  Object,  Object>();	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	2	None	replace
97	[BUG]  [BUGGY]  return(SortedMap  <  Object,  Object>)new  SortedMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(SortedMap  <  Object,  Object>)new  SortedMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(SortedMap  <  Object,  Object>)new  SortedMap  <  Object,  Object>();	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	2	None	replace
98	[BUG]  [BUGGY]  return(SortedMap  <  Object,  Object>)new  SortedHashMap  <  Object,  Object>();  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return(SortedMap  <  Object,  Object>)new  SortedHashMap  <  Object,  Object>();  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return(SortedMap  <  Object,  Object>)new  SortedHashMap  <  Object,  Object>();	  return    new    SortedMap    <    Object,    Object>()    {    	non-compiled	[CE]  ';'  expected	2	None	replace
99	[BUG]  [BUGGY]  return  new  TreeMap  <  Class  <?  super  T>()  {  [CE]  >  expected  [FE]                ClassCastException    [CONTEXT]    return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  ArrayList<Object>();  }  };  }  }  if  (Map.class.isAssignableFrom(rawType))  {  if  (SortedMap.class.isAssignableFrom(rawType))  {    [BUGGY]  return  new  TreeMap  <  Class  <?  super  T>()  {  [BUGGY]    @Override  public  T  construct()  {  return  (T)  new  TreeMap<Object,  Object>();  }  };  }  else  if  (type  instanceof  ParameterizedType  &&  !(String.class.isAssignableFrom(  TypeToken.get(((ParameterizedType)  type).getActualTypeArguments()[0]).getRawType())))  {  return  new  ObjectConstructor<T>()  {  @Override  public  T  construct()  {  return  (T)  new  LinkedHashMap<Object,  Object>();  }  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultImplementationConstructor  [RETURN_TYPE]  <T>  Type  type  Class<?  super  T>  rawType  [VARIABLES]  Type  elementType  type  Class  rawType  UnsafeAllocator  unsafeAllocator  boolean  Map  instanceCreators  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.5	176	176	2	replace	return  new  TreeMap  <  Class  <?  super  T>()  {	  return    new    ArrayList    <    T>()    {    	non-compiled	[CE]  >  expected	5	None	replace
