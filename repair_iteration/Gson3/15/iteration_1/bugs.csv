bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]    ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	29	None	replace
2	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	add	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	compilable	  [FE]  ClassCastException  	29	2	replace
3	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [FE]  ClassCastException  [FE]      ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	compilable	  [FE]  ClassCastException  	29	2	replace
4	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor();  [CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]        ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getDeclaredConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  local  variable  constructor  is  accessed  from  within  inner  class;  needs  to  be  declared  final	29	None	replace
5	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]          ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperClassConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getSuperClassConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
6	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]            ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
7	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]              ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
8	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [CE]  cannot  find  symbol  [FE]                ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getSuperclassConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
9	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  constructor  [FE]                  ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]    [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	  	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol  constructor	29	None	replace
10	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();  [CE]  cannot  find  symbol  [FE]    ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.newDefaultConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
11	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getSuperClassConstructor();  [CE]  cannot  find  symbol  [FE]      ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getSuperClassConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getSuperClassConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
12	[BUG]  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [CE]  cannot  find  symbol  [FE]        ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	final  Constructor  <?  super  T>  constructor  =  rawType.getRawConstructor();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
13	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperclass();  [CE]  incompatible  types  [FE]    ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getSuperclass();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getSuperclass();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  incompatible  types	29	None	replace
14	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getRawClass();  [CE]  cannot  find  symbol  [FE]      ClassCastException  [CONTEXT]  private  <T>  ObjectConstructor<T>  newDefaultConstructor(Class<?  super  T>  rawType)  {  try  {  [BUGGY]  Constructor  <?  super  T>  constructor  =  rawType.getRawClass();  [BUGGY]  if  (!constructor.isAccessible())  {  constructor.setAccessible(true);  }  return  new  ObjectConstructor<T>()  {  @SuppressWarnings( "unchecked ")  //  T  is  the  same  raw  type  as  is  requested  @Override  public  T  construct()  {  try  {  Object[]  args  =  null;  return  (T)  constructor.newInstance(args);  }  catch  (InstantiationException  e)  {  [CLASS]  ConstructorConstructor  1  2  3  4  5  6  7  8  9  10  11  12  [METHOD]  newDefaultConstructor  [RETURN_TYPE]  <T>  Class<?  super  T>  rawType  [VARIABLES]  UnsafeAllocator  unsafeAllocator  boolean  Constructor  constructor  Class  rawType  Map  instanceCreators  Object[]  args  InvocationTargetException  e  InstantiationException  e  IllegalAccessException  e  NoSuchMethodException  e  	projects/Gson3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java	0.21566554640687682	95	95	2	replace	Constructor  <?  super  T>  constructor  =  rawType.getRawClass();	final  Constructor<?  super  T>  constructor  =  rawType.getDeclaredConstructor();  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
